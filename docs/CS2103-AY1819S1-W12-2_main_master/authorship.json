[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "\u003d Debt Tracker"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "https://travis-ci.org/CS2103-AY1819S1-W12-2/main[image:https://travis-ci.org/CS2103-AY1819S1-W12-2/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "https://coveralls.io/github/CS2103-AY1819S1-W12-2/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103-AY1819S1-W12-2/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "https://ci.appveyor.com/project/aaditkamat/main[image:https://ci.appveyor.com/api/projects/status/3obv2djr0fklonc6?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "image:https://api.codacy.com/project/badge/Grade/a1823439202645cba8d7dad08a75e02c[link\u003d\"https://app.codacy.com/app/aaditkamat/main?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dCS2103-AY1819S1-W12-2/main\u0026utm_campaign\u003dBadge_Grade_Dashboard\"]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "* This is a desktop Debt Tracker application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "* It is an application to help one keep track of not only their normal expenses, but also their loans (both loans they take and give)."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "* If managing your finances is getting too messy and complicated, leave it to this application to help you sort them out!"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "* Who knew managing finances could be so simple?"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "* While this app is aimed towards SMEs (Small and Medium-sized Enterprises) for them to keep a log of their loans, this app is also available for personal use."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "** The Debt Track has a more sophisticated GUI that includes a list  panel and an in-built Browser."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Support for _Build Automation_ using Gradle and for _Continuous Integration_ using Travis CI."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "\u003d\u003d Members"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "Cheong Kit Wai, Julian +"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "Lou Shaw Yeong +"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "Aadit Kamat +"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "Ysabella Tan Yu Lin +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "Lee Wei Qing"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "* This app was based off https://github.com/nus-cs2103-AY1819S1/addressbook-level4 [Address Book Level 4]."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "* Some parts of Address Book Level 4 were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 13,
      "-": 21,
      "Bellaaarh": 8
    }
  },
  {
    "path": "_reposense/config.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "julianc269"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "julianc269"
        },
        "content": "  \"authors\":"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "julianc269"
        },
        "content": "  ["
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "julianc269"
        },
        "content": "      \"githubId\": \"aaditkamat\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "julianc269"
        },
        "content": "      \"displayName\": \"AADIT...KAMAT\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "julianc269"
        },
        "content": "      \"authorNames\": [\"aaditkamat\",\"Aadit Kamat\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    },"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "julianc269"
        },
        "content": "      \"githubId\": \"julianc269\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "julianc269"
        },
        "content": "      \"displayName\": \"CHEON...ULIAN\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "julianc269"
        },
        "content": "      \"authorNames\": [\"julianc269\",\"unknown\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    },"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "julianc269"
        },
        "content": "      \"githubId\": \"weiqing-nic\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "julianc269"
        },
        "content": "      \"displayName\": \"LEE W... QING\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "julianc269"
        },
        "content": "      \"authorNames\": [\"weiqing-nic\"]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    },"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "julianc269"
        },
        "content": "      \"githubId\": \"xiaoyeong\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "julianc269"
        },
        "content": "      \"displayName\": \"LOU S...YEONG\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "julianc269"
        },
        "content": "      \"authorNames\": [\"xiaoyeong\",\"Lou Shaw Yeong\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    },"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "julianc269"
        },
        "content": "      \"githubId\": \"Bellaaarh\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "julianc269"
        },
        "content": "      \"displayName\": \"YSABE...U LIN\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "julianc269"
        },
        "content": "      \"authorNames\": [\"Bellaaarh\",\"DESKTOP-2HNCDPM\\\\Ysabella\"]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "julianc269"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "julianc269"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "julianc269": 30
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u00278.40.11\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.xml.bind\u0027, name: \u0027jaxb-api\u0027, version: \u00272.2.8\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-impl\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-core\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.activation\u0027, name: \u0027activation\u0027, version: \u00271.1.1\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    compile \u0027com.google.api-client:google-api-client:1.23.0\u0027"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    compile \u0027com.google.oauth-client:google-oauth-client-jetty:1.23.0\u0027"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    compile \u0027com.google.apis:google-api-services-calendar:v3-rev305-1.23.0\u0027"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    archiveName \u003d \u0027debttracker.jar\u0027"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        \u0027site-name\u0027: \u0027DebtTracker\u0027,"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/CS2103-AY1819S1-W12-2/main\u0027,"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "task copyDummySearchPage(type: Copy) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    from \u0027docs/DummySearchPage.html\u0027"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${buildDir}/docs/html5\""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 3,
      "julianc269": 4,
      "-": 244
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "Debt Tracker is based on the AddressBook - Level 4 project developed by the https://se-edu.github.io/docs/Team.html[se-edu] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "We are based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "\u003d\u003d\u003d Cheong Kit Wai, Julian"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "image::julianc269.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "{empty}[https://github.com/julianc269[github]] [\u003c\u003cjulianc269#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "Role: Managing the Team +"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "Responsibilities: +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "1) Set up a calendar to track payment deadline +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "2) Add a feature to filter based on different transaction parameters +"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "3) Handle Data Storage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "\u003d\u003d\u003d Lou Shaw Yeong"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "image::xiaoyeong.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "{empty}[https://github.com/xiaoyeong[github]] [\u003c\u003cxiaoyeong#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "Role: Writing and Maintaining Tests +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "Responsibilities: +"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "1) Enable privatisation of Contacts +"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "2) Generate analytics for Financial Spending +"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "3) Add a feature for the getting the transaction(s) with the nearest deadline."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "\u003d\u003d\u003d Aadit Kamat"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "image::aaditkamat.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "{empty}[http://github.com/aaditkamat[github]] [\u003c\u003caaditkamat#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "Role: Ensuring Software Integration +"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "Responsibilities: +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "1) Add interest rate calculation feature +"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "2) Provide currency conversion facility +"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "3) Setup a reminder +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "\u003d\u003d\u003d Ysabella Tan Yu Lin"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "image::bellaaarh.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "{empty}[https://github.com/Bellaaarh[github]] [\u003c\u003cysabella#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "Role: Managing Code Quality +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "Responsibilities: +"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "1) Manage the ToDo list +"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "2) Add a WildCardSearch feature +"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "3) Make changes to the UI"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "\u003d\u003d\u003d Lee Wei Qing"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "image::weiqing-nic.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "{empty}[https://github.com/weiqing-nic[github]] [\u003c\u003cweiqing-nic#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "Role: Scheduling Tasks +"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "Responsibilities: +"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "1) Add and delete photos for contacts in each transaction +"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "2) Maintain labels and tags for users +"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "3) Categorise contacts"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 23,
      "-": 28,
      "Bellaaarh": 19
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "* *Email us* : You can also reach us at `shawyeong94 [at] gmail.com\u0027"
      }
    ],
    "authorContributionMap": {
      "weiqing-nic": 1,
      "-": 4
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "\u003d FinancialDatabase Level 4 - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S1-W12-2/main"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "By: `W12-2`      Since: `September 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Open link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson.java`] and link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow.java`] and check for any code errors"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".. Due to an ongoing https://youtrack.jetbrains.com/issue/IDEA-189060[issue] with some of the newer versions of IntelliJ, code errors may be detected even if the project can be built and run successfully"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".. To resolve this, place your cursor over any of the code section highlighted in red. Press kbd:[ALT + ENTER], and select `Add \u0027--add-modules\u003d...\u0027 to module compiler options` for each error"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat this for the test folder as well (e.g. check link:{repoURL}/src/test/java/seedu/address/commons/util/XmlUtilTest.java[`XmlUtilTest.java`] and link:{repoURL}/src/test/java/seedu/address/ui/HelpWindowTest.java[`HelpWindowTest.java`] for code errors, and if so, resolve it the same way)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `CS2103-AY1819S1-W12-2/main` repo."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `CS2103-AY1819S1-W12-2/main`), you should do the following:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "Priorities:  High (should have) +"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "             Medium (would like to have) +"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "             Low (unlikely to have) +"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "|Priority | As a .. | I want to .. | So that I can"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| High"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "{set:cellbgcolor:green}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| new user"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| see the available command"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| execute the correct command as per need"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| High"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| user"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| add a new transaction"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| so that my transaction history is updated"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| High"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| user"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| delete a transaction"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| keep only the relevant records in my transaction history"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| High"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| user"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| hide private contact"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| uphold the confidentiality of the information provided by the contact"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| High"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| user"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| add an image attribute for each transactor"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| identify that user before settling a debt"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| High"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| user"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| know the past loans that I took"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| manage my finances"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| High"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| user"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| filter creditors and debtors"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| know who are the debtors and creditors"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| High"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| user"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| filter creditors and debtors"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| know who are the debtors and creditors"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| High"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| user"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| have a reminder to pay my creditor"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| ensure that my loans are not left outstanding"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| High"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| user"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| convert an amount between two different currencies"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| transact with people from different countries"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "| High"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "| user"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "| able to provide an analysis of my financial transactions"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "| give you an overview of my finances"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| Medium"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "{set:cellbgcolor:yellow}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| user"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| find a transaction by name"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| retrieve information about the transaction"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| Medium"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| user"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| sort debtors by rating"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| take note of defaulters for future transactions"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| Medium"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| user"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| sort by deadline for creditors"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| prioritise the persons who I should pay first"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| Medium"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| user"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| convert an amount between two different currencies"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| transact with people from different countries"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| Medium"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| user"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| sort by deadline for debtors"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| prioritise the persons who need to repay my loan"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| Medium"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| user"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| track debtors that did not pay you past the deadline"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| contact them for further information"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| Medium"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| user"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| sort creditors by amount of money I owe"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| roughly gauge my borrowing capacity"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| Medium"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| user"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| add location attribute to my user record"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| know where to make the payment if the payment is to be done in transaction"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| Medium"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| user"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| sort debtors by amount of money the owe me"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| assess my lending capacity"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| Medium"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| user"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| calculate the interest rate of the loan"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| know the right amount to collect from the debtors"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| Low"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "{set:cellbgcolor:red}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| user"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| calculate the interest rate of the loan"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| know the right amount to collect from the debtors"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| Low"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| user"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| know how much money to borrow"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| prevent accruing debt"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| Low"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| user"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| know how much money that I have loaned that transaction"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| keep records of the amount of money that I have loaned to that transaction"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| Low"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| user"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| filter debtors that pay on time"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "| I can decide to award them more loans in the future"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Events-Driven nature of the design"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 1)"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "Note how the `Model` simply raises a `FinancialDatabaseChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 2)"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "* Responds to events raised from various parts of the App and updates the UI accordingly."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": ".  `Logic` uses the `FinancialDatabaseParser` class to parse the user command."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a transaction) and/or raise events."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "* stores the Debt Tracker data."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Debt Tracker`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "* can save the Debt Tracker data in xml format and read it back."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "Classes used by multiple components are in the `seedu.FinancialDatabase.commons` package."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedFinancialDatabase`."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "It extends `FinancialDatabase` with an undo/redo history, stored internally as an `financialDatabaseStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "* `VersionedFinancialDatabase#commit()` -- Saves the current financial database state in its history."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "* `VersionedFinancialDatabase#undo()` -- Restores the previous financial database state from its history."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "* `VersionedFinancialDatabase#redo()` -- Restores a previously undone financial database state from its history."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitFinancialDatabase()`, `Model#undoFinancialDatabase()` and `Model#redoFinancialDatabase()` respectively."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedFinancialDatabase` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th transaction in the financial database. The `delete` command calls `Model#commitFinancialDatabasek()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new transaction. The `add` command also calls `Model#commitFinancialDatabase()`, causing another modified address book state to be saved into the `FinancialDatabaseStateList`."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "If a command fails its execution, it will not call `Model#commitFinancialDatabase()`, so the financial database state will not be saved into the `financialDatabaseStateList`."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "Step 4. The user now decides that adding the transaction was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoFinancialDatabase()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial financial database state, then there are no previous financial database states to restore. The `undo` command uses `Model#canUndoFinancialDatabase()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoFinancialDatabase()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the financial database to that state."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "If the `currentStatePointer` is at index `FinancialDatabaseStateList.size() - 1`, pointing to the latest financial database state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoFinancialDatabase()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the financial database, such as `list`, will usually not call `Model#commitFinancialDatabase()`, `Model#undoFinancialDatabase()` or `Model#redoFinancialDatabase()`. Thus, the `financialDatabaseStateList` remains unchanged."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitFinancialDatabase()`. Since the `currentStatePointer` is not pointing at the end of the `financialDatabaseStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the transaction being deleted)."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of financial database states."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedFinancialDatabase`."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "{set:cellbgcolor:default}"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "A project often depends on third-party libraries. For example, Debt Tracker depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "a. Include those libraries in the repo (this bloats the repo size) +"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "b. Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "\u003d\u003d\u003d Deleting a transaction"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ". Deleting a transaction while all persons are listed"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "   Expected: No transaction is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "\u003d\u003d\u003d Add Profile Image"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ".  Prerequisites: The Profile Image should not exceed 10MB."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ".. Advantage: It would prevent user from uploading large file as the application may be unstable."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "julianc269"
        },
        "content": "\u003d\u003d\u003d Add Filter Command"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "julianc269"
        },
        "content": " .  Prerequisites: Command input must adhere strictly to specified format"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "julianc269"
        },
        "content": " .. Test case: `filter n/john e/hotmail.com` +"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    Expected: Lists all persons named john with a hotmail.com email"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 146,
      "xiaoyeong": 34,
      "weiqing-nic": 6,
      "julianc269": 4,
      "-": 542
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "\u003d Debt Tracker - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ":repoURL: https://cs2103-ay1819s1-w12-2.github.io/main/"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "By: `CS2103-AY1819S1-W12-2`      Since: `September 2018`       Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "Debt Tracker (DT) is for those *who prefer to use a desktop app for tracking the user’s loans.*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "DT has a mixed usage of *Command Line Interface (CLI) and a Graphical User Interface (GUI).*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "DT can keep a record of your loans and debts as fast as other apps, if not faster!"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "1. Ensure you have Java version 9 or later installed in your Computer. +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "2. Download the latest link:{repoURL}/releases[debttracker.jar]. +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "3. Copy the file to the folder you want to use as the home folder for the application. +"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "4. Double-click the file to start the app. The GUI should appear in a few seconds. +"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "5. Type the command in the command box and press Enter to execute it. e.g. typing help and pressing Enter +"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "   will open the help window."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "NOTE: Commands are solely for current transaction list unless specified otherwise. +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "NOTE: Commands that make use of the transaction amounts such as filter, analytics and interest can be used"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "      properly only after the convert command is executed first +"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "NOTE: The command words are case-sensitive. +"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "Invokes the user guide for handy reference when typing commands. +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "\u003d\u003d\u003d Adding a transaction : `add`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "Adds a transaction to the current transaction list in the database. +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "Conditions: +"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "* The transaction\u0027s attributes are case sensitive."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "* The transaction type can only be a loan or a debt +"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "  E.g. tt/loan OR tt/debt"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "* The transaction amount must be prefixed with a three-letter currency code (such as SGD) +"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "  and then with a value that is a real number rounded to two decimal places (even with a +"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "  trailing zero)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "  E.g. ta/SGD 45.20 is valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "       ta/SGD 45.3 is not valid (Only one digit after the decimal point)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "       ta/IN 56.75 is not valid (The currency code must consist of 3 letters as per ISO 3166 standard)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "* The transaction deadline must be a valid date according to the Gregorian Calendar +"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "  following the DD/MM/YYYY format and should be a date in the future. +"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "  E.g. If the date of use of the application is 2nd November 2018:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "       td/25/12/2018 is valid"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "       td/30/10/2018 is not valid (It\u0027s a date that is in the past)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "       td/29/02/2018 is not valid (It\u0027s not a valid date according to the Gregorian Calendar)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "* A person\u0027s name should only contain alphanumeric characters and spaces, and should not be blank. +"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "* A person\u0027s phone number should consist of only digits, with a minimum of 3 digits +"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "* A person\u0027s email address should be of the format local-part@domain and adhere to the following constraints:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    ** The local-part should only contain alphanumeric characters and these special characters, excluding the parentheses."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    ** This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    ** The domain name must:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "       *** be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "       *** start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "       *** consist of alphanumeric characters, a period or a hyphen for the characters in between, if any."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "* A person\u0027s address can take any values but must not be blank."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "* The tags associated with a person must be alphanumeric"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "* If the tokens such as tt/ or ta/ are repeated several times and contain valid values, then the last value is"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "  considered."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "* Duplicate transactions consist of same type, amount, deadline and person."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "  ** A duplicate person is a person with the same name and same email or phone number as another person in the"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     database."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "Format:  +"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "add tt/TYPE ta/AMOUNT td/DEADLINE n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]… +"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "E.g. add tt/loan ta/SGD 50.00 td/18/12/2018 n/James Ho p/22224444 e/jamesho@example.com +"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "a/123, Clementi Rd, 1234665 t/friends"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "\u003d\u003d\u003d Uploading/Deleting a photo under a person : `uploadp` (TO BE IMPLEMENTED)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "Uploads a photo to a person’s contact or deletes a photo from a person\u0027s contact based on the index inputted. +"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "Formats: +"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "To upload a photo: uploadp [INDEX] up/[FILE_PATH] +"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "To delete a photo: uploadp [INDEX] up/delete"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "e.g. uploadp 3 up/Users/Photo.png +"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "     uploadp 1 up/delete"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "\u003d\u003d\u003d View calendar with debt deadlines : `calendar`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "Displays a Google calendar showing the user\u0027s transactions and their deadlines. +"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "Conditions: +"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "* This command can only be used with one of the following keywords: 1) show  2) login 3)logout. +"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "* The keywords are case-sensitive."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "* This feature requires linking the deadlines to your Google account. Hence a test google account will be provided. +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "Formats: +"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "* To show calendar in the app: calendar show +"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "* To login to your Google account: calendar login +"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "* To logout of your Google account: calendar logout +"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "* To manually synchronise the user\u0027s transactions with the calendar: calendar sync"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "\u003d\u003d\u003d Converting multiple currencies: `convert`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "Converts amounts in multiple different foreign currencies to their respective amounts in +"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "the base currency, Singapore Dollars. +"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "NOTE: Makes use of an external foreign currency API: https://free.currencyconverterapi.com/[Free Currency Converter API]"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "Format: convert"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "\u003d\u003d\u003d Calculating interest on transactions: `interest`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "Calculates interest on each transaction on a monthly basis, based on the interest rate and scheme provided. +"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "Conditions: +"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "* Interest scheme must be either simple or compound. These keywords are case-insensitive. +"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "* An interest rate must be entered in percentage with the value being a real number. +"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "* The interest rate is capped at 4%. +"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "Format: interest INTEREST_SCHEME INTEREST_RATE +"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "e.g. interest simple 1.1%"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "\u003d\u003d\u003d Updating a transaction : `edit`"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "Edits an existing transaction’s details. +"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "Conditions: +"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "* An index must be provided identifying a transaction and that index must be an integer ranging from 1 to the size"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "  of the transaction list displayed"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "* Attributes such as name, phone and email are optional"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "* The attributes are case sensitive"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "* The attributes should follow the format specified in the add command."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]… +"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "E.g. edit 2 n/James Lee e/jameslee@example.com"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "\u003d\u003d\u003d Sorting transactions : `sort`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "Sorts transactions based on an input or default parameter."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "Conditions: +"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "* Valid sort parameters are:"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "  ** amount"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "  ** type"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "  ** deadline"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "* The sort parameters are case-insensitive."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "* If a parameter other than the listed ones is provided or the parameter is not provided at all,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "  then the application assumes that you want to sort by the default parameter, the person name"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "  and the tie is broken using the phone number or email address."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "Format: +"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "sort SORT_PARAMETER +"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "E.g. sort type OR +"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     sort amount OR +"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     sort deadline +"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Filtering transactions by various criteria: `filter`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "Filters transactions matching specified criteria. +"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "Conditions: +"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "* It is optional to provide the criteria. +"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "* The respective parameters should follow the format specified in the add command. +"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "Format:  +"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "filter [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [tt/TYPE] [ta/AMOUNT] [td/DEADLINE] [tamin/MIN_AMOUNT] [tamax/MAX_AMOUNT] [tdmin/EARLIEST_DATE] [tdmax/LATEST_DATE]"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "e.g. filter t/debtor OR +"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     filter t/debtor tamin/SGD 50.00 tamax/SGD 100.00 tdmin/05/06/2018 tdmax/31/12/2018"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "\u003d\u003d\u003d Filtering transactions by closest deadline: `nt`"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "Filtering and listing out the transaction(s) which deadlines are closest to the current date. +"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "\"nt\" stands for NextTransaction. +"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "Format: nt"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "\u003d\u003d\u003d Locating transactions by substring : `search`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "Depending on format, matches the inputted substring with the names of persons involved in current transactions, or in"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "past transactions. +"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "Conditions: +"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "* The substring must be within the first or last name of a person involved, otherwise an empty list will be returned. +"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "* If several substrings are keyed in (eg. search al ice), all contacts in which the first or last names"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "contain any of the substrings (in the example, either \"al\" or \"ice\") will be returned."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "Format: +"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "To find within current transactions list: search SUBSTRING [MORE_SUBSTRINGS] ... +"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "To find within past transactions list: search past SUBSTRING [MORE_SUBSTRINGS] ..."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "e.g. search Be +"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "OR search Be + Am +"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "OR search past Le +"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "OR search past Yu + F + Pot"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "\u003d\u003d\u003d Deleting a transaction : `delete`"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "Depending on format used, either deletes the specified transaction from the current transaction list only,  +"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "or deletes the specified transaction from the past transaction list."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "Deleting from current transaction list: delete INDEX +"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "Deleting from past transaction list: delete past INDEX"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "e.g. delete 3 +"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "OR delete past 3"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "\u003d\u003d\u003d Selecting a transaction : `select`"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "Depending on the format, selects the transaction identified by the index number used in the current transaction list"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "or the past transaction list. +"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "Within current transactions list: select INDEX +"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "Within past transactions list: select past INDEX"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "e.g. select 2 +"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "OR select past 2"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "\u003d\u003d\u003d Listing all the previously entered commands : `history`"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "Format: history"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "\u003d\u003d\u003d Analyzing a possible loan amount : `analytics`"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "Analyses the amount you have left after taking into consideration your loans, and the amount that you can loan out. +"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "Format: analytics"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "\u003d\u003d\u003d Marking a transaction as Paid : `paid`"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "Deletes a transaction (that the user deems to have been paid off) from the current transactions list,"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "and adds it to the past transactions list. +"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "Format: paid INDEX"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "e.g. paid 4"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "\u003d\u003d\u003d Switching between viewing past and current transactions : `switch`"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "Depending on input, it will switch to either the Current Transactions tab or the Paid Transactions tab. +"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "This is not an undoable command, but you can use switch to change back to the original tab."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "Format: switch LIST_TYPE"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "e.g. switch curr +"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "OR switch past"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "\u003d\u003d\u003d Undoing previous command : `undo`"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "Restores the debt tracker to the state before the previous undoable command was executed. +"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "Format: undo"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Redoing the previously undone command : `redo`"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "Reverses the most recent undo command. +"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "Format: redo"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "Clears all entries from Debt Tracker, regardless of whether it is in the current transaction list or the past"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": " transaction list. +"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "Format: clear"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "Format: exit"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "Debt Tracker data is saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "Q: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "A: Install the app in the other computer and overwrite the empty data file it creates with the file +"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "   that contains the data of your previous Address Book folder."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "Add : add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS d/DEBT dl/DEADLINE [t/TAG]… +"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "e.g. add tt/loan ta/SGD 50.00 td/18/12/2018 n/James Ho p/22224444 e/jamesho@example.com +"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     a/123, Clementi Rd, 1234665 t/friends"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "Uploadp : uploadp INDEX up/FILE_PATH [For uploading a picture] +"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "          OR: uploadp INDEX up/delete [For deleting a picture] +"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "e.g. uploadp 3 up/Users/Photo.png +"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     uploadp 1 up/delete"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "Calendar : calendar show +"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "OR: calendar login +"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "OR: calendar logout +"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "Convert : convert"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "Interest : interest INTEREST_SCHEME INTEREST_RATE +"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "e.g. interest simple 1.1%"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "Update : edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] d/DEBT dl/DEADLINE [t/TAG]… +"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "e.g. edit 2 n/James Lee e/jameslee@example.com"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "Sort : sort SORT_PARAMETER +"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "e.g. sort type +"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "OR sort amount +"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "OR sort deadline +"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "Filter : filter[t/TAG]… +"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "e.g. filter t/debtor +"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "OR filter n/Alex e/example.com tt/debt tamin/SGD 10.00 tdmax/31/12/2018"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "Nt (NextTransaction) : nt"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "Search : To find within current transactions list: search SUBSTRING [MORE_SUBSTRINGS] ... +"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "To find within past transactions list: search past SUBSTRING [MORE_SUBSTRINGS] ..."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "e.g. search Be +"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "OR search Be + Am +"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "OR search past Le +"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "OR search past Yu + F + Pot"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "Delete : Within current transactions list: delete INDEX +"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "Within past transactions list: delete past INDEX"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "e.g. delete 3 +"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "OR delete past 3"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "Select : Within current transactions list: select INDEX +"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "Within past transaction list: select past INDEX"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "e.g. select 2 +"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "OR select past 2"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "History : history"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "Analytics : analytics"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "Paid : paid INDEX +"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "e.g. paid 4"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "Switch : switch LIST_TYPE"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "e.g. switch curr +"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "OR switch past"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "Undo : undo"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "Redo : redo"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "Clear : clear"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "List : list"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "Help : help"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 190,
      "weiqing-nic": 23,
      "xiaoyeong": 8,
      "julianc269": 2,
      "-": 101,
      "Bellaaarh": 103
    }
  },
  {
    "path": "docs/team/aaditkamat.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "\u003d Aadit Kamat - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "\u003d\u003d PROJECT: DebtTracker"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "Debt Tracker is a CLI-based desktop application that helps users manage their finances. It keeps track of the financial"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "transactions the user undertakes. The primary target audience of this application is Small and Medium Entreprises (SMEs) in Singapore since"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "they typically face budget constraints and have to maintain a good credit score. However, this application can also be used by individuals"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "who may want to maintain a database of their personal transactions."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "* *Major enhancement*: added *a currency conversion utility* within the application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "** What it does: allows the user to convert amounts in different currencies to their respective amounts in the base currency, Singapore Dollars"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "** Justification: This feature provides users the flexibility to transact with people from different countries and saves them the hassle of using a 3rd party software to convert the amounts for each transaction."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "** Highlights: The implementation makes use of a free external foreign exchange API, provided by https://free.currencyconverterapi.com[Free Currency Converter API] that updates every hour according to the latest currency trends."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "               Since the API is JSON-based, the more time consuming portion of adding the command was using the right library to parse the information"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "               in an appropriate format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "** Code contributed: [https://github.com/CS2103-AY1819S1-W12-2/main/pull/51/files[Functional Code Block #1]] [https://github.com/CS2103-AY1819S1-W12-2/main/pull/36/files[Functional Code Block #2]] [https://github.com/CS2103-AY1819S1-W12-2/main/blob/master/src/test/java/seedu/address/logic/commands/ConvertCommandTest.java[Test code]]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "* *Minor enhancement*: added *an interest calculation feature*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "** What it does: allows the user to obtain the final amount that needs to be payed after calculating the interest on the principal sum of each"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                 transaction on a monthly basis, using either the simple or the compound interest scheme."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "** Justification: Providing an in-built feature to calculate interests is essential since loans are usually charged the market interest rate and the user"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                  needs to be aware of the final sum of the money owed or lent before the deadline."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "** Code contributed: [https://github.com/CS2103-AY1819S1-W12-2/main/pull/72/files[Functional Code]] [https://github.com/CS2103-AY1819S1-W12-2/main/blob/master/src/test/java/seedu/address/logic/commands/SortCommandTest.java[Test code]]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "*** Managed releases `v1.1` - `v1.3` (3 releases) on GitHub"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "*** Managed merging of PRs into the master branch as an administrator"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "** Testing:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "*** Modified tests to handle change from Person model to Transaction model within the application +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "[https://github.com/CS2103-AY1819S1-W12-2/main/pull/46[Pull Request #46]] +"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "*** Added the User Stories within the Developer Guide +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "[https://github.com/CS2103-AY1819S1-W12-2/main/pull/3[Pull Request #3]] +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "*** Updated the relevant sections of the User Guide to reflect the current state of the application +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "[https://github.com/CS2103-AY1819S1-W12-2/main/pull/3[Pull Request #3]] +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "*** PRs reviewed:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "**** [https://github.com/CS2103-AY1819S1-W12-2/main/pull/34/[Pull Request #34]] +"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "**** [https://github.com/CS2103-AY1819S1-W12-2/main/pull/61/[Pull Request #61]] +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "**** [https://github.com/CS2103-AY1819S1-W12-2/main/pull/68/[Pull Request #68]] +"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "**** [https://github.com/CS2103-AY1819S1-W12-2/main/pull/88/[Pull Request #88]] +"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "*** Issues created:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "**** [https://github.com/CS2103-AY1819S1-W12-2/main/issues/94[Issue #94]] +"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "**** [https://github.com/CS2103-AY1819S1-W12-2/main/issues/93[Issue #93]] +"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "**** [https://github.com/CS2103-AY1819S1-W12-2/main/issues/90[Issue #90]] +"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "**** [https://github.com/CS2103-AY1819S1-W12-2/main/issues/74[Issue #74]] +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "*** Integrated Travis and AppVeyor into the project"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "*** Added Coveralls to check the test coverage for the application"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "|Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "[https://github.com/CS2103-AY1819S1-W12-2/main/commit/726e9b1bf4b8f2138b63e63ca6788ff805dc824e?short_path\u003dd80058c#diff-d80058c033b9f127ec727c18cc84ce4d[Pull Request#43]] +"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "[https://github.com/CS2103-AY1819S1-W12-2/main/commit/06243a33fee9c981b1367dfdeb1df0c95bdb0672?short_path\u003dd80058c#diff-d80058c033b9f127ec727c18cc84ce4d[Pull Request #75]] +"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "[https://github.com/CS2103-AY1819S1-W12-2/main/commit/63fdda59f6104aec9cac6ff4b762add500a2fd35?short_path\u003dd80058c#diff-d80058c033b9f127ec727c18cc84ce4d[Pull Request #95]] +"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "|Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "[https://github.com/CS2103-AY1819S1-W12-2/main/commit/5d42ebc0d2396551b96b92f769114ac8482faca3#diff-d23c8091515dc18149f4f2e759e1e288[Pull Request #3]] +"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "[https://github.com/CS2103-AY1819S1-W12-2/main/commit/96470f5e35192a5450fac8d7a805c05736d1a7d4?short_path\u003dd23c809#diff-d23c8091515dc18149f4f2e759e1e288[Pull Request #9]] +"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "[https://github.com/CS2103-AY1819S1-W12-2/main/commit/726e9b1bf4b8f2138b63e63ca6788ff805dc824e#diff-d23c8091515dc18149f4f2e759e1e288[Pull Request #43]] +"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 91
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.model.FinancialDatabase;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.model.ReadOnlyFinancialDatabase;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.storage.FinancialDatabaseStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.storage.XmlFinancialDatabaseStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 3, 0, true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs userPrefs;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing DebtTracker ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        FinancialDatabaseStorage addressBookStorage \u003d new XmlFinancialDatabaseStorage("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                userPrefs.getDebtTrackerFilePath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic, config, userPrefs);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        initEventsCenter();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        Optional\u003cReadOnlyFinancialDatabase\u003e financialDatabaseOptional;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        ReadOnlyFinancialDatabase initialData;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            financialDatabaseOptional \u003d storage.readFinancialDatabase();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            if (!financialDatabaseOptional.isPresent()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample FinancialDatabase\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            initialData \u003d financialDatabaseOptional.orElseGet(SampleDataUtil::getSampleFinancialDatabase);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty FinancialDatabase\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            initialData \u003d new FinancialDatabase();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty FinancialDatabase\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            initialData \u003d new FinancialDatabase();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initEventsCenter() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        logger.info(\"Starting DebtTracker \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Debt Tracker ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.stop();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        stop();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 9,
      "julianc269": 11,
      "-": 187
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/CalendarManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "julianc269"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import java.security.GeneralSecurityException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import java.util.concurrent.ExecutionException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import java.util.concurrent.ExecutorService;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import java.util.concurrent.Executors;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import com.google.api.client.auth.oauth2.Credential;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import com.google.api.client.extensions.java6.auth.oauth2.AuthorizationCodeInstalledApp;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import com.google.api.client.googleapis.batch.BatchRequest;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import com.google.api.client.googleapis.batch.json.JsonBatchCallback;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import com.google.api.client.googleapis.json.GoogleJsonError;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import com.google.api.client.http.HttpHeaders;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import com.google.api.client.http.javanet.NetHttpTransport;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import com.google.api.client.json.jackson2.JacksonFactory;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import com.google.api.client.util.DateTime;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import com.google.api.client.util.store.FileDataStoreFactory;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import com.google.api.services.calendar.Calendar;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import com.google.api.services.calendar.CalendarScopes;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import com.google.api.services.calendar.model.AclRule;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import com.google.api.services.calendar.model.CalendarList;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import com.google.api.services.calendar.model.CalendarListEntry;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import com.google.api.services.calendar.model.Event;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import com.google.api.services.calendar.model.EventDateTime;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import com.google.api.services.calendar.model.Events;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.commons.events.ui.RefreshCalendarEvent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.model.transaction.Deadline;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.model.transaction.Type;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "julianc269"
        },
        "content": " * Manages user authorization of the Google Calendar service and synchronization of transaction data"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "julianc269"
        },
        "content": " * between the DebtTracker application and Google Calendar."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": " */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "julianc269"
        },
        "content": "public class CalendarManager extends ComponentManager {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(CalendarManager.class);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    private static final String APPLICATION_NAME \u003d \"Debt Tracker\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private static final JacksonFactory JSON_FACTORY \u003d JacksonFactory.getDefaultInstance();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    private static final String TOKENS_DIRECTORY_PATH \u003d \"tokens\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    private static final String CALENDAR_TITLE \u003d \"Debt Tracker\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    private static final List\u003cString\u003e SCOPES \u003d Collections.singletonList(CalendarScopes.CALENDAR);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    private static final String CREDENTIALS_FILE_PATH \u003d \"/creds/creds.json\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private static CalendarManager instance;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private Calendar service;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private String calendarId;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    private ExecutorService executor;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    private CalendarManager() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            final NetHttpTransport httpTransport \u003d GoogleNetHttpTransport.newTrustedTransport();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            if (CalendarManager.getSavedCredentials(httpTransport) !\u003d null) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                this.service \u003d new Calendar.Builder(httpTransport, JSON_FACTORY,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                        CalendarManager.getSavedCredentials(httpTransport))"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                        .setApplicationName(APPLICATION_NAME)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                initializeCalendar();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        } catch (IOException | GeneralSecurityException ex) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            logger.info(\"Error initializing calendar manager\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        executor \u003d Executors.newSingleThreadExecutor();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public static CalendarManager getInstance() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        if (instance \u003d\u003d null) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            instance \u003d new CalendarManager();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        return instance;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * Initializes the calendar by retrieving and setting the calendar ID"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * @return Returns true if successful, or if calendar is already initialized. Returns false otherwise."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public boolean initializeCalendar() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        if (calendarId !\u003d null) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        if (service \u003d\u003d null) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            logger.info(\"Error initializing calendar: user not logged in\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            String calendarId \u003d getCalendarIdBySummary(CALENDAR_TITLE);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            if (calendarId \u003d\u003d null) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                createNewCalendar();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                setCalendarAccess();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                this.calendarId \u003d calendarId;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            logger.info(\"Calendar initialized\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            logger.info(\"Error initializing calendar: connection error\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * Creates an authorized Credential object."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * @param httpTransport The network HTTP Transport."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * @return An authorized Credential object."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * @throws IOException If the credentials.json file cannot be found."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private static Credential getCredentials(final NetHttpTransport httpTransport) throws IOException {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        GoogleAuthorizationCodeFlow flow \u003d buildFlow(httpTransport);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        return new AuthorizationCodeInstalledApp(flow, new LocalServerReceiver()).authorize(\"user\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private static Credential getSavedCredentials(final NetHttpTransport httpTransport) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            GoogleAuthorizationCodeFlow flow \u003d buildFlow(httpTransport);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            Credential credential \u003d flow.loadCredential(\"user\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            if (credential !\u003d null \u0026\u0026 (credential.getRefreshToken() !\u003d null"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                    || credential.getExpiresInSeconds() \u003d\u003d null"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                    || credential.getExpiresInSeconds() \u003e 60)) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                return credential;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        } catch (IOException | NullPointerException ex) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            logger.info(\"Error getting user credentials\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * Builds the Google OAuth 2.0 authorization code flow using the client secret"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * found in {@value #CREDENTIALS_FILE_PATH}."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * @param httpTransport The network HTTP Transport."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * @return A GoogleAuthorizationCodeFlow object"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * @throws IOException if the the file containing the client secrets cannot be found."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private static GoogleAuthorizationCodeFlow buildFlow(final NetHttpTransport httpTransport) throws IOException {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        InputStream in \u003d CalendarManager.class.getResourceAsStream(CREDENTIALS_FILE_PATH);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        GoogleClientSecrets clientSecrets \u003d GoogleClientSecrets.load(JSON_FACTORY, new InputStreamReader(in));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return new GoogleAuthorizationCodeFlow.Builder("
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                httpTransport, JSON_FACTORY, clientSecrets, SCOPES)"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                .setDataStoreFactory(new FileDataStoreFactory(new java.io.File(TOKENS_DIRECTORY_PATH)))"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                .setAccessType(\"offline\")"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void setReminder(int timePeriod, Transaction transactionToSetReminder) throws IOException {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        List\u003cEvent\u003e calendarEvents \u003d getCalendarEvents();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * Starts the calendar login process on a new thread and returns true if the user has not already logged in,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * returns false otherwise."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public boolean calendarLogin(Model model) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        if (service \u003d\u003d null) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            Thread t \u003d new Thread(new LoginRunnable(model));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            t.start();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * Logs the user out by removing the user\u0027s stored credentials."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * Returns true if the logout is successful, returns false otherwise if the user has already been logged out."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public boolean calendarLogout() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            Files.deleteIfExists(Paths.get(\"tokens/StoredCredential\"));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            this.service \u003d null;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            this.calendarId \u003d null;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public boolean isAuthenticated() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        return service !\u003d null;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public Calendar getCalendarService() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        return service;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * Creates and inserts a new calendar in Singapore Time for the debt tracker application"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * in the authorized user\u0027s account"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    private void createNewCalendar() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        if (service !\u003d null) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            com.google.api.services.calendar.model.Calendar cal \u003d new com.google.api.services.calendar.model.Calendar();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            cal.setSummary(\"Debt Tracker\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            cal.setTimeZone(\"Asia/Singapore\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                this.calendarId \u003d service.calendars().insert(cal).execute().getId();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            } catch (IOException ex) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                logger.info(ex.getMessage());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    private void setCalendarAccess() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        AclRule rule \u003d new AclRule();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        AclRule.Scope scope \u003d new AclRule.Scope();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        scope.setType(\"default\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        rule.setScope(scope).setRole(\"reader\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                service.acl().insert(this.calendarId, rule).execute();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            } catch (IOException ex) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                logger.info(ex.getMessage());"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        });"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public String getCalendarId() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        return this.calendarId;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * Represents the number of additions and deletions resulting from a calendar sync event"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public class SyncResult {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        final int additions;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        final int deletions;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        SyncResult(int additions, int deletions) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            this.additions \u003d additions;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            this.deletions \u003d deletions;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            return this.additions + \" additions, \" + this.deletions + \" deletions.\";"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * Synchronizes the transactions between the calendar and debt tracker application"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * @param model The in-memory model of the debt tracker data"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * @return a SyncResult object representing the number of additions and deletions made to the calendar"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     */"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    private SyncResult syncCalendarHelper(Model model) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            List\u003cEvent\u003e eventList \u003d getCalendarEvents();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            List\u003cString\u003e invalidEvents \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            Set\u003cCalendarTransaction\u003e calendarTransactions \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            for (Event event : eventList) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                String name \u003d event.getSummary();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                String description \u003d event.getDescription();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                EventDateTime start \u003d event.getStart();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                EventDateTime end \u003d event.getEnd();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                boolean validEvent \u003d false;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                if (description !\u003d null) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                    String[] details \u003d description.split(\"\\\\r?\\\\n\");"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                    Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                    if (start.equals(end) \u0026\u0026 (details.length \u003d\u003d 5 || details.length \u003d\u003d 6)"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                            \u0026\u0026 Name.isValidName(name)"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                            \u0026\u0026 Phone.isValidPhone(details[0]) \u0026\u0026 Address.isValidAddress(details[1])"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                            \u0026\u0026 Email.isValidEmail(details[2]) \u0026\u0026 Type.isValidType(details[3])"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                            \u0026\u0026 Amount.isValidAmount(details[4])) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                        if (details.length \u003d\u003d 6) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                            String[] tagStrings \u003d details[5].split(\";\");"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                            if (Arrays.stream(tagStrings).allMatch(s -\u003e Tag.isValidTagName(s))) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                                validEvent \u003d true;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                                for (String tagString: tagStrings) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                                    tags.add(new Tag(tagString));"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                            validEvent \u003d true;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                    if (validEvent) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                            DateFormat sourceFormat \u003d new SimpleDateFormat(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                            SimpleDateFormat targetFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                            String date \u003d targetFormat.format(sourceFormat.parse(end.getDate().toString()));"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                            calendarTransactions.add("
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                                    new CalendarTransaction(new Transaction(new Type(details[3]),"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                                            new Amount(details[4]), new Deadline(date), new Person(new Name(name),"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                                            new Phone(details[0]), new Email(details[2]), new Address(details[1]),"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                                            tags)), event.getId()));"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                        } catch (ParseException ex) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                            validEvent \u003d false;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                    if (!validEvent) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                        invalidEvents.add(event.getId());"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            ObservableList\u003cTransaction\u003e transactions \u003d model.getFinancialDatabase().getTransactionList();"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            Set\u003cCalendarTransaction\u003e appTransactions \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            for (Transaction t : transactions) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                appTransactions.add(new CalendarTransaction(t));"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            Set\u003cCalendarTransaction\u003e toRemove \u003d new HashSet\u003c\u003e(calendarTransactions);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            toRemove.removeAll(appTransactions);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            Set\u003cCalendarTransaction\u003e toAdd \u003d new HashSet\u003c\u003e(appTransactions);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            toAdd.removeAll(calendarTransactions);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            executeSyncBatchRequest(toAdd, toRemove, invalidEvents);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            return new SyncResult(toAdd.size(), toRemove.size() + invalidEvents.size());"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            logger.info(\"unable to sync calendar\");"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * Synchronizes the transactions between the calendar and debt tracker application."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * Runs on a common single-thread executor to prevent concurrent synchronizations"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * @param model The in-memory model of the debt tracker data"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * @return a SyncResult object representing the number of additions and deletions made to the calendar"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     */"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public SyncResult syncCalendar(Model model) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            if (service !\u003d null) {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                SyncResult result \u003d executor.submit(() -\u003e syncCalendarHelper(model)).get();"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                return result;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                logger.info(\"calendar not logged in\");"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        } catch (InterruptedException | ExecutionException ex) {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * Synchronizes the transactions between the calendar and debt tracker application."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * Runs on a separate thread to avoid blocking UI, in a common single-thread executor"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * to prevent concurrent synchronizations"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     */"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public void syncCalendarAsync(Model model) {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        if (service !\u003d null) {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            executor.submit(() -\u003e"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                    syncCalendarHelper(model)"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            );"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            logger.info(\"calendar not logged in\");"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * Executes a batch request to the calendar service for synchronizing transactions"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * @param toAdd a set of transactions to add to the calendar"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * @param toRemove a set of transactions to be removed from the calendar"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * @param invalidEvents a list of invalid events to be removed"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     */"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    private void executeSyncBatchRequest(Set\u003cCalendarTransaction\u003e toAdd, Set\u003cCalendarTransaction\u003e toRemove,"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                                         List\u003cString\u003e invalidEvents) throws IOException {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        BatchRequest b \u003d service.batch();"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        for (CalendarTransaction add : toAdd) {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            Event e \u003d new Event();"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            e.setSummary(add.transaction.getPerson().getName().toString());"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            String description \u003d add.transaction.getPerson().getPhone().value + \"\\n\""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                    + add.transaction.getPerson().getAddress().value + \"\\n\""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                    + add.transaction.getPerson().getEmail().value + \"\\n\""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                    + add.transaction.getType().value + \"\\n\""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                    + add.transaction.getAmount();"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            if (!add.transaction.getPerson().getTags().isEmpty()) {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                Set\u003cString\u003e tagStrings \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                for (Tag tag : add.transaction.getPerson().getTags()) {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                    tagStrings.add(tag.tagName);"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                }"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                description +\u003d \"\\n\" + String.join(\";\", tagStrings);"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            }"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            e.setDescription(description);"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            DateFormat sourceFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            SimpleDateFormat targetFormat \u003d new SimpleDateFormat(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            String dateString \u003d add.transaction.getDeadline().value;"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                String date \u003d targetFormat.format(sourceFormat.parse(dateString));"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                EventDateTime start \u003d new EventDateTime().setDate(new DateTime(date));"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                EventDateTime end \u003d new EventDateTime().setDate(new DateTime(date));"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                e.setStart(start);"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                e.setEnd(end);"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                e.setReminders(new Event.Reminders().setUseDefault(true));"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                service.events().insert(calendarId, e).queue(b, new JsonBatchCallback\u003c\u003e() {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                    @Override"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                    public void onFailure(GoogleJsonError e, HttpHeaders responseHeaders) {"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                        logger.info(\"Failed to add event to calendar\");"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                    @Override"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                    public void onSuccess(Event event, HttpHeaders responseHeaders) {"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                        logger.info(\"Added event \" + event.getId() + \" successfully\");"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                });"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            } catch (ParseException ex) {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                System.out.println(ex.getMessage());"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            }"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        }"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        for (CalendarTransaction remove : toRemove) {"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            service.events().delete(calendarId, remove.eventId).queue(b, new JsonBatchCallback\u003c\u003e() {"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                @Override"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                public void onFailure(GoogleJsonError e, HttpHeaders responseHeaders) {"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                    logger.info(\"Failed to remove event from calendar\");"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                }"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                @Override"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                public void onSuccess(Void v, HttpHeaders responseHeaders) {"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                    logger.info(\"Removed event \" + remove.eventId + \" successfully\");"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                }"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            });"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        }"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        for (String invalidEventId : invalidEvents) {"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            service.events().delete(calendarId, invalidEventId).queue(b, new JsonBatchCallback\u003c\u003e() {"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                @Override"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                public void onFailure(GoogleJsonError e, HttpHeaders responseHeaders) {"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                    logger.info(\"Failed to remove event from calendar\");"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                }"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                @Override"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                public void onSuccess(Void v, HttpHeaders responseHeaders) {"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                    logger.info(\"Removed event \" + invalidEventId + \" successfully\");"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                }"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            });"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        }"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        if (b.size() \u003e 0) {"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            b.execute();"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            raise(new RefreshCalendarEvent(calendarId));"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        }"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    private List\u003cEvent\u003e getCalendarEvents() throws IOException {"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        List\u003cEvent\u003e eventList \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        String pageToken \u003d null;"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            Events events \u003d service.events().list(calendarId).setMaxResults(2500).setPageToken(pageToken).execute();"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            eventList.addAll(events.getItems());"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            pageToken \u003d events.getNextPageToken();"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        } while (pageToken !\u003d null);"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        return eventList;"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    private String getCalendarIdBySummary(String summary) throws IOException {"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        if (service \u003d\u003d null) {"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        }"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        String pageToken \u003d null;"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            CalendarList calendarList \u003d service.calendarList().list().setPageToken(pageToken).execute();"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            List\u003cCalendarListEntry\u003e items \u003d calendarList.getItems();"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            for (CalendarListEntry calendarListEntry : items) {"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                if (calendarListEntry.getSummary().equals(summary)) {"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                    return calendarListEntry.getId();"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                }"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            }"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            pageToken \u003d calendarList.getNextPageToken();"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        } while (pageToken !\u003d null);"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * The login process that is to be executed in a new thread."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    private class LoginRunnable implements Runnable {"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        private Model model;"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        LoginRunnable(Model model) {"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            this.model \u003d model;"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        }"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        public void run() {"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                final NetHttpTransport httpTransport \u003d GoogleNetHttpTransport.newTrustedTransport();"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                CalendarManager.getInstance().service \u003d new Calendar.Builder(httpTransport, JSON_FACTORY,"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                        CalendarManager.getCredentials(httpTransport))"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                        .setApplicationName(APPLICATION_NAME)"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                String calendarId \u003d getCalendarIdBySummary(\"Debt Tracker\");"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                if (calendarId \u003d\u003d null) {"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                    createNewCalendar();"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                    setCalendarAccess();"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                    CalendarManager.getInstance().calendarId \u003d calendarId;"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                }"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                syncCalendarAsync(model);"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                raise(new NewResultAvailableEvent(\"Logged in successfully!\"));"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            } catch (IOException | GeneralSecurityException | NullPointerException ex) {"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                logger.info(\"Error getting user credentials\");"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                raise(new NewResultAvailableEvent(\"Login unsuccessful!\"));"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            }"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        }"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * Represents a transaction event in the calendar"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     */"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    private class CalendarTransaction {"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        private String eventId;"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        private Transaction transaction;"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        CalendarTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            this.transaction \u003d transaction;"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        }"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        CalendarTransaction(Transaction transaction, String eventId) {"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            this.transaction \u003d transaction;"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            this.eventId \u003d eventId;"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        }"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        public int hashCode() {"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            return transaction.hashCode();"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        }"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            if (!(other instanceof CalendarTransaction)) {"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            }"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            CalendarTransaction calTransaction \u003d (CalendarTransaction) other;"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            return other \u003d\u003d this || this.transaction.equals(calTransaction.transaction);"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        }"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            return (eventId \u003d\u003d null ? \"No EventId \" : eventId) + transaction.toString();"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        }"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "julianc269"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 55,
      "julianc269": 531
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/ComponentManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Base class for *Manager classes"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Registers the class\u0027 event handlers in eventsCenter"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class ComponentManager {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    protected EventsCenter eventsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Uses default {@link EventsCenter}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public ComponentManager() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        this(EventsCenter.getInstance());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public ComponentManager(EventsCenter eventsCenter) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.eventsCenter \u003d eventsCenter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        //this to refer to the object itself which is anything  that extends componentmanager"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        eventsCenter.registerHandler(this);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void raise(BaseEvent event) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        eventsCenter.post(event);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiqing-nic": 1,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Config.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private String appTitle \u003d \"Debt Tracker\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAppTitle() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return appTitle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAppTitle(String appTitle) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.appTitle \u003d appTitle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(appTitle, o.appTitle)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"App title : \" + appTitle);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nCurrent log level : \" + logLevel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 1,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOG_FILE \u003d \"addressbook.log\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the LOGGER with the same name"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "     * Creates a LOGGER with the given name."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code LOGGER}. \u003cbr\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "     * Remove all the handlers from {@code LOGGER}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code LOGGER}. \u003cbr\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "            logger.warning(\"Error adding file handler for LOGGER.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Decorates the given string to create a log message suitable for logging event handling methods."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEventHandlingLogMessage(BaseEvent e, String message) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"---[Event handled][\" + e + \"]\" + message;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getEventHandlingLogMessage(BaseEvent, String)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEventHandlingLogMessage(BaseEvent e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return getEventHandlingLogMessage(e, \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiqing-nic": 6,
      "-": 122
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": " * Represents error messages displayed to the user"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static final String MESSAGE_INVALID_INTEREST_RATE \u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            \"The interest value must be a real number rounded to two places\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static final String MESSAGE_INVALID_TRANSACTION_DISPLAYED_INDEX \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            \"The transaction index provided is invalid\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The transaction index provided is invalid\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static final String MESSAGE_TRANSACTIONS_LISTED_OVERVIEW \u003d \"%1$d transactions listed!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public static final String MESSAGE_ALL_TRANSACTIONS_LISTED_OVERVIEW \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            \"%1$d current transactions and %2$d past transactions listed!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "            \"The transaction deadline must be a valid date in the future in the DD/MM/YYYY format\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public static final String MESSAGE_INVALID_PREFIX_VALUE \u003d \"Prefix %1$s should not have any values\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public static final String MESSAGE_KEYWORDS_NONEMPTY \u003d \"None of the specified keywords should be empty\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public static final String MESSAGE_INVALID_PREFIX_COMBINATION \u003d \"Prefix %1$s and %2$s cannot be used together\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 5,
      "xiaoyeong": 3,
      "julianc269": 6,
      "-": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Version.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                versionMatcher.group(4) !\u003d null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 6,
      "-": 107
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/FinancialDatabaseChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.ReadOnlyFinancialDatabase;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "/** Indicates the FinancialDatabase in the model has changed*/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "public class FinancialDatabaseChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public final ReadOnlyFinancialDatabase data;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public FinancialDatabaseChangedEvent(ReadOnlyFinancialDatabase data) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return \"Number of transactions: \" + data.getTransactionList().size();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 6,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/JumpToListRequestEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Indicates a request to jump to the list of persons"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class JumpToListRequestEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public final int targetIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    public final String type;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public JumpToListRequestEvent(Index targetIndex) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        this.targetIndex \u003d targetIndex.getZeroBased();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        this.type \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    public JumpToListRequestEvent(String type, Index targetIndex) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex.getZeroBased();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 22,
      "Bellaaarh": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/RefreshCalendarEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "julianc269"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "julianc269"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "julianc269"
        },
        "content": " * Represents a selection change in the Person List Panel"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "julianc269"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "julianc269"
        },
        "content": "public class RefreshCalendarEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    private final String calendarId;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public RefreshCalendarEvent(String calendarId) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        this.calendarId \u003d calendarId;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public String getCalendarId() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        return calendarId;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "julianc269"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "julianc269": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/ShowCalendarEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "julianc269"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "julianc269"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "julianc269"
        },
        "content": " * Represents a selection change in the Person List Panel"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "julianc269"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "julianc269"
        },
        "content": "public class ShowCalendarEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    private final String calendarId;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public ShowCalendarEvent(String calendarId) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        this.calendarId \u003d calendarId;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public String getCalendarId() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        return calendarId;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "julianc269"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "julianc269": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/SwitchTabsEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": " *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "public class SwitchTabsEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    public final int tabIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    public SwitchTabsEvent(int tabIndex) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        this.tabIndex \u003d tabIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Bellaaarh": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/TransactionPanelSelectionChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a selection change in the Person List Panel"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "public class TransactionPanelSelectionChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private final Transaction newSelection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public TransactionPanelSelectionChangedEvent(Transaction newSelection) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.newSelection \u003d newSelection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public Transaction getNewSelection() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return newSelection;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 5,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code substring}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     *   Ignores case, list of substrings are separated by a semi-colon"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     *       containsSubstringIgnoreCase(\"ABc;def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     *       containsSubstringIgnoreCase(\"ABc;def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * @param substring cannot be null, cannot be empty"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public static boolean containsSubstringIgnoreCase(String sentence, String substring) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        requireNonNull(substring);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        String preppedWord \u003d substring.trim();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Substring parameter cannot be empty\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\";\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                .anyMatch(p -\u003e p.toLowerCase().contains(preppedWord.toLowerCase()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "julianc269": 24,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of transactions */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    ObservableList\u003cseedu.address.model.transaction.Transaction\u003e getFilteredTransactionList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "     * Does the same thing as getFilteredTransactionList() but for pastTransactions."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    ObservableList\u003cseedu.address.model.transaction.Transaction\u003e getFilteredPastTransactionList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    ListElementPointer getHistorySnapshot();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 2,
      "julianc269": 1,
      "-": 25,
      "Bellaaarh": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.logic.parser.FinancialDatabaseParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager extends ComponentManager implements Logic {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private final FinancialDatabaseParser financialDatabaseParser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        financialDatabaseParser \u003d new FinancialDatabaseParser();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            Command command \u003d financialDatabaseParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            return command.execute(model, history);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public ObservableList\u003cseedu.address.model.transaction.Transaction\u003e getFilteredTransactionList() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return model.getFilteredTransactionList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    public ObservableList\u003cTransaction\u003e getFilteredPastTransactionList() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        return model.getFilteredPastTransactionList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer getHistorySnapshot() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ListElementPointer(history.getHistory());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 6,
      "-": 48,
      "Bellaaarh": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TRANSACTION_AMOUNT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TRANSACTION_DEADLINE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TRANSACTION_TYPE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": " * Adds a transaction to the database."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a transaction to the financial database.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            + PREFIX_TRANSACTION_TYPE + \"TRANSACTION_TYPE \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            + PREFIX_TRANSACTION_AMOUNT + \"TRANSACTION_AMOUNT \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            + PREFIX_TRANSACTION_DEADLINE + \"TRANSACTION_DEADLINE \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            + PREFIX_TRANSACTION_TYPE + \"Loan \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            + PREFIX_TRANSACTION_AMOUNT + \"SGD 45.20 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            + PREFIX_TRANSACTION_DEADLINE + \"18/12/2018 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New transaction added: %1$s\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TRANSACTION \u003d \"This transaction already exists in the database\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private final Transaction toAdd;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Creates an AddCommand to add the specified {@code transaction}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public AddCommand(Transaction transaction) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        requireNonNull(transaction);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        toAdd \u003d transaction;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        if (model.hasTransaction(toAdd)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TRANSACTION);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        model.addTransaction(toAdd);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        model.commitFinancialDatabase();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 24,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AnalyticsCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "/* @@author xiaoyeong */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "import seedu.address.model.transaction.Deadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": " * Analyse the your financial status"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "public class AnalyticsCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"analytics\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Analyse the your financial status and generate \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "            + \"your financial status to view.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "            + \"It will either generate your financial status base on all the list,\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "            + \"or generate to a certain date, base on the date you input.\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "            + \"eg analytics or analytics dd/mm/yyyy\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Financial status : SGD %.2f\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    private final Deadline deadline;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    public AnalyticsCommand() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        this.deadline \u003d null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    public AnalyticsCommand(Deadline deadline) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        double totalSum;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        totalSum \u003d 0.0;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        List\u003cTransaction\u003e transactionList \u003d model.getFilteredTransactionList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        if (deadline !\u003d null \u0026\u0026 !Deadline.matchesDateFormat(deadline.toString())) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        for (int i \u003d 0; i \u003c transactionList.size(); i++) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "            Transaction t \u003d transactionList.get(i);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "            if (deadline \u003d\u003d null || deadline.compareTo(t.getDeadline()) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "                Amount currentAmount \u003d t.getAmount();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "                if (currentAmount !\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "                    if (t.getType().toString().compareTo(\"debt\") \u003d\u003d 0) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "                        totalSum -\u003d currentAmount.getValue();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "                    } else if ((t.getType().toString().compareTo(\"loan\") \u003d\u003d 0)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "                        totalSum +\u003d currentAmount.getValue();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        model.commitFinancialDatabase();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, totalSum));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        if (!(other instanceof AnalyticsCommand)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        AnalyticsCommand analyticsCommand \u003d (AnalyticsCommand) other;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        return deadline.equals(analyticsCommand.deadline);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "xiaoyeong": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CalendarCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "julianc269"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.commons.core.CalendarManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.commons.events.ui.ShowCalendarEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "julianc269"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "julianc269"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "julianc269"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "julianc269"
        },
        "content": "public class CalendarCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"calendar\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static final String SHOW_ACTION \u003d \"show\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static final String LOGIN_ACTION \u003d \"login\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static final String LOGOUT_ACTION \u003d \"logout\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static final String SYNC_ACTION \u003d \"sync\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Displays a calendar showing the user\u0027s transactions \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            + \"and their deadlines \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            + \"Examples: \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            + COMMAND_WORD + \" \" + SHOW_ACTION + \"\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            + COMMAND_WORD + \" \" + LOGIN_ACTION + \" \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            + COMMAND_WORD + \" \" + LOGOUT_ACTION + \"\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            + COMMAND_WORD + \" \" + SYNC_ACTION + \"\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public static final String MESSAGE_SYNC_SUCCESS \u003d \"Calendar Synced. %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public static final String MESSAGE_SYNC_FAILURE \u003d \"Failed to sync calendar. Please check your internet connection.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public static final String MESSAGE_ACCESS_FAILURE \u003d \"Error accessing calendar. \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                        + \"Please check your internet connection.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    private final String action;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public CalendarCommand(String action) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        this.action \u003d action;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        CalendarManager calendarManager \u003d CalendarManager.getInstance();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        switch (action) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        case LOGIN_ACTION:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            if (calendarManager.calendarLogin(model)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                return new CommandResult(\"\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                return new CommandResult(\"Already logged in.\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        case LOGOUT_ACTION:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            if (!calendarManager.isAuthenticated()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                return new CommandResult(\"Not logged in.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                if (CalendarManager.getInstance().calendarLogout()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                    return new CommandResult(\"Logged out\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                    return new CommandResult(\"Failed to logout\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        case SHOW_ACTION:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            if (calendarManager.isAuthenticated()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                if (!calendarManager.initializeCalendar()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                    return new CommandResult(MESSAGE_ACCESS_FAILURE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                EventsCenter.getInstance()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                        .post(new ShowCalendarEvent(CalendarManager.getInstance().getCalendarId()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                return new CommandResult(\"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                calendarManager.calendarLogin(model);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                return new CommandResult(\"Not logged in. \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                        + \"Please login now or enter the following command to login:\\ncalendar login\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        case SYNC_ACTION:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            if (calendarManager.isAuthenticated()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                if (!calendarManager.initializeCalendar()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                    return new CommandResult(MESSAGE_ACCESS_FAILURE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                CalendarManager.SyncResult result \u003d calendarManager.syncCalendar(model);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                if (result \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                    return new CommandResult(String.format(MESSAGE_SYNC_FAILURE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                    return new CommandResult(String.format(MESSAGE_SYNC_SUCCESS, result));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                return new CommandResult(\"Not logged in. \""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                        + \"Please enter the following command to login:\\ncalendar login\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            return new CommandResult(\"\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                || (other instanceof CalendarCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                \u0026\u0026 action.equals(((CalendarCommand) other).action));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "julianc269"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 21,
      "julianc269": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.model.FinancialDatabase;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Debt Tracker has been cleared!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        model.resetData(new FinancialDatabase());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        model.commitFinancialDatabase();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 1,
      "julianc269": 4,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ConvertCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": " * Converts multiple amounts in different currencies to the base currency."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "public class ConvertCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"convert\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            + \": Converts given amounts from their respective foreign currencies to Singapore Dollars\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Amounts converted in all transactions!!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        List\u003cTransaction\u003e lastShownList \u003d model.getFilteredTransactionList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            for (Transaction transactionToEdit : lastShownList) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                Amount convertedAmount \u003d Amount.convertCurrency(transactionToEdit.getAmount());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                Transaction editedTransaction \u003d Transaction.copy(transactionToEdit);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                editedTransaction.setAmount(convertedAmount);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                model.updateTransaction(transactionToEdit, editedTransaction);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            throw new CommandException(\"Error while reading values from the Currency Conversion API.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        model.commitFinancialDatabase();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 44,
      "Bellaaarh": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": " * Deletes a transaction identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            + \": Deletes the transaction identified by the index number used in either the current \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            + \"or past transaction list. This transaction is not added anywhere.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            + \"OR: \" + COMMAND_WORD + \" past \" + \"1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static final String MESSAGE_DELETE_TRANSACTION_SUCCESS \u003d \"Deleted Transaction: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    private final String whichList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        this.whichList \u003d \"\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    public DeleteCommand(String whichList, Index targetIndex) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        this.whichList \u003d whichList;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        List\u003cTransaction\u003e lastShownList;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        if (\"past\".equals(whichList)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            lastShownList \u003d model.getFilteredPastTransactionList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            Transaction transactionToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            model.deletePastTransaction(transactionToDelete);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            model.commitFinancialDatabase();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_TRANSACTION_SUCCESS, transactionToDelete));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            lastShownList \u003d model.getFilteredTransactionList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            Transaction transactionToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            model.deleteTransaction(transactionToDelete);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            model.commitFinancialDatabase();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_TRANSACTION_SUCCESS, transactionToDelete));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 7,
      "julianc269": 1,
      "-": 47,
      "Bellaaarh": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TRANSACTION_AMOUNT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TRANSACTION_DEADLINE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TRANSACTION_TYPE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TRANSACTIONS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.Deadline;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.Type;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": " * Edits the details of an existing transaction in the financial database."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the transaction identified \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            + \"by the index number used in the displayed transaction list. \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            + \"[\" + PREFIX_TRANSACTION_TYPE + \"NAME] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            + \"[\" + PREFIX_TRANSACTION_AMOUNT + \"AMOUNT] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            + \"[\" + PREFIX_TRANSACTION_DEADLINE + \"DEADLINE] \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static final String MESSAGE_EDIT_TRANSACTION_SUCCESS \u003d \"Edited transaction: %1$s\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TRANSACTION \u003d \"This transaction already exists in the address book.\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private final EditTransactionDescriptor editTransactionDescriptor;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * @param index of the transaction in the filtered transaction list to edit"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * @param editTransactionDescriptor details to edit the transaction with"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public EditCommand(Index index, EditTransactionDescriptor editTransactionDescriptor) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        requireNonNull(editTransactionDescriptor);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        this.editTransactionDescriptor \u003d new EditTransactionDescriptor(editTransactionDescriptor);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        List\u003cTransaction\u003e lastShownList \u003d model.getFilteredTransactionList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TRANSACTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Transaction transactionToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Transaction editedTransaction \u003d createEditedTransaction(transactionToEdit,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                editTransactionDescriptor);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        if (!transactionToEdit.equals(editedTransaction) \u0026\u0026 model.hasTransaction(editedTransaction)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TRANSACTION);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        model.updateTransaction(transactionToEdit, editedTransaction);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        model.updateFilteredTransactionList(PREDICATE_SHOW_ALL_TRANSACTIONS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        model.commitFinancialDatabase();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_TRANSACTION_SUCCESS, editedTransaction));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Creates and returns a {@code transaction} with the details of {@code transactionToEdit}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * edited with {@code editTransactionDescriptor}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private static Transaction createEditedTransaction(Transaction transactionToEdit,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                                                       EditTransactionDescriptor editTransactionDescriptor) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        requireNonNull(transactionToEdit);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Type updatedType \u003d editTransactionDescriptor.getType().orElse(transactionToEdit.getType());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Amount updatedAmount \u003d editTransactionDescriptor.getAmount().orElse(transactionToEdit.getAmount());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Deadline updatedDeadline \u003d editTransactionDescriptor.getDeadline().orElse(transactionToEdit.getDeadline());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Name updatedName \u003d editTransactionDescriptor.getName().orElse(transactionToEdit.getPerson().getName());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Phone updatedPhone \u003d editTransactionDescriptor.getPhone().orElse(transactionToEdit.getPerson().getPhone());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Email updatedEmail \u003d editTransactionDescriptor.getEmail().orElse(transactionToEdit.getPerson().getEmail());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Address updatedAddress \u003d editTransactionDescriptor.getAddress()"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                .orElse(transactionToEdit.getPerson().getAddress());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editTransactionDescriptor.getTags().orElse(transactionToEdit.getPerson().getTags());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Person updatedPerson \u003d new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return new Transaction(updatedType, updatedAmount, updatedDeadline, updatedPerson);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                \u0026\u0026 editTransactionDescriptor.equals(e.editTransactionDescriptor);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Stores the details to edit the transaction with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * corresponding field value of the transaction."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static class EditTransactionDescriptor {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        private Amount amount;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        private Type type;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        private Deadline deadline;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        public EditTransactionDescriptor() {}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        public EditTransactionDescriptor(EditTransactionDescriptor toCopy) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            setAmount(toCopy.amount);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            setType(toCopy.type);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            setDeadline(toCopy.deadline);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            return CollectionUtil.isAnyNonNull(amount, type, deadline, name, email, phone, address, tags);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        public void setAmount(Amount amount) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            this.amount \u003d amount;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        public Optional\u003cAmount\u003e getAmount() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            return Optional.ofNullable(amount);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        public void setType(Type type) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            this.type \u003d type;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        public Optional\u003cType\u003e getType() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            return Optional.ofNullable(type);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        public void setDeadline(Deadline deadline) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        public Optional\u003cDeadline\u003e getDeadline() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            return Optional.ofNullable(deadline);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            if (!(other instanceof EditTransactionDescriptor)) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            EditTransactionDescriptor e \u003d (EditTransactionDescriptor) other;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            return getAmount().equals(e.getAmount())"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                    \u0026\u0026 getDeadline().equals(e.getDeadline())"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                    \u0026\u0026 getType().equals(e.getType())"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                    \u0026\u0026 getName().equals(e.getName())"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 83,
      "julianc269": 3,
      "-": 195
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FilterCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "julianc269"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TRANSACTION_AMOUNT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TRANSACTION_AMOUNT_MAX;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TRANSACTION_AMOUNT_MIN;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TRANSACTION_DEADLINE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TRANSACTION_DEADLINE_EARLIEST;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TRANSACTION_DEADLINE_LATEST;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TRANSACTION_TYPE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.model.transaction.MultiFieldPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "julianc269"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "julianc269"
        },
        "content": " * Finds and lists all persons in address book whose name/phone/email/address contains any of the argument keywords."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "julianc269"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "julianc269"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "julianc269"
        },
        "content": "public class FilterCommand extends Command {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"filter\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Filters all transactions whose specified field(s) \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            + \"contain any of the specified keywords (case-insensitive) and displays them as a list.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            + \"Use the or/ prefix to match any or the and/ prefix to match all of the specified conditions\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            + \"Use a semi-colon to separate multiple keywords, e.g. alex;bernice;charlotte\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            + \"\\nParameters: \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            + PREFIX_TRANSACTION_TYPE + \"TRANSACTION_TYPE \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            + PREFIX_TRANSACTION_AMOUNT + \"TRANSACTION_AMOUNT \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            + PREFIX_TRANSACTION_DEADLINE + \"TRANSACTION_DEADLINE \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            + PREFIX_TRANSACTION_AMOUNT_MIN + \"MINIMUM_TRANSACTION_AMOUNT \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            + PREFIX_TRANSACTION_AMOUNT_MAX + \"MAXIMUM_TRANSACTION_AMOUNT \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            + PREFIX_TRANSACTION_DEADLINE_EARLIEST + \"EARLIEST_TRANSACTION_DEADLINE \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            + PREFIX_TRANSACTION_DEADLINE_LATEST + \"LATEST_TRANSACTION_DEADLINE\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            + \"Examples: \\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            + COMMAND_WORD + \" n/alex e/example.com p/87438807 a/Geylang tt/debt\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            + COMMAND_WORD + \" n/alex;bernice;charlotte\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            + COMMAND_WORD + \" tamin/SGD 10.00 tamax/SGD 400.00\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            + COMMAND_WORD + \" tdmin/10/10/2018 tdmax/10/10/2019\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            + COMMAND_WORD + \" n/charlotte e/alex or/\\n\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    private final List\u003cPredicate\u003cTransaction\u003e\u003e predicates;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    private final MultiFieldPredicate.OperatorType operatorType;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public FilterCommand(List\u003cPredicate\u003cTransaction\u003e\u003e predicates,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                         MultiFieldPredicate.OperatorType operatorType) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        this.predicates \u003d predicates;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        this.operatorType \u003d operatorType;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        MultiFieldPredicate predicate \u003d new MultiFieldPredicate(predicates, operatorType);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        model.updateFilteredTransactionList(predicate);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        model.updateFilteredPastTransactionList(predicate);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        model.commitFinancialDatabase();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                String.format(Messages.MESSAGE_ALL_TRANSACTIONS_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                        model.getFilteredTransactionList().size(), model.getFilteredPastTransactionList().size()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                || (other instanceof FilterCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                \u0026\u0026 predicates.equals(((FilterCommand) other).predicates)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                \u0026\u0026 operatorType.equals(((FilterCommand) other).operatorType)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                ); // state check"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "julianc269"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 5,
      "julianc269": 79,
      "Bellaaarh": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HistoryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all the commands entered by user from the start of app launch."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"history\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(history);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e previousCommands \u003d history.getHistory();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (previousCommands.isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(MESSAGE_NO_HISTORY);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(previousCommands);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 2,
      "-": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/InterestCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": " * Calculates an interest value for a given transaction (either using simple or compound scheme as specified by the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": " * user)."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "public class InterestCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"interest\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Calculates interest on all transactions \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            + \"based on the interest scheme and value that the user inputs.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            + \"Parameters: INTEREST_SCHEME INTEREST_RATE...\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" simple 1.1%\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Interest calculated for all %d transactions!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private final String scheme;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private final String rate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public InterestCommand(String scheme, String rate) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        this.scheme \u003d scheme;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        this.rate \u003d rate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        List\u003cTransaction\u003e lastShownList \u003d model.getFilteredTransactionList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        for (Transaction transactionToEdit : lastShownList) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            Amount principalAmount \u003d transactionToEdit.getAmount();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            long monthsDifference \u003d transactionToEdit.getDeadline().getMonthsDifference();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            Amount convertedAmount \u003d Amount.calculateInterest(principalAmount, scheme, rate, monthsDifference);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            Transaction editedTransaction \u003d Transaction.copy(transactionToEdit);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            editedTransaction.setAmount(convertedAmount);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            model.updateTransaction(transactionToEdit, editedTransaction);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        model.commitFinancialDatabase();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, lastShownList.size()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        if (!(other instanceof InterestCommand)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        InterestCommand command \u003d (InterestCommand) other;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return command \u003d\u003d this"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                || (scheme.equals(command.scheme)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                 \u0026\u0026 rate.equals(command.rate));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 58,
      "Bellaaarh": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TRANSACTIONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": " * Lists all persons in the Debt Tracker to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all transactions\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        model.updateFilteredTransactionList(PREDICATE_SHOW_ALL_TRANSACTIONS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        model.updateFilteredPastTransactionList(PREDICATE_SHOW_ALL_TRANSACTIONS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 4,
      "julianc269": 1,
      "-": 21,
      "Bellaaarh": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/NextTransactionCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "import seedu.address.model.transaction.Deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "import seedu.address.model.transaction.DeadlineContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": " * Finds and lists all transactions in the database which deadline is closest to current date."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "public class NextTransactionCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"nexttransaction\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Find and lists all transactions in the\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "            + \" database which deadline is closest to current date.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    private DeadlineContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        List\u003cTransaction\u003e transactionList \u003d model.getFilteredTransactionList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        Deadline firstDate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        if (transactionList.size() \u003e 0) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "            firstDate \u003d transactionList.get(0).getDeadline();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "            for (int i \u003d 1; i \u003c transactionList.size(); i++) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "                Transaction t \u003d transactionList.get(i);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "                if (firstDate.compareTo(t.getDeadline()) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "                    firstDate \u003d t.getDeadline();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "            predicate \u003d new DeadlineContainsKeywordsPredicate(Arrays.asList(firstDate.toString()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "            model.updateFilteredTransactionList(predicate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        model.commitFinancialDatabase();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "                String.format(Messages.MESSAGE_TRANSACTIONS_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "                        model.getFilteredTransactionList().size()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "                || (other instanceof NextTransactionCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "                \u0026\u0026 predicate.equals(((NextTransactionCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xiaoyeong": 56,
      "Bellaaarh": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/PaidCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": " * Removes a current transaction from the current transaction list, to the list of paid/past transactions."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "public class PaidCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"paid\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            + \": Removes a transaction identified by the index number used in the current transaction list\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            + \" and shifts it to the past transactions list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    public static final String MESSAGE_PAID_TRANSACTION_SUCCESS \u003d \"Transaction paid!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static final int DEFAULT_INDEX \u003d 1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    public PaidCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        List\u003cTransaction\u003e lastShownList \u003d model.getFilteredTransactionList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        Transaction paidTransaction \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        model.deleteTransaction(paidTransaction);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        model.addPastTransaction(paidTransaction);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        model.commitFinancialDatabase();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_PAID_TRANSACTION_SUCCESS, paidTransaction));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "                || (other instanceof PaidCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((PaidCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 1,
      "Bellaaarh": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TRANSACTIONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        if (!model.canRedoFinancialDatabase()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        model.redoFinancialDatabase();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        model.updateFilteredTransactionList(PREDICATE_SHOW_ALL_TRANSACTIONS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 4,
      "julianc269": 2,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ReminderCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.commons.core.CalendarManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": " * Sets a reminder for an existing transaction in the database."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "public class ReminderCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remind\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"rem\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static final String DEFAULT_REMINDER_PERIOD \u003d \"30 minutes\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static final int DEFAULT_INDEX \u003d 1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sets a reminder for a transaction specified by \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            + \"an index based on the given time period.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            + \"Parameters: INDEX TIME_PERIOD\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            + \"Examples: \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            + COMMAND_WORD + \" \" + DEFAULT_INDEX + \" \" + DEFAULT_REMINDER_PERIOD;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Set reminder for %s transaction.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private final int timePeriod;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * @param index of the transaction in the filtered transaction list to edit"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * @param timePeriod period of time before a transaction deadline for which to set the reminder"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public ReminderCommand(int index, int timePeriod) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        this.timePeriod \u003d timePeriod;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        List\u003cTransaction\u003e lastShownList \u003d model.getFilteredTransactionList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Transaction transactionToSetReminder \u003d lastShownList.get(index);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        if (!CalendarManager.getInstance().isAuthenticated()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            return new CommandResult(\"You have to first login using calendar command.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            CalendarManager.getInstance().setReminder(timePeriod, transactionToSetReminder);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            ex.printStackTrace();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        String transactionIndexFormat;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        switch (index) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            transactionIndexFormat \u003d index + \"st\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            transactionIndexFormat \u003d index + \"nd\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            transactionIndexFormat \u003d index + \"rd\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            transactionIndexFormat \u003d index + \"th\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, transactionIndexFormat));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SelectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": " * Selects a transaction identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            + \": Selects the transaction identified by the index number used in either the current or past \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            + \" transaction list.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            + \"OR: \" + COMMAND_WORD + \" past \" + \"1\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static final String MESSAGE_SELECT_TRANSACTION_SUCCESS \u003d \"Selected Person: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    private final String whichList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    public SelectCommand(String whichList, Index targetIndex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        this.whichList \u003d whichList;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        this.whichList \u003d \"\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        List\u003cTransaction\u003e filteredPersonList;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        if (\"past\".equals(whichList)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            filteredPersonList \u003d model.getFilteredPastTransactionList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            if (targetIndex.getZeroBased() \u003e\u003d filteredPersonList.size()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            EventsCenter.getInstance().post(new JumpToListRequestEvent(whichList, targetIndex));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            filteredPersonList \u003d model.getFilteredTransactionList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            if (targetIndex.getZeroBased() \u003e\u003d filteredPersonList.size()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        //model.commitFinancialDatabase();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_TRANSACTION_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof SelectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 6,
      "-": 54,
      "Bellaaarh": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SortCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.Deadline;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.Type;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": " * Sorts transactions in the financial database based on {@code Type}, {@code Amount}, {@code Deadline} or the"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": " * default sort parameter {@code Phone}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"%d transactions sorted by %s attribute!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static final String DEFAULT_SORT_PARAMETER \u003d \"person\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static final String TYPE_SORT_PARAMETER \u003d \"type\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static final String AMOUNT_SORT_PARAMETER \u003d \"amount\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static final String DEADLINE_SORT_PARAMETER \u003d \"deadline\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private final String sortParameter;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public SortCommand(String arguments) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        requireNonNull(arguments);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        sortParameter \u003d arguments;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        ObservableList\u003cTransaction\u003e originalTransactionList \u003d model.getFilteredTransactionList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        int size \u003d originalTransactionList.size();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Comparator\u003cTransaction\u003e transactionComparator;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        String trimmedSortParameterLowerCase \u003d sortParameter.toLowerCase().trim();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        String commandResult;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        switch(trimmedSortParameterLowerCase) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        case AMOUNT_SORT_PARAMETER:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            transactionComparator \u003d (firstTransaction, secondTransaction) -\u003e {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                Amount firstAmount \u003d firstTransaction.getAmount();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                Amount secondAmount \u003d secondTransaction.getAmount();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                return firstAmount.compareTo(secondAmount);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            };"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            commandResult \u003d String.format(MESSAGE_SUCCESS, size, trimmedSortParameterLowerCase);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        case DEADLINE_SORT_PARAMETER:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            transactionComparator \u003d (firstTransaction, secondTransaction) -\u003e {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                Deadline firstDeadline \u003d firstTransaction.getDeadline();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                Deadline secondDeadline \u003d secondTransaction.getDeadline();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                return firstDeadline.compareTo(secondDeadline);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            };"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            commandResult \u003d String.format(MESSAGE_SUCCESS, size, trimmedSortParameterLowerCase);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        case TYPE_SORT_PARAMETER:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            transactionComparator \u003d (firstTransaction, secondTransaction) -\u003e {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                Type firstType \u003d firstTransaction.getType();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                Type secondType \u003d secondTransaction.getType();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                return firstType.compareTo(secondType);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            };"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            commandResult \u003d String.format(MESSAGE_SUCCESS, size, trimmedSortParameterLowerCase);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            transactionComparator \u003d (firstTransaction, secondTransaction) -\u003e {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                Person firstPerson \u003d firstTransaction.getPerson();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                Person secondPerson \u003d secondTransaction.getPerson();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                return firstPerson.compareTo(secondPerson);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            };"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            commandResult \u003d String.format(MESSAGE_SUCCESS, size, DEFAULT_SORT_PARAMETER);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        List\u003cTransaction\u003e sortedTransactionList \u003d new ArrayList\u003c\u003e(originalTransactionList);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        sortedTransactionList.sort(transactionComparator);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        model.resetData(model.getFinancialDatabase());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        for (Transaction newTransaction : sortedTransactionList) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            model.addTransaction(newTransaction);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        model.commitFinancialDatabase();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return new CommandResult(commandResult);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        if (!(other instanceof AnalyticsCommand)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        SortCommand analyticsCommand \u003d (SortCommand) other;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return sortParameter.equals(analyticsCommand.sortParameter);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 102,
      "Bellaaarh": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SwitchCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TRANSACTIONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import seedu.address.commons.events.ui.SwitchTabsEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": " * Lists all past transactions in the Debt Tracker to the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "public class SwitchCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"switch\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"sw\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    public static final String MESSAGE_PAID_SUCCESS \u003d \"Listed all paid transactions.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    public static final String MESSAGE_CURRENT_SUCCESS \u003d \"Listed all pending transactions.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Switches between Current Transactions tab and \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            + \"Past Transactions tab.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            + \"Examples: \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            + COMMAND_WORD + \" curr\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            + COMMAND_WORD + \" past\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    private final String whichTab;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    public SwitchCommand(String whichTab) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        this.whichTab \u003d whichTab;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        model.updateFilteredPastTransactionList(PREDICATE_SHOW_ALL_TRANSACTIONS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        switch(whichTab) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        case \"past\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            EventsCenter.getInstance().post(new SwitchTabsEvent(1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            return new CommandResult(MESSAGE_PAID_SUCCESS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        case \"curr\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            EventsCenter.getInstance().post(new SwitchTabsEvent(0));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            return new CommandResult(MESSAGE_CURRENT_SUCCESS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            return new CommandResult(\"\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Bellaaarh": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TRANSACTIONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previous state."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        if (!model.canUndoFinancialDatabase()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        model.undoFinancialDatabase();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        model.updateFilteredTransactionList(PREDICATE_SHOW_ALL_TRANSACTIONS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        model.updateFilteredPastTransactionList(PREDICATE_SHOW_ALL_TRANSACTIONS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 4,
      "julianc269": 2,
      "-": 27,
      "Bellaaarh": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UploadPhotoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TRANSACTIONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": " * Uploads a photo for a person involved in a transaction with the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "public class UploadPhotoCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New photo added: %1$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static final int DEFAULT_INDEX \u003d 1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"uploadphoto\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            + \": upload image to that transaction contact\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "    private Index photoIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public UploadPhotoCommand(Index index, String path) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        logger.info(\"UploadPhotoclass\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        logger.info(path);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        //make sure input not null"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        requireNonNull(path);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        photoIndex \u003d index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        filePath \u003d path;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        List\u003cTransaction\u003e latestTransactionList \u003d model.getFilteredTransactionList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        int lastPersonListIndex \u003d latestTransactionList.size();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        int zeroBasedTransationIndex \u003d photoIndex.getZeroBased();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        int oneBasedTransactionIndex \u003d photoIndex.getOneBased();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        if (zeroBasedTransationIndex \u003e\u003d lastPersonListIndex) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        Transaction currentTransaction \u003d latestTransactionList.get(zeroBasedTransationIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Transaction editTransaction \u003d Transaction.copy(currentTransaction);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        logger.info(\"before fail\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        logger.info(filePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "            editTransaction.setPhoto(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "            logger.info(\"cannot add\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        model.updateTransaction(currentTransaction, editTransaction);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        model.updateFilteredTransactionList(PREDICATE_SHOW_ALL_TRANSACTIONS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        model.commitFinancialDatabase();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, oneBasedTransactionIndex));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "                || (other instanceof UploadPhotoCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "                \u0026\u0026 this.photoIndex.equals(((UploadPhotoCommand) other).photoIndex)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "                \u0026\u0026 this.filePath.equals(((UploadPhotoCommand) other).filePath));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 15,
      "weiqing-nic": 64,
      "xiaoyeong": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/WildcardSearchCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "julianc269"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.person.NameContainsLettersPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "julianc269"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": " * Finds and lists any contacts whose names contain the substring the user has input."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "julianc269"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "public class WildcardSearchCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"search\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Performs a wildcard search on the Debt Tracker\u0027s \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            + \"contacts in either the current or past transaction list, based on user\u0027s input. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" oh\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            + \"OR: \" + COMMAND_WORD + \" past \" + \"oh\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    private final String whichList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    private final NameContainsLettersPredicate predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    public WildcardSearchCommand(String whichList, NameContainsLettersPredicate predicate) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        this.whichList \u003d whichList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public WildcardSearchCommand(NameContainsLettersPredicate predicate) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        this.whichList \u003d \"\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        if (\"past\".equals(whichList)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            model.updateFilteredPastTransactionList(predicate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            model.commitFinancialDatabase();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            return new CommandResult("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "                    String.format(Messages.MESSAGE_TRANSACTIONS_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "                            model.getFilteredPastTransactionList().size()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            model.updateFilteredTransactionList(predicate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            model.commitFinancialDatabase();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            return new CommandResult("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                    String.format(Messages.MESSAGE_TRANSACTIONS_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                            model.getFilteredTransactionList().size()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        if (!(other instanceof WildcardSearchCommand)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        WildcardSearchCommand command \u003d (WildcardSearchCommand) other;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return command \u003d\u003d this"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                || predicate.equals(command.predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 17,
      "julianc269": 11,
      "Bellaaarh": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TRANSACTION_AMOUNT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TRANSACTION_DEADLINE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TRANSACTION_TYPE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.person.Photo;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.Deadline;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.Type;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TRANSACTION_TYPE, PREFIX_TRANSACTION_AMOUNT,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                        PREFIX_TRANSACTION_DEADLINE, PREFIX_NAME, PREFIX_PHONE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                        PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TRANSACTION_TYPE, PREFIX_TRANSACTION_AMOUNT,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                PREFIX_TRANSACTION_DEADLINE, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Type type \u003d ParserUtil.parseType(argMultimap.getValue(PREFIX_TRANSACTION_TYPE).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Amount amount \u003d ParserUtil.parseAmount(argMultimap.getValue(PREFIX_TRANSACTION_AMOUNT).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Deadline deadline \u003d ParserUtil.parseDeadline(argMultimap.getValue(PREFIX_TRANSACTION_DEADLINE).get());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new Person(name, phone, email, address, tagList);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        Photo pic \u003d new Photo();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        Transaction transaction \u003d new Transaction(type, amount, deadline, person, pic);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return new AddCommand(transaction);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public AddCommand parseTester(String args) throws ParseException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TRANSACTION_TYPE, PREFIX_TRANSACTION_AMOUNT,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                        PREFIX_TRANSACTION_DEADLINE, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                        PREFIX_TAG);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TRANSACTION_TYPE, PREFIX_TRANSACTION_AMOUNT,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                PREFIX_TRANSACTION_DEADLINE, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Type type \u003d ParserUtil.parseType(argMultimap.getValue(PREFIX_TRANSACTION_TYPE).get());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Amount amount \u003d ParserUtil.parseAmount(argMultimap.getValue(PREFIX_TRANSACTION_AMOUNT).get());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Deadline deadline \u003d ParserUtil.parseDeadline(argMultimap.getValue(PREFIX_TRANSACTION_DEADLINE).get());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        Photo pic \u003d new Photo();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Transaction transaction \u003d new Transaction(type, amount, deadline, new Person(name, phone, email, address,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "                tagList), pic);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return new AddCommand(transaction);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 27,
      "weiqing-nic": 4,
      "julianc269": 16,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AnalyticsCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "/* @@author xiaoyeong */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "import seedu.address.logic.commands.AnalyticsCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "import seedu.address.model.transaction.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": " * Parses input arguments and creates a new AnalyticsCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "public class AnalyticsCommandParser implements Parser\u003cAnalyticsCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AnalyticsCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "     * and returns an AnalyticsCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    public AnalyticsCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "            if (args !\u003d null \u0026\u0026 args.equals(\"\")) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "                return new AnalyticsCommand();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "            Deadline deadline \u003d ParserUtil.parseDeadline(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "            return new AnalyticsCommand(deadline);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AnalyticsCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xiaoyeong": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentMultimap.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * Returns the number of times {@code prefix} has been specified"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public int prefixSize(Prefix prefix) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        return argMultimap.get(prefix) \u003d\u003d null ? 0 : argMultimap.get(prefix).size();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "julianc269": 7,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CalendarCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "julianc269"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.logic.commands.CalendarCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "julianc269"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": " * Parses input arguments and creates a new CalendarCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "julianc269"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "julianc269"
        },
        "content": "public class CalendarCommandParser implements Parser\u003cCalendarCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "     * Parses the given {@code String} argument in the context of the CalendarCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "     * and returns a CalendarCommand object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public CalendarCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        switch (trimmedArgs) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        case \"show\":"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        case \"login\":"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        case \"logout\":"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        case \"sync\" :"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, CalendarCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        return new CalendarCommand(trimmedArgs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "julianc269"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 3,
      "julianc269": 30,
      "Bellaaarh": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static final Prefix PREFIX_TRANSACTION_AMOUNT \u003d new Prefix(\"ta/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static final Prefix PREFIX_TRANSACTION_TYPE \u003d new Prefix(\"tt/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static final Prefix PREFIX_TRANSACTION_DEADLINE \u003d new Prefix(\"td/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "    public static final Prefix PREFIX_PHOTO_PATH \u003d new Prefix(\"up/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public static final Prefix PREFIX_OR \u003d new Prefix(\"or/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public static final Prefix PREFIX_AND \u003d new Prefix(\"and/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public static final Prefix PREFIX_TRANSACTION_AMOUNT_MAX \u003d new Prefix(\"tamax/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public static final Prefix PREFIX_TRANSACTION_AMOUNT_MIN \u003d new Prefix(\"tamin/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public static final Prefix PREFIX_TRANSACTION_DEADLINE_EARLIEST \u003d new Prefix(\"tdmin/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public static final Prefix PREFIX_TRANSACTION_DEADLINE_LATEST \u003d new Prefix(\"tdmax/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 3,
      "weiqing-nic": 1,
      "julianc269": 6,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import java.util.StringTokenizer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an DeleteCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            StringTokenizer input \u003d new StringTokenizer(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            String first \u003d input.nextToken();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            if (\"past\".equals(first)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "                Index index \u003d ParserUtil.parseIndex(input.nextToken());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "                return new DeleteCommand(first, index);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                return new DeleteCommand(index);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 29,
      "Bellaaarh": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TRANSACTION_AMOUNT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TRANSACTION_DEADLINE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TRANSACTION_TYPE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TRANSACTION_TYPE, PREFIX_TRANSACTION_AMOUNT,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                        PREFIX_TRANSACTION_DEADLINE, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                        PREFIX_TAG);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        EditCommand.EditTransactionDescriptor editTransactionDescriptor \u003d new EditCommand.EditTransactionDescriptor();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            editTransactionDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            editTransactionDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            editTransactionDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            editTransactionDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TRANSACTION_AMOUNT).isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            editTransactionDescriptor.setAmount(ParserUtil.parseAmount(argMultimap"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                    .getValue(PREFIX_TRANSACTION_AMOUNT).get()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TRANSACTION_TYPE).isPresent()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            editTransactionDescriptor.setType(ParserUtil.parseType(argMultimap"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                    .getValue(PREFIX_TRANSACTION_TYPE).get()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TRANSACTION_DEADLINE).isPresent()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            editTransactionDescriptor.setDeadline(ParserUtil.parseDeadline(argMultimap"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                    .getValue(PREFIX_TRANSACTION_DEADLINE).get()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editTransactionDescriptor::setTags);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        if (!editTransactionDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return new EditCommand(index, editTransactionDescriptor);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 16,
      "julianc269": 12,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FieldType.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "julianc269"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "julianc269"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "julianc269"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "julianc269"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "julianc269"
        },
        "content": "public enum FieldType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    Address, Email, Name, Phone, Deadline, Amount, Type, Tag, None"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "julianc269"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "julianc269": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FilterCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "julianc269"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PREFIX_COMBINATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PREFIX_VALUE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_KEYWORDS_NONEMPTY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OR;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TRANSACTION_AMOUNT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TRANSACTION_AMOUNT_MAX;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TRANSACTION_AMOUNT_MIN;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TRANSACTION_DEADLINE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TRANSACTION_DEADLINE_EARLIEST;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TRANSACTION_DEADLINE_LATEST;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TRANSACTION_TYPE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.model.transaction.AmountBoundsPredicate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.model.transaction.Deadline;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.model.transaction.DeadlineBoundsPredicate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.FieldContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.model.transaction.MultiFieldPredicate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "julianc269"
        },
        "content": "/**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "julianc269"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "julianc269"
        },
        "content": " */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "julianc269"
        },
        "content": "public class FilterCommandParser implements Parser\u003cFilterCommand\u003e {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "    public FilterCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                        PREFIX_TRANSACTION_AMOUNT, PREFIX_TRANSACTION_DEADLINE, PREFIX_TRANSACTION_TYPE,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                        PREFIX_OR, PREFIX_AND, PREFIX_TRANSACTION_AMOUNT_MAX, PREFIX_TRANSACTION_AMOUNT_MIN,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                        PREFIX_TRANSACTION_DEADLINE_EARLIEST, PREFIX_TRANSACTION_DEADLINE_LATEST,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                        PREFIX_TAG);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        if (!anyPrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                PREFIX_TRANSACTION_AMOUNT, PREFIX_TRANSACTION_DEADLINE, PREFIX_TRANSACTION_TYPE,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                PREFIX_TRANSACTION_AMOUNT_MAX, PREFIX_TRANSACTION_AMOUNT_MIN, PREFIX_TRANSACTION_DEADLINE_EARLIEST,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                PREFIX_TRANSACTION_DEADLINE_LATEST, PREFIX_TAG)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        if (anyPrefixesWithMultipleInstances(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                PREFIX_TRANSACTION_AMOUNT, PREFIX_TRANSACTION_DEADLINE, PREFIX_TRANSACTION_TYPE, PREFIX_OR, PREFIX_AND,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                PREFIX_TRANSACTION_AMOUNT_MAX, PREFIX_TRANSACTION_AMOUNT_MIN,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                PREFIX_TRANSACTION_DEADLINE_EARLIEST, PREFIX_TRANSACTION_DEADLINE_LATEST, PREFIX_TAG)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        List\u003cPredicate\u003cTransaction\u003e\u003e predicates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        addPredicates(argMultimap, predicates);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        return new FilterCommand(predicates, getOperatorType(argMultimap));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    private static boolean anyPrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    private static boolean anyPrefixesWithMultipleInstances(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.prefixSize(prefix) \u003e 1);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    private static boolean anyStringEmpty(String[] stringList) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        return Stream.of(stringList).anyMatch(s -\u003e s.isEmpty());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    private Map\u003cPrefix, FieldType\u003e getFieldTypeMap() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        Map\u003cPrefix, FieldType\u003e typeMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        typeMap.put(PREFIX_NAME, FieldType.Name);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        typeMap.put(PREFIX_ADDRESS, FieldType.Address);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        typeMap.put(PREFIX_PHONE, FieldType.Phone);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        typeMap.put(PREFIX_EMAIL, FieldType.Email);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        typeMap.put(PREFIX_TRANSACTION_AMOUNT, FieldType.Amount);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        typeMap.put(PREFIX_TRANSACTION_DEADLINE, FieldType.Deadline);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        typeMap.put(PREFIX_TRANSACTION_TYPE, FieldType.Type);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        typeMap.put(PREFIX_TAG, FieldType.Tag);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        return typeMap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    private void addPredicates(ArgumentMultimap argumentMultimap, List\u003cPredicate\u003cTransaction\u003e\u003e predicateList)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        Map\u003cPrefix, FieldType\u003e typeMap \u003d getFieldTypeMap();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        for (Map.Entry\u003cPrefix, FieldType\u003e entry : typeMap.entrySet()) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            if (argumentMultimap.getValue(entry.getKey()).isPresent()) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                String[] keywords \u003d argumentMultimap.getValue(entry.getKey()).get().split(\";\" , -1);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                if (anyStringEmpty(keywords)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                    throw new ParseException(MESSAGE_KEYWORDS_NONEMPTY);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                predicateList.add(new FieldContainsKeywordsPredicate(entry.getValue(), Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        if (argumentMultimap.getValue(PREFIX_TRANSACTION_DEADLINE_EARLIEST).isPresent()) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            Deadline deadline \u003d ParserUtil.parseDeadlineIgnoreFuture(argumentMultimap"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                    .getValue(PREFIX_TRANSACTION_DEADLINE_EARLIEST).get());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            predicateList.add(new DeadlineBoundsPredicate(deadline, DeadlineBoundsPredicate.BoundType.EARLIEST));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        if (argumentMultimap.getValue(PREFIX_TRANSACTION_DEADLINE_LATEST).isPresent()) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            Deadline deadline \u003d ParserUtil.parseDeadlineIgnoreFuture(argumentMultimap"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                    .getValue(PREFIX_TRANSACTION_DEADLINE_LATEST).get());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            predicateList.add(new DeadlineBoundsPredicate(deadline, DeadlineBoundsPredicate.BoundType.LATEST));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        if (argumentMultimap.getValue(PREFIX_TRANSACTION_AMOUNT_MAX).isPresent()) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            Amount amount \u003d ParserUtil.parseAmount(argumentMultimap.getValue(PREFIX_TRANSACTION_AMOUNT_MAX).get());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            predicateList.add(new AmountBoundsPredicate(amount, AmountBoundsPredicate.BoundType.MAX));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        if (argumentMultimap.getValue(PREFIX_TRANSACTION_AMOUNT_MIN).isPresent()) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            Amount amount \u003d ParserUtil.parseAmount(argumentMultimap.getValue(PREFIX_TRANSACTION_AMOUNT_MIN).get());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            predicateList.add(new AmountBoundsPredicate(amount, AmountBoundsPredicate.BoundType.MIN));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    private MultiFieldPredicate.OperatorType getOperatorType(ArgumentMultimap argumentMultimap) throws ParseException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        if (argumentMultimap.getValue(PREFIX_AND).isPresent() \u0026\u0026 argumentMultimap.getValue(PREFIX_OR).isPresent()) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_PREFIX_COMBINATION, PREFIX_OR, PREFIX_AND));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        if (argumentMultimap.getValue(PREFIX_OR).isPresent()) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            if (!argumentMultimap.getValue(PREFIX_OR).get().isEmpty()) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_PREFIX_VALUE, PREFIX_OR));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            return MultiFieldPredicate.OperatorType.OR;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        if (argumentMultimap.getValue(PREFIX_AND).isPresent()) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            if (!argumentMultimap.getValue(PREFIX_AND).get().isEmpty()) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_PREFIX_VALUE, PREFIX_AND));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        return MultiFieldPredicate.OperatorType.AND;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "julianc269"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 4,
      "weiqing-nic": 1,
      "julianc269": 172
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FinancialDatabaseParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import seedu.address.logic.commands.AnalyticsCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import seedu.address.logic.commands.CalendarCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import seedu.address.logic.commands.ConvertCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import seedu.address.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import seedu.address.logic.commands.InterestCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import seedu.address.logic.commands.NextTransactionCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import seedu.address.logic.commands.PaidCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import seedu.address.logic.commands.SwitchCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import seedu.address.logic.commands.UploadPhotoCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import seedu.address.logic.commands.WildcardSearchCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "public class FinancialDatabaseParser {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        case AnalyticsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "            return new AnalyticsCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        case CalendarCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            return new CalendarCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        case ConvertCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            return new ConvertCommand();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        case FilterCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            return new FilterCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        case InterestCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            return new InterestCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        case NextTransactionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "            return new NextTransactionCommand();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            return new SortCommand(arguments);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        case WildcardSearchCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            return new WildcardSearchCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        case UploadPhotoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            return new UploadPhotoCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        case PaidCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            return new PaidCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        case SwitchCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        case SwitchCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            return new SwitchCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 20,
      "xiaoyeong": 5,
      "weiqing-nic": 2,
      "julianc269": 1,
      "-": 83,
      "Bellaaarh": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/InterestCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.logic.commands.InterestCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.InterestRate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.InterestScheme;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": " * Parses input arguments and creates a new InterestCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "public class InterestCommandParser implements Parser\u003cInterestCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public InterestCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, InterestCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        if (nameKeywords.length !\u003d 2) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, InterestCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        String scheme \u003d nameKeywords[0];"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        if (!InterestScheme.isValidInterestScheme(scheme)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            throw new ParseException(InterestScheme.MESSAGE_INTEREST_SCHEME_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        String rate \u003d nameKeywords[1];"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        if (!InterestRate.isValidInterestRate(rate)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            throw new ParseException(InterestRate.MESSAGE_INTEREST_RATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return new InterestCommand(scheme, rate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/PaidCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import seedu.address.logic.commands.PaidCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": " * Parses input arguments and creates a new PaidCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "public class PaidCommandParser implements Parser\u003cPaidCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the PaidCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "     * and returns an PaidCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    public PaidCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            return new PaidCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, PaidCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Bellaaarh": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.Deadline;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.Type;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Parses a string {@code name} into a {@code Name}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Parses a string {@code phone} into a {@code Phone}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Parses a string {@code address} into an {@code Address}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Parses a string {@code email} into an {@code Email}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Parses a string {@code amount} into an {@code Amount}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * @throws ParseException if the given {@code amount} is invalid."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static Amount parseAmount(String transactionAmount) throws ParseException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        requireNonNull(transactionAmount);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        String trimmedTransactionAmount \u003d transactionAmount.trim();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        if (!Amount.isValidAmount(transactionAmount)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            throw new ParseException(Amount.MESSAGE_TRANSACTION_AMOUNT_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return new Amount(trimmedTransactionAmount);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Parses a string {@code type} into an {@code Type}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * @throws ParseException if the given {@code type} is invalid."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static Type parseType(String type) throws ParseException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        requireNonNull(type);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        String trimmedType \u003d type.trim();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        if (!Type.isValidType(trimmedType)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            throw new ParseException(Type.MESSAGE_TRANSACTION_TYPE_CONSTRAINTS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return new Type(trimmedType);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Parses a string {@code email} into an {@code Email}."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static Deadline parseDeadline(String deadline) throws ParseException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Deadline formattedDeadline \u003d parseDeadlineIgnoreFuture(deadline);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            Deadline.checkDateInFuture(formattedDeadline.getValue());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            return formattedDeadline;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        } catch (DateTimeException ex) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            throw new ParseException(ex.getMessage());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * Parses a string {@code email} into an {@code Email}."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * Does the require deadline to be in the future"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public static Deadline parseDeadlineIgnoreFuture(String deadline) throws ParseException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        requireNonNull(deadline);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        String trimmedDeadline \u003d deadline.trim();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        if (deadline.isEmpty() || !Deadline.matchesDateFormat(trimmedDeadline)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            throw new ParseException(Deadline.MESSAGE_TRANSACTION_DEADLINE_INCORRECT_FORMAT);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return new Deadline(trimmedDeadline);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Parses a string {@code tag} into a {@code Tag}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 53,
      "julianc269": 17,
      "-": 119
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SelectCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import java.util.StringTokenizer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new SelectCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandParser implements Parser\u003cSelectCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SelectCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an SelectCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            StringTokenizer input \u003d new StringTokenizer(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            String first \u003d input.nextToken();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            if (\"past\".equals(first)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "                Index index \u003d ParserUtil.parseIndex(input.nextToken());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "                return new SelectCommand(first, index);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                return new SelectCommand(index);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 28,
      "Bellaaarh": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SwitchCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import seedu.address.logic.commands.SwitchCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "public class SwitchCommandParser implements Parser\u003cSwitchCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SelectCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "     * and returns an SelectCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    public SwitchCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        String condition \u003d args.trim();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        switch(condition) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        case \"past\":"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        case \"curr\":"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SwitchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        return new SwitchCommand(condition);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Bellaaarh": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/UploadPhotoCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHOTO_PATH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.logic.commands.UploadPhotoCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": " * Parses input arguments and creates a new UpdatePhotoCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "public class UploadPhotoCommandParser implements Parser\u003cUploadPhotoCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the UpdatePhotoCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * and returns an UpdatePhotoCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "    public UploadPhotoCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_PHOTO_PATH);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_PHOTO_PATH) || argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "            logger.info(\"inside\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, UploadPhotoCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        //get the currentTransaction Index and the currentTransactionPhoto"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Index getcurrentTransactionIndex \u003d requireNonNull("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                Index.fromOneBased(Integer.parseInt(argMultimap.getPreamble())));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        String getPhotoPath \u003d requireNonNull(argMultimap.getValue(PREFIX_PHOTO_PATH).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        logger.info(\"uploading\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        logger.info(getPhotoPath);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        logger.info(\"\" + getcurrentTransactionIndex);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        return new UploadPhotoCommand(getcurrentTransactionIndex, getPhotoPath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 15,
      "weiqing-nic": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/WildcardSearchCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import java.util.StringTokenizer;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import seedu.address.logic.commands.WildcardSearchCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.person.NameContainsLettersPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": " * Parses input arguments and creates a new WildCardSearchCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "public class WildcardSearchCommandParser implements Parser\u003cWildcardSearchCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the WildcardSearchCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "     * and returns an WildcardSearchCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "    public WildcardSearchCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        StringTokenizer input \u003d new StringTokenizer(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        String first \u003d input.nextToken();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        if (\"past\".equals(first)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            String toParse \u003d input.nextToken().trim();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            if (toParse.isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, WildcardSearchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            String[] nameKeywords \u003d toParse.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            return new WildcardSearchCommand(first, new NameContainsLettersPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, WildcardSearchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            return new WildcardSearchCommand(new NameContainsLettersPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 3,
      "weiqing-nic": 1,
      "Bellaaarh": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/model/FinancialDatabase.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.UniqueTransactionList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": " * Duplicates are not allowed (by .isSameTransaction comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "public class FinancialDatabase implements ReadOnlyFinancialDatabase {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    protected final UniqueTransactionList transactions;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    protected final UniqueTransactionList pastTransactions;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        transactions \u003d new UniqueTransactionList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        pastTransactions \u003d new UniqueTransactionList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public FinancialDatabase() {}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Creates an Financial Database using the Transactions in the {@code toBeCopied}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * @param toBeCopied"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public FinancialDatabase(ReadOnlyFinancialDatabase toBeCopied) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Replaces the transactions of the Transaction list with {@code transactions}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * {@code transactions} must not contain duplicate transactions."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    public void setTransactions(ObservableList\u003cTransaction\u003e transactions, UniqueTransactionList list) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        list.setTransactions(transactions);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "     * Resets the existing data of this {@code Financial Database} with {@code newData}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "     * @param newData"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    public void resetData(ReadOnlyFinancialDatabase newData) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        setTransactions(newData.getTransactionList(), transactions);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        setTransactions(newData.getPastTransactionList(), pastTransactions);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    //// transaction-level operations"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    //// Transaction-level operations"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Returns true if a duplicate transaction is trying to be added to the database."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    public boolean hasTransaction(Transaction transaction, UniqueTransactionList list) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        requireNonNull(transaction);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        return list.contains(transaction);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Adds a Transaction to the address book."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * The Transaction must not already exist in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    public void addTransaction(Transaction transaction, UniqueTransactionList list) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        list.add(transaction);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Replaces the given Transaction {@code target} in the list with {@code editedTransaction}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * The Transaction identity of {@code editedTransaction} must not be the same as another existing Transaction in the"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * address book."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void updateTransaction(Transaction target, Transaction editedTransaction) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        requireNonNull(editedTransaction);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        transactions.setTransaction(target, editedTransaction);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Removes {@code key} from this {@code FinancialDatabase}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * {@code key} must exist in the financial database."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    public void removeTransaction(Transaction key, UniqueTransactionList list) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        list.remove(key);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "     * Retrieves current transactions list"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    public UniqueTransactionList getCurrentList() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        return this.transactions;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "     * Retrieves past transactions list"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    public UniqueTransactionList getPastList() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        return this.pastTransactions;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return transactions.asUnmodifiableObservableList().size() + \" Transactions\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public ObservableList\u003cTransaction\u003e getTransactionList() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return transactions.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    public ObservableList\u003cTransaction\u003e getPastTransactionList() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        return pastTransactions.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                || (other instanceof FinancialDatabase // instanceof handles nulls"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                \u0026\u0026 transactions.equals(((FinancialDatabase) other).transactions));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return Objects.hash(transactions);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 106,
      "julianc269": 6,
      "Bellaaarh": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    Predicate\u003cTransaction\u003e PREDICATE_SHOW_ALL_TRANSACTIONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Clears existing backing model and replaces with the provided new data. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    void resetData(ReadOnlyFinancialDatabase newData);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    /** Returns the Financial Database */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    ReadOnlyFinancialDatabase getFinancialDatabase();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Returns true if a transaction with the same parameters as {@code transaction} exists in the database."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    boolean hasTransaction(Transaction transaction);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "     * Deletes the given transaction from the current transaction list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * The transaction must exist in the database."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    void deleteTransaction(Transaction target);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "     * Deletes the given transaction from the past transaction list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "     * The transaction must exist in the database."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    void deletePastTransaction(Transaction target);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "     * Adds the given transaction to the current transaction list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * {@code transaction} must not already exist in the database."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    void addTransaction(Transaction transaction);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "     * Add transaction to the past Transactions list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "     * @param person"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    void addPastTransaction(Transaction person);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Replaces the given transaction {@code target} with {@code editedTransaction}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * {@code target} must exist in the database."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * The {@code editedTransaction} must not be identical to another existing transaction in the"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * database."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    void updateTransaction(Transaction target, Transaction editedTransaction);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    /** Returns an unmodifiable view of the filtered transaction list */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    ObservableList\u003cTransaction\u003e getFilteredTransactionList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "     * Does the same thing as getFilteredTransactionList() but for pastTransactions."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    ObservableList\u003cTransaction\u003e getFilteredPastTransactionList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Updates the filtered transaction list according to the given {@code predicate}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    void updateFilteredTransactionList(Predicate\u003cTransaction\u003e predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "     * Does the same thing for updateFilteredTransactionList but for pastTransactions."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "     * @param predicate"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    void updateFilteredPastTransactionList (Predicate\u003cTransaction\u003e predicate);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Returns true if the model has previous database states to restore."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    boolean canUndoFinancialDatabase();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Returns true if the model has undone database to restore."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    boolean canRedoFinancialDatabase();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Restores the model\u0027s database to its previous state."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    void undoFinancialDatabase();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Restores the model\u0027s database to its previously undone state."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    void redoFinancialDatabase();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Saves the current database state for undo/redo."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    void commitFinancialDatabase();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 31,
      "weiqing-nic": 2,
      "julianc269": 1,
      "-": 58,
      "Bellaaarh": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.commons.core.CalendarManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.commons.events.model.FinancialDatabaseChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager extends ComponentManager implements Model {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private final VersionedFinancialDatabase versionedFinancialDatabase;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private final FilteredList\u003cTransaction\u003e filteredTransactions;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    private final FilteredList\u003cTransaction\u003e filteredPastTransactions;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public ModelManager(ReadOnlyFinancialDatabase addressBook, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        versionedFinancialDatabase \u003d new VersionedFinancialDatabase(addressBook);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        filteredTransactions \u003d new FilteredList\u003c\u003e(versionedFinancialDatabase.getTransactionList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        filteredPastTransactions \u003d new FilteredList\u003c\u003e(versionedFinancialDatabase.getPastTransactionList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        this(new FinancialDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void resetData(ReadOnlyFinancialDatabase newData) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        versionedFinancialDatabase.resetData(newData);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        indicateFinancialDatabaseChanged();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public ReadOnlyFinancialDatabase getFinancialDatabase() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return versionedFinancialDatabase;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    /** Raises an event to indicate the model has changed, and synchronizes the calendar with the model*/"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private void indicateFinancialDatabaseChanged() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        raise(new FinancialDatabaseChangedEvent(versionedFinancialDatabase));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        CalendarManager.getInstance().syncCalendarAsync(this);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public boolean hasTransaction(Transaction person) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        return versionedFinancialDatabase.hasTransaction(person, versionedFinancialDatabase.getCurrentList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void deleteTransaction(Transaction target) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        versionedFinancialDatabase.removeTransaction(target, versionedFinancialDatabase.getCurrentList());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        indicateFinancialDatabaseChanged();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    public void deletePastTransaction(Transaction target) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        versionedFinancialDatabase.removeTransaction(target, versionedFinancialDatabase.getPastList());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        indicateFinancialDatabaseChanged();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void addTransaction(Transaction person) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        versionedFinancialDatabase.addTransaction(person, versionedFinancialDatabase.getCurrentList());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        updateFilteredTransactionList(PREDICATE_SHOW_ALL_TRANSACTIONS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        indicateFinancialDatabaseChanged();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "     * Add transaction to the past Transactions list."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "     * @param person"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    public void addPastTransaction(Transaction person) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        versionedFinancialDatabase.addTransaction(person, versionedFinancialDatabase.getPastList());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        updateFilteredPastTransactionList(PREDICATE_SHOW_ALL_TRANSACTIONS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        indicateFinancialDatabaseChanged();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void updateTransaction(Transaction target, Transaction editedTransaction) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        requireAllNonNull(target, editedTransaction);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        versionedFinancialDatabase.updateTransaction(target, editedTransaction);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        indicateFinancialDatabaseChanged();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Transaction List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Transaction} backed by the internal list of"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * {@code versionedFinancialDatabase}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public ObservableList\u003cTransaction\u003e getFilteredTransactionList() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredTransactions);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "     * Does the same thing as getFilteredTransactionList() but for pastTransactions."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    public ObservableList\u003cTransaction\u003e getFilteredPastTransactionList() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        return FXCollections.unmodifiableObservableList((filteredPastTransactions));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void updateFilteredTransactionList(Predicate\u003cTransaction\u003e predicate) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        filteredTransactions.setPredicate(predicate);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "     * Does the same thing for updateFilteredTransactionList but for pastTransactions."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "     * @param predicate"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    public void updateFilteredPastTransactionList (Predicate\u003cTransaction\u003e predicate) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        filteredPastTransactions.setPredicate(predicate);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public boolean canUndoFinancialDatabase() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return versionedFinancialDatabase.canUndo();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public boolean canRedoFinancialDatabase() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return versionedFinancialDatabase.canRedo();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void undoFinancialDatabase() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        versionedFinancialDatabase.undo();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        indicateFinancialDatabaseChanged();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void redoFinancialDatabase() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        versionedFinancialDatabase.redo();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        indicateFinancialDatabaseChanged();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void commitFinancialDatabase() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        versionedFinancialDatabase.commit();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return versionedFinancialDatabase.equals(other.versionedFinancialDatabase)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                \u0026\u0026 filteredTransactions.equals(other.filteredTransactions);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 45,
      "julianc269": 3,
      "-": 107,
      "Bellaaarh": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyFinancialDatabase.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "public interface ReadOnlyFinancialDatabase {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Returns an unmodifiable view of the transactions list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * This list will not contain any duplicate transactions."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    ObservableList\u003cTransaction\u003e getTransactionList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "     * Returns an unmodifiable view of the past Transactions list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "     * This list will not contain any duplicate transactions."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    ObservableList\u003cTransaction\u003e getPastTransactionList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 5,
      "-": 12,
      "Bellaaarh": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private Path debtTrackerFilePath \u003d Paths.get(\"data\" , \"debttracker.xml\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(500, 500, 0, 0);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(double width, double height, int x, int y) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        guiSettings \u003d new GuiSettings(width, height, x, y);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public Path getDebtTrackerFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return debtTrackerFilePath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void setDebtTrackerFilePath(Path debtTrackerFilePath) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        this.debtTrackerFilePath \u003d debtTrackerFilePath;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(guiSettings, o.guiSettings)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                \u0026\u0026 Objects.equals(debtTrackerFilePath, o.debtTrackerFilePath);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return Objects.hash(guiSettings, debtTrackerFilePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings.toString());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + debtTrackerFilePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 8,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/model/VersionedFinancialDatabase.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": " * {@code FinancialDatabase} that keeps track of its own history."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "public class VersionedFinancialDatabase extends FinancialDatabase {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private final List\u003cReadOnlyFinancialDatabase\u003e addressBookStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public VersionedFinancialDatabase(ReadOnlyFinancialDatabase initialState) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        addressBookStateList.add(new FinancialDatabase(initialState));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Saves a copy of the current {@code FinancialDatabase} state at the end of the state list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Undone states are removed from the state list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        addressBookStateList.add(new FinancialDatabase(this));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStateList.subList(currentStatePointer + 1, addressBookStateList.size()).clear();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the address book to its previous state."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(addressBookStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the address book to its previously undone state."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(addressBookStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code undo()} has address book states to undo."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code redo()} has address book states to redo."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return currentStatePointer \u003c addressBookStateList.size() - 1;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        if (!(other instanceof VersionedFinancialDatabase)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        VersionedFinancialDatabase otherVersionedFinancialDatabase \u003d (VersionedFinancialDatabase) other;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return super.equals(otherVersionedFinancialDatabase)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                \u0026\u0026 addressBookStateList.equals(otherVersionedFinancialDatabase.addressBookStateList)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedFinancialDatabase.currentStatePointer;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            super(\"Current state pointer at start of addressBookState list, unable to undo.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            super(\"Current state pointer at end of addressBookState list, unable to redo.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 12,
      "-": 97
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Address.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s address in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "public class Address implements Comparable\u003cAddress\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADDRESS_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(ADDRESS_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public int compareTo(Address otherAddress) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return value.compareTo(otherAddress.value);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 5,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Email.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s email in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "public class Email implements Comparable\u003cEmail\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EMAIL_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(EMAIL_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public int compareTo(Email otherEmail) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return value.compareTo(otherEmail.value);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 5,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Name.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "public class Name implements Comparable\u003cName\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NAME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(NAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public int compareTo(Name otherName) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return fullName.compareTo(otherName.fullName);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 6,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/NameContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": " * Tests that a {@code Transaction}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cTransaction\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public boolean test(Transaction transaction) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(transaction.getPerson().getName().toString(),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                        keyword));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 6,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/NameContainsLettersPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "julianc269"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": " * Tests that a {@code Transaction} contains a {@code Person} matches any of the letters given."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "julianc269"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "public class NameContainsLettersPredicate implements Predicate\u003cTransaction\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    private final List\u003cString\u003e letters;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    public NameContainsLettersPredicate(List\u003cString\u003e letters) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        this.letters \u003d letters;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public boolean test(Transaction transaction) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        return letters.stream().anyMatch(input -\u003e makeRegex(input.toLowerCase(),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                transaction.getPerson().getName().toString().trim().toLowerCase()));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                || (other instanceof NameContainsLettersPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                \u0026\u0026 letters.equals(((NameContainsLettersPredicate) other).letters)); // state check"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "     * makeRegex converts String input to a regular expression (Regex)."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "     * @param input is the substring the user keys in"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "     * @param name is the name to check if it contains the substring input."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "     * @return true or false depending if the name contains the substring input."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    public boolean makeRegex(String input, String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        String regex1 \u003d \"(.*)\" + input + \"(.*)\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        Pattern pattern1 \u003d Pattern.compile(regex1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        Matcher matcher1 \u003d pattern1.matcher(name);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        boolean inMiddle \u003d matcher1.matches();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        return inMiddle;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 7,
      "julianc269": 12,
      "Bellaaarh": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "public class Person implements Comparable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Parameterized constructor that takes in a UniqueId argument"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone()) || otherPerson.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        builder.append(\" Name: \")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                .append(getName())"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public Person copyPerson() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return new Person(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public int compareTo(Person otherPerson) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        if (equals(otherPerson)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        if (name.compareTo(otherPerson.name) !\u003d 0) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            return name.compareTo(otherPerson.name);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        if (email.compareTo(otherPerson.email) !\u003d 0) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            return email.compareTo(otherPerson.email);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return phone.compareTo(otherPerson.phone);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 21,
      "weiqing-nic": 1,
      "julianc269": 1,
      "-": 98
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Phone.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s phone number in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "public class Phone implements Comparable\u003cPhone\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PHONE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(PHONE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        if (!(other instanceof Phone)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Phone phone \u003d (Phone) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return other \u003d\u003d this || value.equals(phone.value);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public int compareTo(Phone otherPhone) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return value.compareTo(otherPhone.value);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 10,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Photo.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import javax.imageio.ImageIO;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": " * Represent a photo object associated with each unique person involved in a transaction with the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "public class Photo {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static final String DEFAULT_PHOTO_PATH \u003d \"images/default_person.png\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_PHOTOFOLDER_NOT_SUCCESSFULLY_CREATED \u003d \"PhotoFolder created successfully\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private static final String DEFAULT_MESSAGE_PHOTO \u003d \"Filepath be less than 10MB and FilePath must be valid \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PHOTO_INITIAL_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int TENMB_SIZE \u003d 1048576;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SYSTEM_OPERATING_PATH \u003d getOperatingPath();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger LOGGER \u003d LogsCenter.getLogger(Photo.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "    private String photoPath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "    public Photo() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        this.photoPath \u003d DEFAULT_PHOTO_PATH;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "    public Photo(String path) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        requireNonNull(path);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        if (checkPath(path)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "            this.photoPath \u003d path;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            this.photoPath \u003d DEFAULT_PHOTO_PATH;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "    public Photo(String filePath, String newPhoto) throws IllegalValueException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        LOGGER.info(\"before photo\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        LOGGER.info(filePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        if (checkPath(filePath)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "            throw new IllegalValueException(DEFAULT_MESSAGE_PHOTO);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        //link to the path"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.photoPath \u003d SYSTEM_OPERATING_PATH + \"/\" + newPhoto + \".png\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "            makePhoto(filePath, newPhoto);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static boolean isValidPhoto(String path) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return checkPath(path);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Makes a {@code newPhoto} at the given {@code filePath} if it doesn\u0027t already exist."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "    public void makePhoto(String filePath, String newPhoto) throws FileNotFoundException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        String finalPath \u003d filePath;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        makePhotoFolder();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        LOGGER.info(\"makephoto\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        LOGGER.info(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        if (\"delete\".equals(filePath)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "            finalPath \u003d \"images/default_person.png\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "            finalPath \u003d \"/\" + filePath;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        File getImage \u003d new File(finalPath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String fileName \u003d SYSTEM_OPERATING_PATH + \"/\" + newPhoto + \".png\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        File pictureFinal \u003d new File(fileName);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        //if cannot get file object create an empty object"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        if (!pictureFinal.exists()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                boolean doesNamedFileExist \u003d pictureFinal.createNewFile();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                if (doesNamedFileExist) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "                    LOGGER.info(fileName + \" has been newly created\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "                    LOGGER.info(fileName + \" already exists\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "            Files.copy(getImage.toPath(), pictureFinal.toPath(), REPLACE_EXISTING);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "            this.photoPath \u003d pictureFinal.toPath().toString();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "            this.photoPath \u003d \"images/default_person.png\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Creates a folder holding the photo for a person"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "    public void makePhotoFolder() throws FileNotFoundException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        File locationFolder \u003d new File(SYSTEM_OPERATING_PATH);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        if (!locationFolder.exists()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            boolean isDirectoryCreated \u003d locationFolder.mkdir();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            if (isDirectoryCreated) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "                LOGGER.info(\"Folder containing the photo has been successfully created\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new FileNotFoundException(MESSAGE_PHOTOFOLDER_NOT_SUCCESSFULLY_CREATED);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Check the Operating System that the user\u0027s local machine is running"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "    public static String getOperatingPath() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        String oSystem \u003d System.getProperty(\"os.name\").toLowerCase();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        //mac"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        if (oSystem.contains(\"mac\") || oSystem.contains(\"nux\")) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "            return System.getProperty(\"user.home\") + \"/Documents/PhotoFolder\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "            return System.getenv(\"APPDATA\") + \"/PhotoFolder\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "     * Get Operating System of User"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "    private static String getOsName() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        return System.getProperty(\"os.name\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Returns the path of the image file within the directory structure."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "    public String getPicturePath() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        return this.photoPath;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Checks whether the path of the given picture meets certain criteria."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private static boolean checkPath(String path) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        if (path.equals(DEFAULT_PHOTO_PATH)) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        if (path.matches(PHOTO_INITIAL_REGEX)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "            return checkPicture(path);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Checks whether the picture exists in the given path."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private static boolean checkPicture(String path) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        File pictureNew \u003d new File(path);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            if (ImageIO.read(pictureNew) \u003d\u003d null) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        } catch (IOException error) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        return pictureNew.length() \u003c\u003d TENMB_SIZE;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "                || (other instanceof Photo // instanceof handles nulls"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "                \u0026\u0026 this.photoPath.equals(((Photo) other).photoPath));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 46,
      "weiqing-nic": 126,
      "xiaoyeong": 1,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniqueId.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "julianc269"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "julianc269"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "julianc269"
        },
        "content": " * Represents a Person\u0027s phone number in the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "julianc269"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidUniqueId(String)}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "julianc269"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "julianc269"
        },
        "content": "public class UniqueId {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static final String MESSAGE_TRANSACTION_PERSONUID_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            \"Id should contain only numbers\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public static final String UNIQUEID_VALIDATION_REGEX \u003d \"\\\\d+\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * Constructs a {@code UniqueId}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * @param id A valid id."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public UniqueId(String id) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        requireNonNull(id);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        checkArgument(isValidUniqueId(id), MESSAGE_TRANSACTION_PERSONUID_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        value \u003d id;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public UniqueId() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        int targetStringLength \u003d 255;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        Random random \u003d new Random();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        StringBuilder buffer \u003d new StringBuilder(targetStringLength);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        for (int i \u003d 0; i \u003c targetStringLength; i++) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "            char randomLimitedInt;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "            int randomNumber \u003d random.nextInt(52);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "            if (randomNumber \u003c\u003d 25) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "                randomLimitedInt \u003d (char) (\u0027A\u0027 + randomNumber);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "                randomLimitedInt \u003d (char) (\u0027a\u0027 + randomNumber - 26);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "            buffer.append(randomLimitedInt);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        String generatedString \u003d buffer.toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        value \u003d generatedString;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * Returns true if a given string is a valid unique id."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public static boolean isValidUniqueId(String test) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        return test.matches(UNIQUEID_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                || (other instanceof UniqueId // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                \u0026\u0026 value.equals(((UniqueId) other).value)); // state check"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "julianc269"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 4,
      "weiqing-nic": 17,
      "julianc269": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/exceptions/PersonNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": " * Signals that the operation is unable to find the specified transaction."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 1,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/todolist/ToDoList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "package seedu.address.model.todolist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": " * Contains a list of actions that the user may wish to take related to their transactions."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "public class ToDoList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    private List\u003cString\u003e list;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    public ToDoList() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        this.list \u003d new ArrayList\u003c\u003e(list);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        int index \u003d this.list.size() - 1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "     * Appends a user input String to the end of the list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    public void add(String element) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        list.add(element);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "     * Removes a specific String that user initially input."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "     * @param index"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void delete(int index) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        list.remove(index);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 3,
      "Bellaaarh": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/Amount.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "import java.nio.charset.Charset;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import java.util.Currency;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": " * Represents the amount of money loaned/owed to end user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAmount(String)}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "public class Amount implements Comparable\u003cAmount\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static final Set\u003cCurrency\u003e CURRENCIES \u003d Currency.getAvailableCurrencies();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static final String MESSAGE_TRANSACTION_AMOUNT_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            \"The transaction amount must be real number rounded to two decimal places, \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                    + \"prefixed by a three letter currency code\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static final String TRANSACTION_AMOUNT_VALIDATION_REGEX \u003d \"\\\\w{3} \\\\d+.\\\\d{2}\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static final Amount DEFAULT_AMOUNT \u003d new Amount();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private Currency currency;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private InterestScheme interestScheme;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private InterestRate interestRate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public Amount() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        currency \u003d Currency.getInstance(\"SGD\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        value \u003d \"0.00\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Constructs an {@code TransactionAmount}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * @param amount A valid transaction amount."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public Amount(String amount) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        requireNonNull(amount);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        checkArgument(isValidAmount(amount), MESSAGE_TRANSACTION_AMOUNT_CONSTRAINTS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        currency \u003d Currency.getInstance(amount.split(\"\\\\s+\")[0]);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        value \u003d amount.split(\"\\\\s+\")[1];"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public Double getValue() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return Double.parseDouble(value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Returns true if the given string represents a valid transaction amount."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * @param test the command line argument to be parsed"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static boolean isValidAmount(String test) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return test.matches(TRANSACTION_AMOUNT_VALIDATION_REGEX) \u0026\u0026 checkCurrency(test);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Compares the currency code of the string {@code test} with the codes of the existing currencies."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * @param test the command line argument to be parsed"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private static boolean checkCurrency(String test) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        String testCurrencyCode \u003d test.split(\" \")[0].toUpperCase();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        for (Currency currency: CURRENCIES) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            if (currency.getCurrencyCode().equals(testCurrencyCode)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Calculates interest based on interestScheme and interestRate inputted by the user."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static Amount calculateInterest(Amount principalAmount, String interestScheme, String interestRate,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                                           long durationInMonths) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        int monthsInAYear \u003d 12;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Amount convertedAmount \u003d new Amount();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        convertedAmount.interestScheme \u003d new InterestScheme(interestScheme);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        convertedAmount.interestRate \u003d new InterestRate(interestRate);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        double originalValue \u003d principalAmount.getValue();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        double calculatedValue;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        if (convertedAmount.interestScheme.getValue().equals(\"simple\")) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            calculatedValue \u003d originalValue"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                    + originalValue * convertedAmount.interestRate.getValue() * durationInMonths;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            convertedAmount.value \u003d String.format(\"%.2f\", calculatedValue);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            calculatedValue \u003d originalValue * Math.pow(1.0 + convertedAmount.interestRate.getValue() / monthsInAYear,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                            durationInMonths);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            convertedAmount.value \u003d String.format(\"%.2f\", calculatedValue);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return convertedAmount;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "     * Handles the conversion of foreign currency to Singaporean currency."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "     * @param amount the amount in a given currency which is to be converted to Singaporean currency"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static Amount convertCurrency(Amount amount) throws IOException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        if (!Amount.isValidAmount(amount.toString())) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Currency currencyCode \u003d amount.currency;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        if (currencyCode.toString().equals(\"SGD\")) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            return amount;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        String currencyConverterFilePath \u003d String.format("
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "                \"http://free.currencyconverterapi.com/api/v5/convert?q\u003d%s_SGD\u0026compact\u003dy\", currencyCode);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        ObjectMapper mapper \u003d new ObjectMapper();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        InputStream is \u003d new URL(currencyConverterFilePath).openStream();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        BufferedReader rd \u003d new BufferedReader(new InputStreamReader(is, Charset.forName(\"UTF-8\")));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        String jsonText \u003d rd.readLine();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        Map\u003cString, Map\u003cString, Number\u003e\u003e map \u003d mapper.readValue(jsonText, Map.class);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        double result \u003d 1.00 * map.get(String.format(\"%s_SGD\", currencyCode)).get(\"val\").doubleValue();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        result *\u003d amount.getValue();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        return new Amount(String.format(\"SGD %.2f\", result));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return currency + \" \" + value;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        if (!(other instanceof Amount)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        Amount amount \u003d (Amount) other;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        return other \u003d\u003d this || value.equals(amount.value);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public int compareTo(Amount otherAmount) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return getValue().compareTo(otherAmount.getValue());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 120,
      "xiaoyeong": 22,
      "julianc269": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/AmountBoundsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "julianc269"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "julianc269"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "julianc269"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "julianc269"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "julianc269"
        },
        "content": "public class AmountBoundsPredicate implements Predicate\u003cTransaction\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * Represents the type of bound"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public enum BoundType { MIN, MAX }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    private final Amount amount;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    private final BoundType type;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public AmountBoundsPredicate(Amount amount, BoundType type) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public boolean test(Transaction transaction) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        case MIN:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            return amount.compareTo(transaction.getAmount()) \u003c\u003d 0;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        case MAX:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            return amount.compareTo(transaction.getAmount()) \u003e\u003d 0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                || (other instanceof AmountBoundsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                \u0026\u0026 amount.equals(((AmountBoundsPredicate) other).amount))"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                \u0026\u0026 type.equals(((AmountBoundsPredicate) other).type); // state check"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "julianc269"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 2,
      "julianc269": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/Deadline.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import com.sun.istack.NotNull;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": " * Represents the deadline by which payment has to be made."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": " * Guarantees: the deadline is valid present/future date in the Gregorian calendar."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "public class Deadline implements Comparable\u003cDeadline\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static final String MESSAGE_TRANSACTION_DEADLINE_INCORRECT_FORMAT \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            \"The transaction deadline must follow the DD/MM/YYYY format\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static final String MESSAGE_TRANSACTION_DEADLINE_HAS_PASSED \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            \"The transaction deadline must be a date in the present or the future\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static final String TRANSACTION_DEADLINE_VALIDATION_REGEX \u003d \"\\\\d{1,2}/\\\\d{1,2}/\\\\d{4}\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static final String CURRENT_DATE \u003d LocalDate.now().format(DateTimeFormatter.ofPattern(\"dd/MM/YYYY\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Constructs an {@code Deadline}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public Deadline(String deadline) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        requireNonNull(deadline);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        checkArgument(matchesDateFormat(deadline), MESSAGE_TRANSACTION_DEADLINE_INCORRECT_FORMAT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        checkDateInFuture(deadline);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        value \u003d deadline;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public String getValue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * Returns true if {@code test} is a valid transaction deadline in the future."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static boolean matchesDateFormat(String test) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return test.matches(TRANSACTION_DEADLINE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Checks whether the string {@test} represents a valid date according to the Gregorian Calendar ."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static void checkDateInFuture(String test) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        LocalDate givenDate \u003d convertToDate(test);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        if (givenDate.isBefore(convertToDate(Deadline.CURRENT_DATE))) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            throw new DateTimeException(MESSAGE_TRANSACTION_DEADLINE_HAS_PASSED);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        if (!(other instanceof Deadline)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        Deadline deadline \u003d (Deadline) other;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        return other \u003d\u003d this || value.equals(deadline.value);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Converts a Deadline object to a LocalDateTime object."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private static LocalDate convertToDate(String test) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        int dayOfMonth \u003d Integer.parseInt(test.split(\"/\")[0]);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        int month \u003d Integer.parseInt(test.split(\"/\")[1]);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        int year \u003d Integer.parseInt(test.split(\"/\")[2]);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return LocalDate.of(year, month, dayOfMonth);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private long getDifference(Deadline other, String timeUnit) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        LocalDate currentDate \u003d convertToDate(value);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        LocalDate otherDate \u003d convertToDate(other.value);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        long result;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        switch (timeUnit) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        case \"months\":"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            result \u003d currentDate.until(otherDate, ChronoUnit.MONTHS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        case \"days\":"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            result \u003d currentDate.until(otherDate, ChronoUnit.DAYS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        case \"years\":"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            result \u003d currentDate.until(otherDate, ChronoUnit.YEARS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            result \u003d 0;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public long getMonthsDifference() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Deadline todayDeadline \u003d new Deadline(Deadline.CURRENT_DATE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return todayDeadline.getMonthsDifference(this);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private long getMonthsDifference(Deadline other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return getDifference(other, \"months\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private long getDaysDifference(Deadline other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return getDifference(other, \"days\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private long getYearsDifference(Deadline other) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return getDifference(other, \"years\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Compares two deadlines in chronological order."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "     * @param other the other deadline to compare."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public int compareTo(@NotNull Deadline other) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        if (getYearsDifference(other) \u003e 0 || getMonthsDifference(other) \u003e 0 || getDaysDifference(other) \u003e 0) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        } else if (getYearsDifference(other) \u003d\u003d 0 \u0026\u0026 getMonthsDifference(other) \u003d\u003d 0 \u0026\u0026 getDaysDifference(other) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 124,
      "xiaoyeong": 7,
      "julianc269": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/DeadlineBoundsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "julianc269"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "julianc269"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "julianc269"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "julianc269"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "julianc269"
        },
        "content": "public class DeadlineBoundsPredicate implements Predicate\u003cTransaction\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * Represent the type of bound"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public enum BoundType { EARLIEST, LATEST }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    private final Deadline deadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    private final BoundType type;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public DeadlineBoundsPredicate(Deadline deadline, BoundType type) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public boolean test(Transaction transaction) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        case EARLIEST:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            return deadline.compareTo(transaction.getDeadline()) \u003c\u003d 0;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        case LATEST:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            return deadline.compareTo(transaction.getDeadline()) \u003e\u003d 0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                || (other instanceof DeadlineBoundsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                \u0026\u0026 deadline.equals(((DeadlineBoundsPredicate) other).deadline))"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                \u0026\u0026 type.equals(((DeadlineBoundsPredicate) other).type); // state check"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "julianc269"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "julianc269": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/DeadlineContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": " * Tests that a {@code Transaction}\u0027s {@code Date} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "public class DeadlineContainsKeywordsPredicate implements Predicate\u003cTransaction\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    public DeadlineContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    public boolean test(Transaction transaction) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(transaction.getDeadline().toString(), keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "                || (other instanceof DeadlineContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "                \u0026\u0026 keywords.equals(((DeadlineContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xiaoyeong": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/FieldContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.logic.parser.FieldType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "julianc269"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "julianc269"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "julianc269"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "public class FieldContainsKeywordsPredicate implements Predicate\u003cTransaction\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    private final FieldType type;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public FieldContainsKeywordsPredicate(FieldType type, List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public boolean test(Transaction transaction) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Person person \u003d transaction.getPerson();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        case Name:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            return keywords.stream()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                    .anyMatch(keyword -\u003e StringUtil.containsSubstringIgnoreCase(person.getName().toString(), keyword));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        case Email:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            return keywords.stream()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                    .anyMatch(keyword -\u003e StringUtil.containsSubstringIgnoreCase(person.getEmail().value, keyword));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        case Phone:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            return keywords.stream()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                    .anyMatch(keyword -\u003e StringUtil.containsSubstringIgnoreCase(person.getPhone().value, keyword));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        case Address:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            return keywords.stream()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                    .anyMatch(keyword -\u003e StringUtil.containsSubstringIgnoreCase(person.getAddress().value, keyword));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        case Deadline:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            return keywords.stream()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                    .anyMatch(keyword -\u003e StringUtil.containsSubstringIgnoreCase(transaction.getDeadline().value,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                            keyword));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        case Amount:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            return keywords.stream()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                    .anyMatch(keyword -\u003e StringUtil.containsSubstringIgnoreCase(transaction.getAmount().toString(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                            keyword));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        case Type:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            return keywords.stream()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                    .anyMatch(keyword -\u003e StringUtil.containsSubstringIgnoreCase(transaction.getType().value,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                            keyword));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        case Tag:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            return keywords.stream()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                    .anyMatch(keyword -\u003e transaction.getPerson().getTags().stream()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                            .anyMatch(tag -\u003e StringUtil.containsSubstringIgnoreCase(tag.tagName, keyword)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                || (other instanceof FieldContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                \u0026\u0026 keywords.equals(((FieldContainsKeywordsPredicate) other).keywords))"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                \u0026\u0026 type.equals(((FieldContainsKeywordsPredicate) other).type); // state check"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "julianc269"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 8,
      "julianc269": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/InterestRate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": " * Represents the rate of interest calculated on each transaction."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "public class InterestRate {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static final String MESSAGE_INTEREST_RATE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            \"Interest rate should be expressed as a percentage \\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            + \"with the value rounded to two decimal places.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static final String TRANSACTION_INTEREST_RATE_VALIDATION_REGEX \u003d \"\\\\d{1}.\\\\d{2}%\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public final double value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public InterestRate(String interestRate) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        requireNonNull(interestRate);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        checkArgument(isValidInterestRate(interestRate), MESSAGE_INTEREST_RATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        this.value \u003d parseRate(interestRate);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public double getValue() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return value * 0.01;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Returns true if the given string contains valid parameters for interest calculation."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * @param test the command line argument to be parsed"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static boolean isValidInterestRate(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return test.matches(TRANSACTION_INTEREST_RATE_VALIDATION_REGEX) \u0026\u0026 isBelowCap(test);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private static double parseRate(String interestRate) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return Double.parseDouble(interestRate.replace(\"%\", \"\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private static boolean isBelowCap(String test) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        double rate \u003d parseRate(test);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return rate \u003c\u003d 4;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return Objects.hash(value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        if (!(other instanceof InterestRate)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        InterestRate interestRate \u003d (InterestRate) other;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return other \u003d\u003d this || (value \u003d\u003d interestRate.value);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return \"\" + value + \"%\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/InterestScheme.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": " * Contains constants for two schemes of interest calculation: simple and compound"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "public class InterestScheme {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Represent two schemes for interest calculation."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public enum SchemeTypes {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Simple(\"simple\"), Compound(\"compound\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        private final String scheme;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        SchemeTypes(String scheme) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            this.scheme \u003d scheme;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        public String getScheme() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            return scheme;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static final String MESSAGE_INTEREST_SCHEME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            \"Interest scheme must be either simple or compound\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static final String TRANSACTION_INTEREST_SCHEME_VALIDATION_REGEX \u003d \"(simple|compound)\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public final SchemeTypes value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public InterestScheme(String interestScheme) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        requireNonNull(interestScheme);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        checkArgument(isValidInterestScheme(interestScheme), MESSAGE_INTEREST_SCHEME_CONSTRAINTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        if (interestScheme.equalsIgnoreCase(\"simple\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            this.value \u003d SchemeTypes.Simple;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            this.value \u003d SchemeTypes.Compound;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public String getValue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return value.getScheme();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Returns true if the given string contains valid parameters for interest calculation."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * @param test the command line argument to be parsed"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static boolean isValidInterestScheme(String test) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return test.toLowerCase().matches(TRANSACTION_INTEREST_SCHEME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        if (!(other instanceof InterestScheme)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        InterestScheme interestScheme \u003d (InterestScheme) other;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return other \u003d\u003d this || (value \u003d\u003d interestScheme.value);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return getValue();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/MultiFieldPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "julianc269"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": " * Tests that a {@code Transaction}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "julianc269"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "public class MultiFieldPredicate implements Predicate\u003cTransaction\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    private final List\u003cPredicate\u003cTransaction\u003e\u003e predicates;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * Represents the operation type"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public enum OperatorType { AND, OR }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    private final OperatorType opType;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public MultiFieldPredicate(List\u003cPredicate\u003cTransaction\u003e\u003e predicates, OperatorType type) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        this.predicates \u003d predicates;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        this.opType \u003d type;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public boolean test(Transaction person) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        boolean b;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        if (opType \u003d\u003d OperatorType.AND) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            b \u003d true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            for (int i \u003d 0; i \u003c predicates.size(); i++) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                b \u003d b \u0026\u0026 predicates.get(i).test(person);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            b \u003d false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            for (int i \u003d 0; i \u003c predicates.size(); i++) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                b \u003d b || predicates.get(i).test(person);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        return b;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                || (other instanceof MultiFieldPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                \u0026\u0026 predicates.equals(((MultiFieldPredicate) other).predicates)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                \u0026\u0026 opType.equals(((MultiFieldPredicate) other).opType)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                ); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "julianc269"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 4,
      "julianc269": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/Transaction.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "import seedu.address.model.person.Photo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": " * {@code Transaction} class encapsulates a transaction added to the financial database"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "public class Transaction {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private final Type type;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private final Person person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private final Deadline deadline;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private Amount amount;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "    private Photo photo;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private InterestScheme interestScheme;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private InterestRate interestRate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Represents a transaction with non null fields {@code type}, {@code amount}, {@code deadline}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * and {@code transaction}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * @param type type of transaction, either a loan or a debt"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * @param amount the amount lent/owed by creditor/debtor respectively"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * @param deadline the date on which the payment is to be made"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * @param person the transactor loaning/borrowing the {@code amount}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "    public Transaction(Type type, Amount amount, Deadline deadline, Person person, Photo photo) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        this.photo \u003d photo;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public Transaction(Type type, Amount amount, Deadline deadline, Person person) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        this.photo \u003d new Photo();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "    public Transaction(Transaction obj) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        this(obj.getType(), obj.getAmount(), obj.getDeadline(), obj.getPerson(), obj.getPhoto());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static Transaction copy(Transaction other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return new Transaction(other.type, other.amount, other.deadline, other.person, other.photo);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public Type getType() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public Amount getAmount() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void setAmount(Amount amount) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public Deadline getDeadline() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public Person getPerson() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return person;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public Photo getPhoto() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return photo;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "    public void setPhoto(String photoPath) throws IllegalValueException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        Photo previousPhoto \u003d this.photo;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "            this.photo \u003d new Photo(photoPath, photoUniqueId());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "            //if could not change photo setback to the previous photo"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "            this.photo \u003d previousPhoto;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "            throw new IllegalValueException(\"Cannot set new photo\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        logger.info(\"passsetphoto\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Generates a unique id for each photo."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "    public String photoUniqueId() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        int targetStringLength \u003d 15;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        String value;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        Random random \u003d new Random();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        StringBuilder buffer \u003d new StringBuilder(targetStringLength);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        for (int i \u003d 0; i \u003c targetStringLength; i++) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "            char randomLimitedInt;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "            int randomNumber \u003d random.nextInt(52);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "            if (randomNumber \u003c\u003d 25) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "                randomLimitedInt \u003d (char) (\u0027A\u0027 + randomNumber);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "                randomLimitedInt \u003d (char) (\u0027a\u0027 + randomNumber - 26);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "            buffer.append(randomLimitedInt);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return buffer.toString();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return Objects.hash(type, amount, deadline, person);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        if (!(other instanceof Transaction)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Transaction transaction \u003d (Transaction) other;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return other \u003d\u003d this || (type.equals(transaction.type)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                \u0026\u0026 amount.equals(transaction.amount)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                \u0026\u0026 person.equals(transaction.person)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                \u0026\u0026 deadline.equals(transaction.deadline));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        builder.append(\"\\nPerson Details: \")"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "               .append(person.toString())"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "               .append(\"\\nTransaction Details: \")"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "               .append(\" Type: \")"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "               .append(type)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "               .append(\" Amount: \")"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "               .append(amount)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "               .append(\" Deadline: \")"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "               .append(deadline);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 96,
      "weiqing-nic": 49,
      "julianc269": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/Type.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": " * Represents the type of transaction recorded in the database."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidType(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "public class Type implements Comparable\u003cType\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static final String MESSAGE_TRANSACTION_TYPE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            \"The transaction must be either a loan/debt\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Constructs an {@code Type}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * @param type A valid transaction type."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public Type(String type) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        requireNonNull(type);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        checkArgument(isValidType(type), MESSAGE_TRANSACTION_TYPE_CONSTRAINTS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        value \u003d type.toLowerCase();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Returns true if a given string is a valid transaction amount."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * @param test the command line argument to be parsed"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static boolean isValidType(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        String lower \u003d test.toLowerCase();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return lower.equals(\"loan\") || lower.equals(\"debt\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return \"\" + value;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        if (!(other instanceof Type)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Type type \u003d (Type) other;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        return other \u003d\u003d this || value.equalsIgnoreCase(type.value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public int compareTo(Type otherType) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return value.compareTo(otherType.value);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 59,
      "xiaoyeong": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/UniqueTransactionList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.exceptions.DuplicateTransactionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.exceptions.TransactionNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": " * A list of transactions that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": " * A Transaction is considered unique by comparing using {@code Transaction#isSameTransaction(Transaction)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": " * As such, adding and updating of transactions uses Transaction#isSameTransaction(Transaction) for equality"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": " * so as to ensure that the transaction being added or updated is unique in terms of identity in the"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": " * UniqueTransactionList. However, the removal of a transaction uses Transaction#equals(Object) so"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": " * as to ensure that the transaction with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": " * @see Transaction#equals"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "public class UniqueTransactionList implements Iterable\u003cTransaction\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private final ObservableList\u003cTransaction\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Returns true if the list contains an equivalent Transaction as the given argument."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public boolean contains(Transaction toCheck) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Adds a Transaction to the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * The Transaction must not already exist in the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void add(Transaction toAdd) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            throw new DuplicateTransactionException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Replaces the Transaction {@code target} in the list with {@code editedTransaction}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * {@code editedTransaction} must not be the same as another existing transaction in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void setTransaction(Transaction target, Transaction editedTransaction) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        requireAllNonNull(target, editedTransaction);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            throw new TransactionNotFoundException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        if (!target.equals(editedTransaction) \u0026\u0026 contains(editedTransaction)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            throw new DuplicateTransactionException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        internalList.set(index, editedTransaction);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Removes the equivalent Transaction from the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * The Transaction must exist in the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void remove(Transaction toRemove) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            throw new TransactionNotFoundException();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void setTransactions(UniqueTransactionList replacement) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Replaces the contents of this list with {@code transactions}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * {@code transactions} must not contain duplicate transactions."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void setTransactions(List\u003cTransaction\u003e transactions) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        requireAllNonNull(transactions);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        if (!transactionsAreUnique(transactions)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            throw new DuplicateTransactionException();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        internalList.setAll(transactions);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public ObservableList\u003cTransaction\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public Iterator\u003cTransaction\u003e iterator() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                || (other instanceof UniqueTransactionList // instanceof handles nulls"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueTransactionList) other).internalList));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Returns true if {@code transactions} contains only unique Transactions."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private boolean transactionsAreUnique(List\u003cTransaction\u003e transactions) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        for (int i \u003d 0; i \u003c transactions.size() - 1; i++) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            for (int j \u003d i + 1; j \u003c transactions.size(); j++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                if (transactions.get(i).equals(transactions.get(j))) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 136
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/exceptions/DuplicateTransactionException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "package seedu.address.model.transaction.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "public class DuplicateTransactionException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public DuplicateTransactionException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        super(\"Operation would result in duplicate transactions\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/exceptions/TransactionNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "package seedu.address.model.transaction.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": " * Signals that the operation is unable to find the specified transaction."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "public class TransactionNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public TransactionNotFoundException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        super(\"Transaction does not exist in the database\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.model.FinancialDatabase;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.model.ReadOnlyFinancialDatabase;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.Deadline;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.model.transaction.Type;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": " * Contains utility methods for populating {@code DebtTracker} with sample data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static seedu.address.model.transaction.Transaction[] getSampleTransactions() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return new seedu.address.model.transaction.Transaction[]{"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            new Transaction(new Type(\"debt\"), new Amount(\"SGD 33.00\"), new Deadline(\"15/12/2018\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                    new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                            new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                            getTagSet(\"friends\"))),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            new Transaction(new Type(\"loan\"), new Amount(\"USD 55.50\"), new Deadline(\"17/11/2018\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                    new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                            new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                            getTagSet(\"colleagues\", \"friends\"))),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            new Transaction(new Type(\"debt\"), new Amount(\"AUD 46.80\"), new Deadline(\"15/12/2018\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                    new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                            new Email(\"charlotte@example.com\"), new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                            getTagSet(\"neighbours\"))),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            new Transaction(new Type(\"loan\"), new Amount(\"MYR 155.50\"), new Deadline(\"17/11/2018\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                    new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                            new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                            getTagSet(\"family\"))),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            new Transaction(new Type(\"debt\"), new Amount(\"KRW 378.50\"), new Deadline(\"15/12/2018\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                    new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                            new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                            getTagSet(\"classmates\"))),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            new Transaction(new Type(\"loan\"), new Amount(\"IDR 1028.90\"), new Deadline(\"17/11/2018\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                    new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                            new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                            getTagSet(\"colleagues\")))"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public static ReadOnlyFinancialDatabase getSampleFinancialDatabase() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        FinancialDatabase sampleFd \u003d new FinancialDatabase();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        for (seedu.address.model.transaction.Transaction sampleTransaction : getSampleTransactions()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            sampleFd.addTransaction(sampleTransaction, sampleFd.getCurrentList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        return sampleFd;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 28,
      "julianc269": 9,
      "-": 32,
      "Bellaaarh": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/FinancialDatabaseStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "julianc269"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.model.ReadOnlyFinancialDatabase;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "julianc269"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "julianc269"
        },
        "content": " * Represents a storage for {@link seedu.address.model.FinancialDatabase}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "julianc269"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "julianc269"
        },
        "content": "public interface FinancialDatabaseStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    Path getFinancialDatabaseFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * Returns AddressBook data as a {@link seedu.address.model.ReadOnlyFinancialDatabase}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    Optional\u003cReadOnlyFinancialDatabase\u003e readFinancialDatabase()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    Optional\u003cReadOnlyFinancialDatabase\u003e readFinancialDatabase(Path filePath)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * Saves the given {@link ReadOnlyFinancialDatabase} to the storage."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * @param financialDatabase cannot be null."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    void saveFinancialDatabase(ReadOnlyFinancialDatabase financialDatabase) throws IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * @see #saveFinancialDatabase(ReadOnlyFinancialDatabase)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    void saveFinancialDatabase(ReadOnlyFinancialDatabase financialDatabase, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "julianc269"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 4,
      "julianc269": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.commons.events.model.FinancialDatabaseChangedEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.model.ReadOnlyFinancialDatabase;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "julianc269"
        },
        "content": "public interface Storage extends FinancialDatabaseStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    Path getFinancialDatabaseFilePath();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    Optional\u003cReadOnlyFinancialDatabase\u003e readFinancialDatabase() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    void saveFinancialDatabase(ReadOnlyFinancialDatabase financialDatabase) throws IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current version of the Address Book to the hard disk."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Creates the data file if it is missing."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    void handleFinancialDatabaseChangedEvent(FinancialDatabaseChangedEvent abce);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "julianc269": 7,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.commons.events.model.FinancialDatabaseChangedEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.model.ReadOnlyFinancialDatabase;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager extends ComponentManager implements Storage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    private FinancialDatabaseStorage financialDatabaseStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public StorageManager(FinancialDatabaseStorage financialDatabaseStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        this.financialDatabaseStorage \u003d financialDatabaseStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Financial Database methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public Path getFinancialDatabaseFilePath() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        return financialDatabaseStorage.getFinancialDatabaseFilePath();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public Optional\u003cReadOnlyFinancialDatabase\u003e readFinancialDatabase() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        return readFinancialDatabase(financialDatabaseStorage.getFinancialDatabaseFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public Optional\u003cReadOnlyFinancialDatabase\u003e readFinancialDatabase(Path filePath)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        return financialDatabaseStorage.readFinancialDatabase(filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public void saveFinancialDatabase(ReadOnlyFinancialDatabase financialDatabase) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        saveFinancialDatabase(financialDatabase, financialDatabaseStorage.getFinancialDatabaseFilePath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public void saveFinancialDatabase(ReadOnlyFinancialDatabase financialDatabase, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        financialDatabaseStorage.saveFinancialDatabase(financialDatabase, filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public void handleFinancialDatabaseChangedEvent(FinancialDatabaseChangedEvent event) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            saveFinancialDatabase(event.data);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new DataSavingExceptionEvent(e));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 2,
      "julianc269": 17,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedTag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlValue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly adapted version of the Tag."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedTag {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlValue"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an XmlAdaptedTag."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTag() {}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code XmlAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given Tag into this class for JAXB use."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly adapted tag object into the model\u0027s Tag object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted transaction"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlAdaptedTag)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.equals(((XmlAdaptedTag) other).tagName);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 1,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedTransaction.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "julianc269"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.person.Photo;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.Deadline;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.Type;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "julianc269"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "julianc269"
        },
        "content": " * JAXB-friendly version of the Person."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "julianc269"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "julianc269"
        },
        "content": "public class XmlAdaptedTransaction {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Transaction\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    private String amount;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    private String type;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private String deadline;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private String phone;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private String email;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private String address;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "    private String photo;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Constructs an XmlAdaptedTransaction."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public XmlAdaptedTransaction() {}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Constructs an {@code XmlAdaptedTransaction} with the given transaction details."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public XmlAdaptedTransaction(String type, String amount, String deadline, String name, String phone, String email,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                                 String address, List\u003cXmlAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * Converts a given Person into this class for JAXB use."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedTransaction"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public XmlAdaptedTransaction(seedu.address.model.transaction.Transaction source) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        name \u003d source.getPerson().getName().toString();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        email \u003d source.getPerson().getEmail().value;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        phone \u003d source.getPerson().getPhone().value;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        address \u003d source.getPerson().getAddress().value;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        tagged \u003d source.getPerson().getTags()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        amount \u003d source.getAmount().toString();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        type \u003d source.getType().value;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        deadline \u003d source.getDeadline().value;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        photo \u003d source.getPhoto().getPicturePath();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Converts this jaxb-friendly adapted transaction object into the model\u0027s Transaction object."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted transaction"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public seedu.address.model.transaction.Transaction toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        for (XmlAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                    Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                    Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                    Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                    Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        if (amount \u003d\u003d null) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                    Amount.class.getSimpleName()));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        if (!Amount.isValidAmount(amount)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            throw new IllegalValueException(Amount.MESSAGE_TRANSACTION_AMOUNT_CONSTRAINTS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        final Amount modelAmount \u003d new Amount(amount);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        if (type \u003d\u003d null) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                    Type.class.getSimpleName()));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        if (!Type.isValidType(type)) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            throw new IllegalValueException(Type.MESSAGE_TRANSACTION_TYPE_CONSTRAINTS);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        final Type modelType \u003d new Type(type);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        if (deadline \u003d\u003d null) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                    Deadline.class.getSimpleName()));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        if (!Deadline.matchesDateFormat(deadline)) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            throw new IllegalValueException(Deadline.MESSAGE_TRANSACTION_DEADLINE_INCORRECT_FORMAT);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        final Deadline modelDeadline \u003d new Deadline(deadline);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        final Person modelPerson \u003d new Person(modelName, modelPhone, modelEmail, modelAddress, modelTags);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        int a \u003d 0;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        int b \u003d 0;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        Photo phot \u003d new Photo();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        if (this.photo \u003d\u003d null) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "            a \u003d 1;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "            b \u003d 1;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        if (a \u003d\u003d 0 \u0026\u0026 Photo.isValidPhoto(this.photo) \u0026\u0026 b \u003d\u003d 0) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "            phot \u003d new Photo(this.photo);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        return new Transaction(modelType, modelAmount, modelDeadline, modelPerson, phot);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        if (!(other instanceof XmlAdaptedTransaction)) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        XmlAdaptedTransaction otherTransaction \u003d (XmlAdaptedTransaction) other;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return Objects.equals(type, otherTransaction.type)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                \u0026\u0026 Objects.equals(amount, otherTransaction.amount)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                \u0026\u0026 Objects.equals(deadline, otherTransaction.deadline)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                \u0026\u0026 Objects.equals(name, otherTransaction.name)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                \u0026\u0026 Objects.equals(phone, otherTransaction.phone)"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                \u0026\u0026 Objects.equals(email, otherTransaction.email)"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                \u0026\u0026 Objects.equals(address, otherTransaction.address)"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "                \u0026\u0026 Objects.equals(photo, otherTransaction.photo)"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                \u0026\u0026 tagged.equals(otherTransaction.tagged);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        String tagss \u003d \"\";"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        for (XmlAdaptedTag tag:tagged) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                tagss +\u003d tag.toModelType().tagName + \";\";"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            } catch (IllegalValueException ex) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                ex.printStackTrace();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        return \"type: \" + type + \"\\n\""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                + \"amount: \" + amount + \"\\n\""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                + \"deadline: \" + deadline + \"\\n\""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                + \"name: \" + name + \"\\n\""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                + \"phone: \" + phone + \"\\n\""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                + \"email: \" + email + \"\\n\""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                + \"address: \" + address + \"\\n\""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                + \"tagged: \" + tagged;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "julianc269"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 123,
      "weiqing-nic": 17,
      "julianc269": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlFileStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores addressbook data in an XML file"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlFileStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given addressbook data to the specified file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public static void saveDataToFile(Path file, XmlSerializableFinancialDatabase financialDatabase)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            throws FileNotFoundException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            XmlUtil.saveDataToFile(file, financialDatabase);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Unexpected exception \" + e.getMessage(), e);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns address book in the file or an empty address book"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public static XmlSerializableFinancialDatabase loadDataFromSaveFile(Path file) throws DataConversionException,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                            FileNotFoundException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            return XmlUtil.getDataFromFile(file, XmlSerializableFinancialDatabase.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "julianc269": 4,
      "-": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlFinancialDatabaseStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.model.ReadOnlyFinancialDatabase;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access AddressBook data stored as an xml file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "julianc269"
        },
        "content": "public class XmlFinancialDatabaseStorage implements FinancialDatabaseStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(XmlFinancialDatabaseStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public XmlFinancialDatabaseStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public Path getFinancialDatabaseFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public Optional\u003cReadOnlyFinancialDatabase\u003e readFinancialDatabase() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        return readFinancialDatabase(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * Similar to {@link #readFinancialDatabase()}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public Optional\u003cReadOnlyFinancialDatabase\u003e readFinancialDatabase(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                                 FileNotFoundException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"AddressBook file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        XmlSerializableFinancialDatabase xmlAddressBook \u003d XmlFileStorage.loadDataFromSaveFile(filePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(xmlAddressBook.toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public void saveFinancialDatabase(ReadOnlyFinancialDatabase financialDatabase) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        saveFinancialDatabase(financialDatabase, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * Similar to {@link #saveFinancialDatabase(ReadOnlyFinancialDatabase)}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public void saveFinancialDatabase(ReadOnlyFinancialDatabase financialDatabase, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        requireNonNull(financialDatabase);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        XmlFileStorage.saveDataToFile(filePath, new XmlSerializableFinancialDatabase(financialDatabase));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "julianc269": 16,
      "-": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlSerializableFinancialDatabase.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.model.FinancialDatabase;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.model.ReadOnlyFinancialDatabase;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to XML format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "julianc269"
        },
        "content": "@XmlRootElement(name \u003d \"financialdatabase\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "julianc269"
        },
        "content": "public class XmlSerializableFinancialDatabase {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate transaction(s).\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    private List\u003cXmlAdaptedTransaction\u003e transactions;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    private List\u003cXmlAdaptedTransaction\u003e pastTransactions;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an empty XmlSerializableAddressBook."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * This empty constructor is required for marshalling."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public XmlSerializableFinancialDatabase() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        transactions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        pastTransactions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Conversion"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public XmlSerializableFinancialDatabase(ReadOnlyFinancialDatabase src) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        transactions.addAll(src.getTransactionList()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                               .stream()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                               .map(XmlAdaptedTransaction::new)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                               .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        pastTransactions.addAll(src.getPastTransactionList()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "                                   .stream()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "                                   .map(XmlAdaptedTransaction::new)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "                                   .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this addressbook into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * {@code XmlAdaptedTransaction}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public FinancialDatabase toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        FinancialDatabase financialDatabase \u003d new FinancialDatabase();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        for (XmlAdaptedTransaction t : transactions) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            Transaction transaction \u003d t.toModelType();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            if (financialDatabase.hasTransaction(transaction, financialDatabase.getCurrentList())) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            financialDatabase.addTransaction(transaction, financialDatabase.getCurrentList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        for (XmlAdaptedTransaction t : pastTransactions) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            Transaction pastTransaction \u003d t.toModelType();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            if (financialDatabase.hasTransaction(pastTransaction, financialDatabase.getPastList())) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            financialDatabase.addTransaction(pastTransaction, financialDatabase.getPastList());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        return financialDatabase;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        if (!(other instanceof XmlSerializableFinancialDatabase)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return transactions.equals(((XmlSerializableFinancialDatabase) other).transactions);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 7,
      "julianc269": 18,
      "-": 47,
      "Bellaaarh": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BrowserPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.commons.events.ui.RefreshCalendarEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.commons.events.ui.ShowCalendarEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.commons.events.ui.TransactionPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": " * The Browser Panel of the current transactions list of the App."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PAGE \u003d \"default.html\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SEARCH_PAGE_URL \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \"https://se-edu.github.io/addressbook-level4/DummySearchPage.html?name\u003d\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public static final String CALENDAR_PAGE_URL \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            \"https://calendar.google.com/calendar/b/1/embed?src\u003d\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"BrowserPanel.fxml\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    private boolean calendarShown;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanel() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // To prevent triggering events for typing inside the loaded Web page."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        loadDefaultPage();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private void loadTransactionPage(Transaction transaction) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        loadPage(SEARCH_PAGE_URL + transaction.getDeadline().value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        calendarShown \u003d false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private void loadCalendarPage(String id) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        loadPage(CALENDAR_PAGE_URL + id + \"\u0026ctz\u003dAsia/Singapore\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        calendarShown \u003d true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void loadPage(String url) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e browser.getEngine().load(url));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads a default HTML file with a background that matches the general theme."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadDefaultPage() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        URL defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPage(defaultPage.toExternalForm());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Frees resources allocated to the browser."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void freeResources() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        browser \u003d null;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private void handleTransactionPanelSelectionChangedEvent(TransactionPanelSelectionChangedEvent event) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        loadTransactionPage(event.getNewSelection());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    private void handleShowCalendarEvent(ShowCalendarEvent event) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        loadCalendarPage(event.getCalendarId());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    private void handleRefreshCalendarEvent(RefreshCalendarEvent event) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        if (calendarShown) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            loadCalendarPage(event.getCalendarId());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 11,
      "julianc269": 19,
      "-": 69,
      "Bellaaarh": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import seedu.address.commons.events.ui.SwitchTabsEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private TransactionListPanel transactionListPanel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    private PastTransactionBrowserPanel pastTransactionBrowserPanel;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane browserPlaceholder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    private StackPane pastTransactionBrowserPlaceholder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    private StackPane pastTransactionListPanelPlaceholder;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    private TabPane tabPaneReference;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        setTitle(config.getAppTitle());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(prefs);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel \u003d new BrowserPanel();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPlaceholder.getChildren().add(browserPanel.getRoot());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        pastTransactionBrowserPanel \u003d new PastTransactionBrowserPanel();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        pastTransactionBrowserPlaceholder.getChildren().add(pastTransactionBrowserPanel.getRoot());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        //past transactions UI"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        PastTransactionListPanel pastTransactionListPanel \u003d new PastTransactionListPanel(logic"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "                                                                .getFilteredPastTransactionList());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        pastTransactionListPanelPlaceholder.getChildren().add(pastTransactionListPanel.getRoot());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        transactionListPanel \u003d new TransactionListPanel(logic.getFilteredTransactionList());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(transactionListPanel.getRoot());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getDebtTrackerFilePath());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    void hide() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setTitle(String appTitle) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setTitle(appTitle);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on user preferences."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(UserPrefs prefs) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current size and the position of the main Window."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getCurrentGuiSetting() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    void releaseResources() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel.freeResources();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        pastTransactionBrowserPanel.freeResources();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        handleHelp();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    private void handleSwitchTabsEvent(SwitchTabsEvent event) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        tabPaneReference.getSelectionModel().select(event.tabIndex);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 4,
      "-": 195,
      "Bellaaarh": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PastTransactionBrowserPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import seedu.address.commons.events.ui.TransactionPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "public class PastTransactionBrowserPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    public static final String DEFAULT_PAGE \u003d \"default.html\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    public static final String SEARCH_PAGE_URL \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            \"https://se-edu.github.io/addressbook-level4/DummySearchPage.html?name\u003d\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    private static final String FXML \u003d \"PastTransactionBrowserPanel.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    private WebView pastTransactionBrowser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    public PastTransactionBrowserPanel() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        // To prevent triggering events for typing inside the loaded Web page."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        loadDefaultPage();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    private void loadTransactionPage(Transaction transaction) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        loadPage(SEARCH_PAGE_URL + transaction.getDeadline().value);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    public void loadPage(String url) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        Platform.runLater(() -\u003e pastTransactionBrowser.getEngine().load(url));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "     * Loads a default HTML file with a background that matches the general theme."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    private void loadDefaultPage() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        URL defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        loadPage(defaultPage.toExternalForm());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "     * Frees resources allocated to the browser."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    public void freeResources() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        pastTransactionBrowser \u003d null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    private void handleTransactionPanelSelectionChangedEvent(TransactionPanelSelectionChangedEvent event) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        loadTransactionPage(event.getNewSelection());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Bellaaarh": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PastTransactionListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import seedu.address.commons.events.ui.TransactionPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "public class PastTransactionListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    private static final String FXML \u003d \"PastTransactionListPanel.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PastTransactionListPanel.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    private ListView\u003cTransaction\u003e pastTransactionListView;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    public PastTransactionListPanel(ObservableList\u003cTransaction\u003e transactionList) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        setConnections(transactionList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    private void setConnections(ObservableList\u003cTransaction\u003e personList) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        pastTransactionListView.setItems(personList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        pastTransactionListView.setCellFactory(listView -\u003e new PastTransactionListPanel.TransactionListViewCell());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    private void setEventHandlerForSelectionChangeEvent() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        pastTransactionListView.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "                .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "                    if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "                        logger.fine(\"Selection in transaction list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "                        raise(new TransactionPanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "                });"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "     * Scrolls to the {@code PersonCard} at the {@code index} and selects it."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    private void scrollToPast(int index) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            pastTransactionListView.scrollTo(index);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            pastTransactionListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        });"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        if (\"past\".equals(event.type)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            scrollToPast(event.targetIndex);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    class TransactionListViewCell extends ListCell\u003cTransaction\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        protected void updateItem(Transaction transaction, boolean empty) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            super.updateItem(transaction, empty);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            if (empty || transaction \u003d\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "                setGraphic(new TransactionCard(transaction, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Bellaaarh": 88
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatusBarFooter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.controlsfx.control.StatusBar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.commons.events.model.FinancialDatabaseChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used to generate time stamps."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * TODO: change clock to an instance variable."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * We leave it as a static variable because manual dependency injection"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * will require passing down the clock reference all the way from MainApp,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * but it should be easier once we have factories/DI frameworks."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Clock clock \u003d Clock.systemDefaultZone();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StatusBarFooter.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBar syncStatus;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBar saveLocationStatus;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        setSyncStatus(SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        setSaveLocation(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the clock used to determine the current time."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setClock(Clock clock) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.clock \u003d clock;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the clock currently in use."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Clock getClock() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return clock;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setSaveLocation(String location) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e saveLocationStatus.setText(location));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setSyncStatus(String status) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e syncStatus.setText(status));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public void handleAddressBookChangedEvent(FinancialDatabaseChangedEvent abce) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        long now \u003d clock.millis();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String lastUpdated \u003d new Date(now).toString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(abce, \"Setting last updated status to \" + lastUpdated));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        setSyncStatus(String.format(SYNC_STATUS_UPDATED, lastUpdated));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "julianc269": 2,
      "-": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TransactionCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "julianc269"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "julianc269"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "julianc269"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "julianc269"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "julianc269"
        },
        "content": "public class TransactionCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private static final String DEFAULT_IMAGE \u003d \"lejolly.png\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    private static final String FXML \u003d \"TransactionListCard.fxml\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public final Transaction transaction;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private Label type;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private Label amount;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private Label deadline;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "    private ImageView imageView;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public TransactionCard(Transaction transaction, int displayedIndex) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        this.transaction \u003d transaction;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Person person \u003d transaction.getPerson();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        type.setText(transaction.getType().value);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        amount.setText(transaction.getAmount().toString());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        deadline.setText(transaction.getDeadline().value);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        name.setText(person.getName().toString());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        person.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        String link \u003d transaction.getPhoto().getPicturePath().trim();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        logger.info(\"before fail\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        logger.info(link);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        addPicture(transaction);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Adds a picture for each transaction."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "    public void addPicture(Transaction transaction) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        String currentpath \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        logger.info(\"current path is:\" + currentpath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "            String url \u003d transaction.getPhoto().getPicturePath();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "            if (url.startsWith(\"images/default_person\")) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "                url \u003d \"/System/Library/CoreServices/DefaultBackground.jpg\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "            if (url.startsWith(\"images/weiqing-nic\")) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "                url \u003d \"/System/Library/CoreServices/DefaultBackground.jpg\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "            URL newtry \u003d new File(url).toURI().toURL();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "            imageView.setImage(new Image(String.valueOf(newtry), 208, 208, true, false));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        } catch (MalformedURLException e1) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "            e1.printStackTrace();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "            URL newtry;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                newtry \u003d new File(DEFAULT_IMAGE).toURI().toURL();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "                imageView.setImage(new Image(String.valueOf(newtry), 208, 208, true, true));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "            } catch (MalformedURLException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        if (!(other instanceof TransactionCard)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        TransactionCard card \u003d (TransactionCard) other;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                \u0026\u0026 transaction.equals(card.transaction);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "julianc269"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 28,
      "weiqing-nic": 44,
      "julianc269": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TransactionListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.commons.events.ui.TransactionPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "public class TransactionListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private static final String FXML \u003d \"TransactionListPanel.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TransactionListPanel.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private ListView\u003cTransaction\u003e transactionListView;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public TransactionListPanel(ObservableList\u003cTransaction\u003e transactionList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        setConnections(transactionList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private void setConnections(ObservableList\u003cTransaction\u003e personList) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        transactionListView.setItems(personList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        transactionListView.setCellFactory(listView -\u003e new TransactionListViewCell());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setEventHandlerForSelectionChangeEvent() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        transactionListView.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                        logger.fine(\"Selection in transaction list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                        raise(new TransactionPanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                });"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Scrolls to the {@code PersonCard} at the {@code index} and selects it."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private void scrollTo(int index) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            transactionListView.scrollTo(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            transactionListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        if (\"\".equals(event.type)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            scrollTo(event.targetIndex);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    class TransactionListViewCell extends ListCell\u003cTransaction\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        protected void updateItem(Transaction transaction, boolean empty) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            super.updateItem(transaction, empty);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            if (empty || transaction \u003d\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                setGraphic(new TransactionCard(transaction, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 21,
      "julianc269": 1,
      "-": 62,
      "Bellaaarh": 3
    }
  },
  {
    "path": "src/main/resources/creds/creds.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "julianc269"
        },
        "content": "{\"installed\":{\"client_id\":\"701191040047-p35krni7rngbafn4q00836sckhhmfj11.apps.googleusercontent.com\",\"project_id\":\"debt-tracker-1539007158978\",\"auth_uri\":\"https://accounts.google.com/o/oauth2/auth\",\"token_uri\":\"https://www.googleapis.com/oauth2/v3/token\",\"auth_provider_x509_cert_url\":\"https://www.googleapis.com/oauth2/v1/certs\",\"client_secret\":\"FrEvGQ94puiSdScIxwi0D3zQ\",\"redirect_uris\":[\"urn:ietf:wg:oauth:2.0:oob\",\"http://localhost\"]}}"
      }
    ],
    "authorContributionMap": {
      "julianc269": 1
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    -fx-background-color: derive(#e8c87f, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    background-color: #ffe7b2; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    -fx-base: #ffe7b2;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    -fx-control-inner-background: #ffe7b2;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    -fx-background-color: #ffe7b2;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    -fx-background-color: derive(#e8c87f, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    -fx-background-color: derive(#ffe7b2, 0%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    -fx-background-color: #dba762;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    -fx-background-color: #ffcd8c;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    -fx-background-color: #ffe7b2;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    -fx-border-color: #4f3c21;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "     -fx-background-color: derive(#ffe7b2, 0%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "     -fx-background-color: derive(#755933, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    -fx-background-color: derive(#755933, 20%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    -fx-background-color: derive(#ffe7b2, 30%);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    -fx-background-color: derive(#ffe7b2, 30%);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    -fx-background-color: derive(#755933, 50%);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    -fx-background-color: derive(#4f3c21, 20%);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    -fx-text-fill: #ffe7b2;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "  -fx-background-color: black;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    -fx-fill: black;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    -fx-background-color: derive(#e8c87f, 20%);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    -fx-background-color: derive(#755933, 50%);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    -fx-background-color: transparent #dba762 transparent #dba762;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    -fx-border-color: #755933 #755933 #755933 #755933;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    -fx-background-color: transparent, #ffe7b2, transparent, #ffe7b2;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    -fx-background-color: #fffddd;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 315,
      "Bellaaarh": 36
    }
  },
  {
    "path": "src/main/resources/view/Extensions.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ".error {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d06651 !important; /* The error class should always override the default text-fill style */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    -fx-background: #ffe7b2;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ".tag-selector {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 3;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ".tooltip-text {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "Bellaaarh": 1
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/9.0.4\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        \u003cTabPane fx:id\u003d\"tabPaneReference\" tabClosingPolicy\u003d\"UNAVAILABLE\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "          \u003ctabs\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            \u003cTab text\u003d\"Current Transactions\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "              \u003ccontent\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "                \u003cVBox\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "                    \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.5\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                      \u003cVBox fx:id\u003d\"personList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "                          \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                      \u003cStackPane fx:id\u003d\"browserPlaceholder\" prefWidth\u003d\"340\"\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "                          \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                      \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "              \u003c/content\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            \u003c/Tab\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            \u003cTab text\u003d\"Past Transactions\"\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "              \u003ccontent\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "                \u003cVBox\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "                              \u003cSplitPane fx:id\u003d\"pastTransactionSplitPane1\" dividerPositions\u003d\"0.5\"\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "                                 \u003citems\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "                                    \u003cVBox fx:id\u003d\"pastTransactionList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "                                       \u003cpadding\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "                                          \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "                                       \u003c/padding\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "                                       \u003cchildren\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "                                          \u003cStackPane fx:id\u003d\"pastTransactionListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "                                       \u003c/children\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "                                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "                                    \u003cStackPane fx:id\u003d\"pastTransactionBrowserPlaceholder\" prefWidth\u003d\"340\"\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "                                       \u003cpadding\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "                                          \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "                                       \u003c/padding\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "                                    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "                                 \u003c/items\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "                              \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "              \u003c/content\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            \u003c/Tab\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "          \u003c/tabs\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 58,
      "Bellaaarh": 48
    }
  },
  {
    "path": "src/main/resources/view/PastTransactionBrowserPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "\u003c?import javafx.scene.web.WebView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "\u003cStackPane xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "  \u003cWebView fx:id\u003d\"pastTransactionBrowser\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Bellaaarh": 8
    }
  },
  {
    "path": "src/main/resources/view/PastTransactionListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    \u003cListView fx:id\u003d\"pastTransactionListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "\u003c/VBox\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Bellaaarh": 9
    }
  },
  {
    "path": "src/main/resources/view/TransactionListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "julianc269"
        },
        "content": "\t  \u003cLabel fx:id\u003d\"type\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$type\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "julianc269"
        },
        "content": "\t  \u003cLabel fx:id\u003d\"amount\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$amount\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "julianc269"
        },
        "content": "\t  \u003cLabel fx:id\u003d\"deadline\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$deadline\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "      \u003cLabel fx:id\u003d\"interest\" styleClass\u003d\"cell_small_label\"/\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "          \u003cImageView fx:id\u003d\"imageView\" fitHeight\u003d\"108\" fitWidth\u003d\"108\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "          \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 1,
      "weiqing-nic": 5,
      "julianc269": 3,
      "-": 36
    }
  },
  {
    "path": "src/main/resources/view/TransactionListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "julianc269"
        },
        "content": "  \u003cListView fx:id\u003d\"transactionListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "julianc269": 1,
      "-": 7
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"extra\" : \"some value \","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \"z\" : 99"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "  \"addressBookFilePath\" : \"data/debttracker.xml\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 1,
      "-": 12
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "  \"addressBookFilePath\" : \"data/debttracker.xml\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 1,
      "-": 10
    }
  },
  {
    "path": "src/test/data/XmlFinancialDatabaseStorageTest/invalidAndValidTransactionFinancialDatabase.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    \u003c!-- Valid Transaction --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    \u003ctransactions\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        \u003camount\u003eSGD 45.20\u003c/amount\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        \u003ctype\u003eLoan\u003c/type\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        \u003cdeadline\u003e05/01/2019\u003c/deadline\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    \u003c/transactions\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Person with invalid phone field --\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    \u003ctransactions\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        \u003camount\u003eSGD 45.20\u003c/amount\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        \u003ctype\u003eLoan\u003c/type\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        \u003cdeadline\u003e05/01/2015\u003c/deadline\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    \u003c/transactions\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 12,
      "-": 11
    }
  },
  {
    "path": "src/test/data/XmlFinancialDatabaseStorageTest/invalidTransactionFinancialDatabase.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    \u003c!-- Transaction with invalid type field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    \u003ctransactions\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        \u003camount\u003eSGD 23.60\u003c/amount\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        \u003ctype\u003eBorrow\u003c/type\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        \u003cdeadline\u003e12/11/2018\u003c/deadline\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        \u003cname\u003eHans Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    \u003c/transactions\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 7,
      "-": 6
    }
  },
  {
    "path": "src/test/data/XmlSerializableFinancialDatabaseTest/duplicateTransactionFinancialDatabase.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "julianc269"
        },
        "content": "\u003cfinancialdatabase\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    \u003ctransactions\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        \u003camount\u003eSGD 42.50\u003c/amount\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        \u003ctype\u003eLoan\u003c/type\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        \u003cdeadline\u003e12/11/2018\u003c/deadline\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ealice@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e123, Jurong West Ave 6, #08-111\u003c/address\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    \u003c/transactions\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Person with same identity as Alice Pauline --\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    \u003ctransactions\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        \u003camount\u003eSGD 42.50\u003c/amount\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        \u003ctype\u003eLoan\u003c/type\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        \u003cdeadline\u003e12/11/2018\u003c/deadline\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        \u003cemail\u003ealice@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        \u003caddress\u003e123, Jurong West Ave 6, #08-111\u003c/address\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    \u003c/transactions\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "julianc269"
        },
        "content": "\u003c/financialdatabase\u003e"
      }
    ],
    "authorContributionMap": {
      "julianc269": 15,
      "-": 12
    }
  },
  {
    "path": "src/test/data/XmlSerializableFinancialDatabaseTest/invalidTransactionFinancialDatabase.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "julianc269"
        },
        "content": "\u003cfinancialdatabase\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Person with invalid email field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    \u003ctransactions\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        \u003camount\u003eSGD 42.50\u003c/amount\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        \u003ctype\u003eLoan\u003c/type\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        \u003cdeadline\u003e12/11/2018\u003c/deadline\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        \u003cname\u003eHans M\u003c/name\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        \u003cemail\u003ehans@exam!32ple\u003c/email\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        \u003caddress\u003e123, Jurong West Ave 6, #08-111\u003c/address\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    \u003c/transactions\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "julianc269"
        },
        "content": "\u003c/financialdatabase\u003e"
      }
    ],
    "authorContributionMap": {
      "julianc269": 12,
      "-": 2
    }
  },
  {
    "path": "src/test/data/XmlSerializableFinancialDatabaseTest/typicalTransactionsFinancialDatabase.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "julianc269"
        },
        "content": "\u003c!-- AddressBook save file which contains the same Person values as in Typicaltransactions#getTypicalAddressBook() --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "julianc269"
        },
        "content": "\u003cfinancialdatabase\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    \u003ctransactions\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        \u003camount\u003eSGD 42.50\u003c/amount\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        \u003ctype\u003eLoan\u003c/type\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        \u003cdeadline\u003e12/11/2018\u003c/deadline\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ealice@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e123, Jurong West Ave 6, #08-111\u003c/address\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    \u003c/transactions\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    \u003ctransactions\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "julianc269"
        },
        "content": "\t    \u003camount\u003eAUD 12.85\u003c/amount\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        \u003ctype\u003eDebt\u003c/type\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        \u003cdeadline\u003e12/11/2018\u003c/deadline\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eBenson Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e98765432\u003c/phone\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ejohnd@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e311, Clementi Ave 2, #02-25\u003c/address\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003eowesMoney\u003c/tagged\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    \u003c/transactions\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    \u003ctransactions\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "julianc269"
        },
        "content": "\t    \u003camount\u003eUSD 57.60\u003c/amount\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        \u003ctype\u003eDebt\u003c/type\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        \u003cdeadline\u003e12/11/2018\u003c/deadline\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eCarl Kurz\u003c/name\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e95352563\u003c/phone\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003eheinz@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003ewall street\u003c/address\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    \u003c/transactions\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    \u003ctransactions\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "julianc269"
        },
        "content": "\t    \u003camount\u003eINR 44.70\u003c/amount\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        \u003ctype\u003eLoan\u003c/type\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        \u003cdeadline\u003e12/11/2018\u003c/deadline\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eDaniel Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e87652533\u003c/phone\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ecornelia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e10th street\u003c/address\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    \u003c/transactions\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    \u003ctransactions\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "julianc269"
        },
        "content": "\t    \u003camount\u003eCNY 47.65\u003c/amount\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        \u003ctype\u003eDebt\u003c/type\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        \u003cdeadline\u003e12/11/2018\u003c/deadline\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eElle Meyer\u003c/name\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482224\u003c/phone\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ewerner@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003emichegan ave\u003c/address\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    \u003c/transactions\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    \u003ctransactions\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "julianc269"
        },
        "content": "\t    \u003camount\u003eCNY 47.25\u003c/amount\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        \u003ctype\u003eDebt\u003c/type\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        \u003cdeadline\u003e12/11/2018\u003c/deadline\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eFiona Kunz\u003c/name\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482427\u003c/phone\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003elydia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003elittle tokyo\u003c/address\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    \u003c/transactions\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    \u003ctransactions\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "julianc269"
        },
        "content": "\t    \u003camount\u003eCNY 47.15\u003c/amount\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        \u003ctype\u003eDebt\u003c/type\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        \u003cdeadline\u003e12/11/2018\u003c/deadline\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eGeorge Best\u003c/name\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482442\u003c/phone\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003eanna@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    \u003c/transactions\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "julianc269"
        },
        "content": "\u003c/financialdatabase\u003e"
      }
    ],
    "authorContributionMap": {
      "julianc269": 38,
      "-": 33
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/invalidTransactionField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "\u003c!-- Transaction with an invalid amount field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "\u003ctransaction\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "\t\u003ctype\u003eLoan\u003c/type\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    \u003camount\u003e342.60\u003c/amount\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    \u003cdeadline\u003e16/11/2018\u003c/deadline\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    \u003cemail\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "\u003c/transaction\u003e"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 5,
      "julianc269": 2,
      "-": 5
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/missingTransactionField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "\u003c!-- Transaction with missing type field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "\u003ctransaction\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "julianc269"
        },
        "content": "\t\u003ctype\u003eSGD 25.50\u003c/type\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    \u003cdeadline\u003e16/11/2018\u003c/deadline\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "julianc269"
        },
        "content": "\t\u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    \u003cphone\u003ehans@example.com\u003c/phone\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    \u003cemail\u003e9482424\u003c/email\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "\u003c/transaction\u003e"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 3,
      "julianc269": 5,
      "-": 3
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/tempFinancialDatabase.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    \u003ctransactions\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        \u003cfirstName\u003eAadit\u003c/firstName\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        \u003clastName\u003eKamat\u003c/lastName\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cgithubUsername\u003e\u003c/githubUsername\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cstreet\u003e\u003c/street\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cpostalCode\u003e\u003c/postalCode\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ccity\u003e\u003c/city\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    \u003c/transactions\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 4,
      "-": 7
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validFinancialDatabase.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "julianc269"
        },
        "content": "\u003cfinancialdatabase\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    \u003ctransactions\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "\t\t\u003ctype\u003eLoan\u003c/type\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        \u003camount\u003eSGD 25.50\u003c/amount\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        \u003cdeadline\u003e16/11/2018\u003c/deadline\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    \u003c/transactions\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    \u003ctransactions\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "\t\t\u003ctype\u003eDebt\u003c/type\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        \u003camount\u003eAUD 236.60\u003c/amount\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        \u003cdeadline\u003e29/12/2018\u003c/deadline\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eRuth Mueller\u003c/name\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e87249245\u003c/phone\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eruth@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e81th street\u003c/address\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    \u003c/transactions\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    \u003ctransactions\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        \u003ctype\u003eDebt\u003c/type\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        \u003camount\u003eUSD 56.20\u003c/amount\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        \u003cdeadline\u003e16/1/2019\u003c/deadline\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHeinz Kurz\u003c/name\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e95352563\u003c/phone\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eheinz@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003ewall street\u003c/address\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    \u003c/transactions\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    \u003ctransactions\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        \u003ctype\u003eLoan\u003c/type\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        \u003camount\u003eJPY 386.50\u003c/amount\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        \u003cdeadline\u003e30/10/2019\u003c/deadline\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "julianc269"
        },
        "content": "\t\t\u003cname\u003eCornelia Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e87652533\u003c/phone\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ecornelia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e10th street\u003c/address\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    \u003c/transactions\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    \u003ctransactions\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        \u003ctype\u003eLoan\u003c/type\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        \u003camount\u003eCNY 455.20\u003c/amount\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        \u003cdeadline\u003e06/11/2025\u003c/deadline\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "julianc269"
        },
        "content": "\t\t\u003cname\u003eWerner Meyer\u003c/name\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482224\u003c/phone\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ewerner@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003emichegan ave\u003c/address\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    \u003c/transactions\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    \u003ctransactions\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        \u003ctype\u003eLoan\u003c/type\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        \u003camount\u003eIDR 652.30\u003c/amount\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        \u003cdeadline\u003e17/11/2018\u003c/deadline\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eLydia Kunz\u003c/name\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482427\u003c/phone\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003elydia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003elittle tokyo\u003c/address\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    \u003c/transactions\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    \u003ctransactions\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        \u003ctype\u003eDebt\u003c/type\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        \u003camount\u003eMYR 3333.40\u003c/amount\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        \u003cdeadline\u003e25/11/2021\u003c/deadline\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAnna Best\u003c/name\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482442\u003c/phone\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eanna@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    \u003c/transactions\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    \u003ctransactions\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        \u003ctype\u003eDebt\u003c/type\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        \u003camount\u003eSGD 235.60\u003c/amount\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        \u003cdeadline\u003e20/04/2020\u003c/deadline\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eStefan Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e8482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003estefan@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003elittle india\u003c/address\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    \u003c/transactions\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    \u003ctransactions\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        \u003ctype\u003eDebt\u003c/type\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        \u003camount\u003eSGD 374.50\u003c/amount\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        \u003cdeadline\u003e16/01/2019\u003c/deadline\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eMartin Mueller\u003c/name\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e8482131\u003c/phone\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003echicago ave\u003c/address\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    \u003c/transactions\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "julianc269"
        },
        "content": "\u003c/financialdatabase\u003e"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 44,
      "julianc269": 5,
      "-": 35
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validTransaction.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "\u003ctransaction\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    \u003ctype\u003eLoan\u003c/type\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    \u003camount\u003eSGD 25.50\u003c/amount\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    \u003cdeadline\u003e16/11/2018\u003c/deadline\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    \u003cemail\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "\u003c/transaction\u003e"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 6,
      "-": 5
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MainWindowHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle for {@code MainWindow}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private final TransactionListPanelHandle personListPanel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ResultDisplayHandle resultDisplay;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandBoxHandle commandBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBarFooterHandle statusBarFooter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final MainMenuHandle mainMenu;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final BrowserPanelHandle browserPanel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        personListPanel \u003d new TransactionListPanelHandle(getChildNode(TransactionListPanelHandle.PERSON_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel \u003d new BrowserPanelHandle(getChildNode(BrowserPanelHandle.BROWSER_ID));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public TransactionListPanelHandle getTransactionListPanel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return resultDisplay;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandBox;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return statusBarFooter;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainMenu;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return browserPanel;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 3,
      "-": 48
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/TransactionCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.collect.ImmutableMultiset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": " * Provides a handle to a transaction card in the transaction list panel."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "public class TransactionCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private static final String TYPE_FIELD_ID \u003d \"#type\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private static final String AMOUNT_FIELD_ID \u003d \"#amount\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private static final String DEADLINE_FIELD_ID \u003d \"#deadline\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PHONE_FIELD_ID \u003d \"#phone\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EMAIL_FIELD_ID \u003d \"#email\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private final Label typeLabel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private final Label amountLabel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private final Label deadlineLabel;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label addressLabel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label phoneLabel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label emailLabel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public TransactionCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        typeLabel \u003d getChildNode(TYPE_FIELD_ID);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        amountLabel \u003d getChildNode(AMOUNT_FIELD_ID);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        deadlineLabel \u003d getChildNode(DEADLINE_FIELD_ID);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return typeLabel.getText();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public String getAmount() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return amountLabel.getText();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public String getDeadline() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return deadlineLabel.getText();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAddress() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressLabel.getText();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPhone() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return phoneLabel.getText();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getEmail() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return emailLabel.getText();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Returns true if this handle contains {@code transaction}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public boolean equals(Transaction transaction) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Person person \u003d transaction.getPerson();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return getType().equals(transaction.getType().value)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                \u0026\u0026 getAmount().equals(transaction.getAmount().toString())"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                \u0026\u0026 getDeadline().equals(transaction.getDeadline().value)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                \u0026\u0026 getName().equals(person.getName().toString())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getAddress().equals(person.getAddress().value)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getPhone().equals(person.getPhone().value)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getEmail().equals(person.getEmail().value)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 ImmutableMultiset.copyOf(getTags()).equals(ImmutableMultiset.copyOf(person.getTags().stream()"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                        .map(tag -\u003e tag.tagName)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                        .collect(Collectors.toList())));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 30,
      "-": 83
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/TransactionListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": " * Provides a handle for {@code TransactionListPanel} containing the list of {@code PersonCard}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "public class TransactionListPanelHandle extends NodeHandle\u003cListView\u003cTransaction\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public static final String PERSON_LIST_VIEW_ID \u003d \"#transactionListView\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CARD_PANE_ID \u003d \"#cardPane\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private Optional\u003cTransaction\u003e lastRememberedSelectedPersonCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public TransactionListPanelHandle(ListView\u003cTransaction\u003e personListPanelNode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(personListPanelNode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Returns a handle to the selected {@code TransactionCardHandle}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws AssertionError if no card is selected, or more than 1 card is selected."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public TransactionCardHandle getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        List\u003cTransaction\u003e selectedPersonList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedPersonList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Person list size expected 1.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                .map(TransactionCardHandle::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .filter(handle -\u003e handle.equals(selectedPersonList.get(0)))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the selected card."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getSelectedCardIndex() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a card is currently selected."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAnyCardSelected() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        List\u003cTransaction\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedCardsList.size() \u003e 1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Card list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return !selectedCardsList.isEmpty();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Navigates the listview to display {@code transaction}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void navigateToCard(Transaction person) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!getRootNode().getItems().contains(person)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Person does not exist.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            getRootNode().scrollTo(person);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Navigates the listview to {@code index}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void navigateToCard(int index) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d getRootNode().getItems().size()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Index is out of bounds.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            getRootNode().scrollTo(index);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selects the {@code PersonCard} at {@code index} in the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Returns the transaction card handle of a transaction associated with the {@code index} in the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public TransactionCardHandle getPersonCardHandle(int index) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                .map(TransactionCardHandle::new)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                .filter(handle -\u003e handle.equals(getPerson(index)))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private Transaction getPerson(int index) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all card nodes in the scene graph."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiRobot.lookup(CARD_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remembers the selected {@code PersonCard} in the list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void rememberSelectedPersonCard() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        List\u003cTransaction\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            lastRememberedSelectedPersonCard \u003d Optional.empty();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            lastRememberedSelectedPersonCard \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the selected {@code PersonCard} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code rememberSelectedPersonCard()} call."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSelectedPersonCardChanged() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        List\u003cTransaction\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return lastRememberedSelectedPersonCard.isPresent();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            return !lastRememberedSelectedPersonCard.isPresent()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                    || !lastRememberedSelectedPersonCard.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 18,
      "julianc269": 1,
      "-": 140
    }
  },
  {
    "path": "src/test/java/seedu/address/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.model.FinancialDatabase;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.model.ReadOnlyFinancialDatabase;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.storage.XmlSerializableFinancialDatabase;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String APP_TITLE \u003d \"Test App\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    protected Supplier\u003cReadOnlyFinancialDatabase\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlyFinancialDatabase\u003e initialDataSupplier, Path saveFileLocation) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            createDataFileWithData(new XmlSerializableFinancialDatabase(this.initialDataSupplier.get()),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                    this.saveFileLocation);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setAppTitle(APP_TITLE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.updateLastUsedGuiSetting(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        userPrefs.setDebtTrackerFilePath(saveFileLocation);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the address book data stored inside the storage file."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public FinancialDatabase readStorageFinancialDatabase() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            return new FinancialDatabase(storage.readFinancialDatabase().get());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Data is not in the AddressBook format.\", dce);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the storage file."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getStorageSaveLocation() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        return storage.getFinancialDatabaseFilePath();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        Model copy \u003d new ModelManager((model.getFinancialDatabase()), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        ModelHelper.setFilteredList(copy, model.getFilteredTransactionList());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an XML file at the {@code filePath} with the {@code data}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private \u003cT\u003e void createDataFileWithData(T data, Path filePath) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            XmlUtil.saveDataToFile(filePath, data);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 2,
      "julianc269": 10,
      "-": 108
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/ConfigTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        String defaultConfigAsString \u003d \"App title : Debt Tracker\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "julianc269": 1,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/XmlUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.model.FinancialDatabase;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAdaptedTag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.storage.XmlAdaptedTransaction;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.storage.XmlSerializableFinancialDatabase;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.testutil.FinancialDatabaseBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.testutil.TransactionBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlUtilTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlUtilTest\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path EMPTY_FILE \u003d TEST_DATA_FOLDER.resolve(\"empty.xml\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path MISSING_FILE \u003d TEST_DATA_FOLDER.resolve(\"missing.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private static final Path VALID_FILE \u003d TEST_DATA_FOLDER.resolve(\"validFinancialDatabase.xml\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private static final Path MISSING_TRANSACTION_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"missingTransactionField.xml\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private static final Path INVALID_TRANSACTION_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidTransactionField.xml\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private static final Path VALID_TRANSACTION_FILE \u003d TEST_DATA_FOLDER.resolve(\"validTransaction.xml\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private static final Path TEMP_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"tempFinancialDatabase.xml\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private static final String INVALID_AMOUNT \u003d \"342.60\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private static final String VALID_TYPE \u003d \"Loan\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private static final String VALID_AMOUNT \u003d \"SGD 25.50\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private static final String VALID_DEADLINE \u003d \"16/11/2018\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Hans Muster\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"9482424\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"hans@example.com\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"4th street\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"friends\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        XmlUtil.getDataFromFile(null, FinancialDatabase.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        XmlUtil.getDataFromFile(MISSING_FILE, FinancialDatabase.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(JAXBException.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        XmlUtil.getDataFromFile(EMPTY_FILE, FinancialDatabase.class);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_validFile_validResult() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        FinancialDatabase dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                XmlSerializableFinancialDatabase.class).toModelType();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        assertEquals(9, dataFromFile.getTransactionList().size());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void xmlAdaptedTransactionFromFile_fileWithMissingTransactionField_validResult() throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        XmlAdaptedTransaction actualTransaction \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                MISSING_TRANSACTION_FIELD_FILE, XmlAdaptedTransactionWithRootElement.class);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        XmlAdaptedTransaction expectedTransaction \u003d new XmlAdaptedTransaction("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                VALID_AMOUNT, null, VALID_DEADLINE, VALID_NAME, VALID_EMAIL, VALID_PHONE,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertEquals(expectedTransaction, actualTransaction);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithInvalidTransactionField_validResult() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        XmlAdaptedTransaction actualTransaction \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                INVALID_TRANSACTION_FIELD_FILE, XmlAdaptedTransactionWithRootElement.class);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        XmlAdaptedTransaction expectedTransaction \u003d new XmlAdaptedTransaction("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                VALID_TYPE, INVALID_AMOUNT, VALID_DEADLINE, VALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertEquals(expectedTransaction, actualTransaction);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithValidTransaction_validResult() throws Exception {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        XmlAdaptedTransaction actualTransaction \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                VALID_TRANSACTION_FILE, XmlAdaptedTransactionWithRootElement.class);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        XmlAdaptedTransaction expectedTransaction \u003d new XmlAdaptedTransaction("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                VALID_TYPE, VALID_AMOUNT, VALID_DEADLINE, VALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertEquals(expectedTransaction, actualTransaction);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        XmlUtil.saveDataToFile(null, new FinancialDatabase());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        XmlUtil.saveDataToFile(MISSING_FILE, new FinancialDatabase());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_validFile_dataSaved() throws Exception {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createFile(TEMP_FILE);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        XmlSerializableFinancialDatabase dataToWrite \u003d new XmlSerializableFinancialDatabase(new FinancialDatabase());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        XmlSerializableFinancialDatabase dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                XmlSerializableFinancialDatabase.class);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        FinancialDatabaseBuilder builder \u003d new FinancialDatabaseBuilder(new FinancialDatabase());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        dataToWrite \u003d new XmlSerializableFinancialDatabase("
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                builder.withTransaction(new TransactionBuilder().build()).build());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableFinancialDatabase.class);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * {@code XmlAdaptedTransaction} objects."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @XmlRootElement(name \u003d \"transaction\")"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private static class XmlAdaptedTransactionWithRootElement extends XmlAdaptedTransaction {}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 37,
      "julianc269": 18,
      "-": 99
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(deleteCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(listCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        logic.getFilteredTransactionList().remove(0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFinancialDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - {@code expectedModel}\u0027s address book was saved to the storage file."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                                           String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "julianc269": 2,
      "-": 122
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailureWithNoModelChange;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccessWithNoModelChange;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.getTypicalFinancialDatabase;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.testutil.TransactionBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        model \u003d new ModelManager(getTypicalFinancialDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Transaction validTransaction \u003d new TransactionBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFinancialDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        expectedModel.addTransaction(validTransaction);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        expectedModel.commitFinancialDatabase();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertCommandSuccessWithNoModelChange(new AddCommand(validTransaction), model, expectedModel, commandHistory,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validTransaction));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Transaction transactionInList \u003d model.getFinancialDatabase().getTransactionList().get(0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFinancialDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertCommandFailureWithNoModelChange(new AddCommand(transactionInList), model, expectedModel, commandHistory,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_TRANSACTION);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 15,
      "julianc269": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.FinancialDatabase;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.ReadOnlyFinancialDatabase;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.testutil.TransactionBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        Transaction validPerson \u003d new TransactionBuilder().build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        Transaction validPerson \u003d new TransactionBuilder().build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_TRANSACTION);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        Transaction alice \u003d new TransactionBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        Transaction bob \u003d new TransactionBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        // different transaction -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        public void resetData(ReadOnlyFinancialDatabase newData) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        public ReadOnlyFinancialDatabase getFinancialDatabase() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        public void addTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        public void addPastTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        public boolean hasTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        public void updateTransaction(Transaction target, Transaction editedTransaction) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        public void deleteTransaction(Transaction target) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        public void deletePastTransaction(Transaction target) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        public void updateFilteredPastTransactionList(Predicate\u003cTransaction\u003e predicate) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        public ObservableList\u003cTransaction\u003e getFilteredTransactionList() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        public ObservableList\u003cTransaction\u003e getFilteredPastTransactionList() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        public void updateFilteredTransactionList(Predicate\u003cTransaction\u003e predicate) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        public boolean canUndoFinancialDatabase() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        public boolean canRedoFinancialDatabase() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        public void undoFinancialDatabase() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        public void redoFinancialDatabase() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        public void commitFinancialDatabase() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * A Model stub that contains a single transaction."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        private final Transaction person;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        ModelStubWithPerson(Transaction person) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        public boolean hasTransaction(Transaction person) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            return this.person.equals(person);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * A Model stub that always accept the transaction being added."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        final ArrayList\u003cTransaction\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        public boolean hasTransaction(Transaction person) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            return personsAdded.stream().anyMatch(person::equals);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        public void addTransaction(Transaction person) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        public void commitFinancialDatabase() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        public ReadOnlyFinancialDatabase getFinancialDatabase() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            return new FinancialDatabase();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 26,
      "julianc269": 13,
      "-": 173,
      "Bellaaarh": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AnalyticsCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccessWithModelChange;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.getUniqueFinancialDatabase;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "import seedu.address.model.transaction.Deadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for AnalyticsCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "public class AnalyticsCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    private CommandHistory history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    private Model modelWithData \u003d new ModelManager(getUniqueFinancialDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    public void execute_emptyFinancialListWithNoDate() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        String expectedMessage \u003d \"Financial status : SGD 0.00\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        AnalyticsCommand analyticsCommand \u003d new AnalyticsCommand();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        assertCommandSuccessWithModelChange(analyticsCommand, model, history, expectedMessage);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void execute_emptyFinancialListWithDate_whenDatePassedThenTestWillFail() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        String date \u003d \"12/12/2020\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        Deadline checkDate \u003d new Deadline(date);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        String expectedMessage \u003d \"Financial status : SGD 0.00\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        AnalyticsCommand analyticsCommand \u003d new AnalyticsCommand(checkDate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        assertCommandSuccessWithModelChange(analyticsCommand, model, history, expectedMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    public void execute_non_emptyFinancialListWithNoDate() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        String expectedMessage \u003d \"Financial status : SGD 188.10\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        AnalyticsCommand analyticsCommand \u003d new AnalyticsCommand();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        assertCommandSuccessWithModelChange(analyticsCommand, modelWithData, history, expectedMessage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void execute_nonEmptyFinancialListWithDate_whenDatePassedThenTestWillFail() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        String date \u003d \"11/11/2018\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        Deadline checkDate \u003d new Deadline(date);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        String expectedMessage \u003d \"Financial status : SGD 0.00\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        AnalyticsCommand analyticsCommand \u003d new AnalyticsCommand(checkDate);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        assertCommandSuccessWithModelChange(analyticsCommand, modelWithData, history, expectedMessage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void execute_nonEmptyFinancialListWithDateTest2_whenDatePassedThenTestWillFail() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        String date \u003d \"12/11/2018\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        Deadline checkDate \u003d new Deadline(date);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        String expectedMessage \u003d \"Financial status : SGD 0.00\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        AnalyticsCommand analyticsCommand \u003d new AnalyticsCommand(checkDate);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        assertCommandSuccessWithModelChange(analyticsCommand, modelWithData, history, expectedMessage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void execute_nonEmptyFinancialListWithDateTest3_whenDatePassedThenTestWillFail() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        String date \u003d \"18/11/2018\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        Deadline checkDate \u003d new Deadline(date);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        String expectedMessage \u003d \"Financial status : SGD 230.60\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        AnalyticsCommand analyticsCommand \u003d new AnalyticsCommand(checkDate);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        assertCommandSuccessWithModelChange(analyticsCommand, modelWithData, history, expectedMessage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void execute_nonEmptyFinancialListWithDateTest4_whenDatePassedThenTestWillFail() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        String date \u003d \"12/12/2018\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        Deadline checkDate \u003d new Deadline(date);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        String expectedMessage \u003d \"Financial status : SGD 188.10\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        AnalyticsCommand analyticsCommand \u003d new AnalyticsCommand(checkDate);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        assertCommandSuccessWithModelChange(analyticsCommand, modelWithData, history, expectedMessage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 6,
      "xiaoyeong": 67,
      "Bellaaarh": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccessWithNoModelChange;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.getTypicalFinancialDatabase;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.model.FinancialDatabase;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        expectedModel.commitFinancialDatabase();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertCommandSuccessWithNoModelChange(new ClearCommand(), model, expectedModel, commandHistory,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                ClearCommand.MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalFinancialDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalFinancialDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        expectedModel.resetData(new FinancialDatabase());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        expectedModel.commitFinancialDatabase();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertCommandSuccessWithNoModelChange(new ClearCommand(), model, expectedModel, commandHistory,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                ClearCommand.MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 5,
      "julianc269": 7,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TRANSACTION_AMOUNT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TRANSACTION_DEADLINE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TRANSACTION_TYPE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.FinancialDatabase;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.testutil.EditTransactionDescriptorBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static final String VALID_TYPE_AMY \u003d \"Loan\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static final String VALID_TYPE_BOB \u003d \"Loan\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static final String VALID_AMOUNT_AMY \u003d \"SGD 145.60\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public static final String VALID_AMOUNT_BOB \u003d \"SGD 42.50\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static final String VALID_DEADLINE_AMY \u003d \"17/11/2018\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public static final String VALID_DEADLINE_BOB \u003d \"12/11/2018\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public static final String AMOUNT_DESC_AMY \u003d \" \" + PREFIX_TRANSACTION_AMOUNT + VALID_AMOUNT_AMY;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public static final String AMOUNT_DESC_BOB \u003d \" \" + PREFIX_TRANSACTION_AMOUNT + VALID_AMOUNT_BOB;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public static final String TYPE_DESC_AMY \u003d \" \" + PREFIX_TRANSACTION_TYPE + VALID_TYPE_AMY;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public static final String TYPE_DESC_BOB \u003d \" \" + PREFIX_TRANSACTION_TYPE + VALID_TYPE_BOB;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public static final String DEADLINE_DESC_AMY \u003d \" \" + PREFIX_TRANSACTION_DEADLINE + VALID_DEADLINE_AMY;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public static final String DEADLINE_DESC_BOB \u003d \" \" + PREFIX_TRANSACTION_DEADLINE + VALID_DEADLINE_BOB;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static final EditCommand.EditTransactionDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static final EditCommand.EditTransactionDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        DESC_AMY \u003d new EditTransactionDescriptorBuilder().withAmount(VALID_AMOUNT_AMY).withDeadline(VALID_DEADLINE_AMY)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                .withType(VALID_TYPE_AMY).withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        DESC_BOB \u003d new EditTransactionDescriptorBuilder().withAmount(VALID_AMOUNT_BOB)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                .withDeadline(VALID_DEADLINE_BOB)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                .withType(VALID_TYPE_BOB).withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the result message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static void assertCommandSuccessWithNoModelChange(Command command, Model actualModel,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                                                             Model expectedModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                                                             String expectedMessage) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertCommandSuccessWithModelChange(command, actualModel, actualCommandHistory, expectedMessage);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    //TODO: Add a better test to handle model change"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * - the result message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static void assertCommandSuccessWithModelChange(Command command, Model actualModel,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                                                           CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                                                           String expectedMessage) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * - the address book and the filtered transaction list in the {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static void assertCommandFailureWithNoModelChange(Command command, Model actualModel,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                                                             Model expectedModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                                                             String expectedMessage) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertCommandFailureWithModelChange(command, actualModel, actualCommandHistory, expectedMessage);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertEquals(actualModel, expectedModel);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static void assertCommandFailureWithModelChange(Command command, Model actualModel,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                                                             CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                                                             String expectedMessage) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        FinancialDatabase expectedFinancialDatabase \u003d new FinancialDatabase(actualModel.getFinancialDatabase());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        List\u003cTransaction\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredTransactionList());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            assertEquals(expectedFinancialDatabase, actualModel.getFinancialDatabase());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredTransactionList());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the transaction at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static void showTransactionAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredTransactionList().size());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Transaction transaction \u003d model.getFilteredTransactionList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        final String[] splitName \u003d transaction.getPerson().getName().toString().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        model.updateFilteredTransactionList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertEquals(1, model.getFilteredTransactionList().size());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Deletes the first transaction in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static void deleteFirstTransaction(Model model) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Transaction firstTransaction \u003d model.getFilteredTransactionList().get(0);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        model.deleteTransaction(firstTransaction);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        model.commitFinancialDatabase();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 62,
      "julianc269": 11,
      "-": 116
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ConvertCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccessWithModelChange;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.testutil.TypicalTransactions;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "public class ConvertCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private CommandHistory history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        //executing convert command with no transactions"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        String expectedMessage \u003d ConvertCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        ConvertCommand convertCommand \u003d new ConvertCommand();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        assertCommandSuccessWithModelChange(convertCommand, model, history, expectedMessage);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        //executing convert command with a few transactions"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Transaction firstTransaction \u003d TypicalTransactions.AMY_TRANSACTION;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Transaction secondTransaction \u003d TypicalTransactions.BENSON_TRANSACTION;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        model.addTransaction(firstTransaction);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        model.addTransaction(secondTransaction);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertCommandSuccessWithModelChange(convertCommand, model, history, expectedMessage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 29,
      "Bellaaarh": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailureWithModelChange;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailureWithNoModelChange;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccessWithNoModelChange;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showTransactionAtIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TRANSACTION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TRANSACTION;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.getTypicalFinancialDatabase;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFinancialDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Transaction transactionToDelete \u003d model.getFilteredTransactionList()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                .get(INDEX_FIRST_TRANSACTION.getZeroBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_TRANSACTION);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_TRANSACTION_SUCCESS, transactionToDelete);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getFinancialDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        expectedModel.deleteTransaction(transactionToDelete);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        expectedModel.commitFinancialDatabase();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertCommandSuccessWithNoModelChange(deleteCommand, model, expectedModel, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTransactionList().size() + 1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getFinancialDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertCommandFailureWithNoModelChange(deleteCommand, model, expectedModel, commandHistory,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        showTransactionAtIndex(model, INDEX_FIRST_TRANSACTION);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Transaction personToDelete \u003d model.getFilteredTransactionList().get(INDEX_FIRST_TRANSACTION.getZeroBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_TRANSACTION);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_TRANSACTION_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFinancialDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        expectedModel.deleteTransaction(personToDelete);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        expectedModel.commitFinancialDatabase();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertCommandSuccessWithNoModelChange(deleteCommand, model, expectedModel, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        showTransactionAtIndex(model, INDEX_FIRST_TRANSACTION);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_TRANSACTION;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getFinancialDatabase().getTransactionList().size());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertCommandFailureWithModelChange(deleteCommand, model, commandHistory,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Transaction personToDelete \u003d model.getFilteredTransactionList().get(INDEX_FIRST_TRANSACTION.getZeroBased());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_TRANSACTION);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFinancialDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        expectedModel.deleteTransaction(personToDelete);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        expectedModel.commitFinancialDatabase();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        // delete -\u003e first transaction deleted"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered transaction list to show all persons"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        expectedModel.undoFinancialDatabase();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertCommandSuccessWithNoModelChange(new UndoCommand(), model, expectedModel, commandHistory,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                UndoCommand.MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        // redo -\u003e same first transaction deleted again"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        expectedModel.redoFinancialDatabase();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertCommandSuccessWithNoModelChange(new RedoCommand(), model, expectedModel, commandHistory,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                RedoCommand.MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTransactionList().size() + 1);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFinancialDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        // execution failed -\u003e financial database state not added into model"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertCommandFailureWithNoModelChange(deleteCommand, model, expectedModel, commandHistory,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        // single financial database state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertCommandFailureWithNoModelChange(new UndoCommand(), model, expectedModel, commandHistory,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertCommandFailureWithNoModelChange(new RedoCommand(), model, expectedModel, commandHistory,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Deletes a {@code Person} from a filtered list."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted transaction in the"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the transaction object regardless of indexing."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonDeleted() throws Exception {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_TRANSACTION);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFinancialDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        showTransactionAtIndex(model, INDEX_SECOND_TRANSACTION);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Transaction personToDelete \u003d model.getFilteredTransactionList().get(INDEX_FIRST_TRANSACTION.getZeroBased());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        expectedModel.deleteTransaction(personToDelete);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        expectedModel.commitFinancialDatabase();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        // delete -\u003e deletes second transaction in unfiltered transaction list/ first"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        // transaction in filtered transaction list"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered transaction list to show all persons"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        expectedModel.undoFinancialDatabase();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertCommandSuccessWithNoModelChange(new UndoCommand(), model, expectedModel, commandHistory,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                UndoCommand.MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertNotEquals(personToDelete, model.getFilteredTransactionList().get(INDEX_FIRST_TRANSACTION.getZeroBased()));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        // redo -\u003e deletes same second transaction in unfiltered transaction list"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        expectedModel.redoFinancialDatabase();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertCommandSuccessWithNoModelChange(new RedoCommand(), model, expectedModel, commandHistory,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                RedoCommand.MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_TRANSACTION);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_TRANSACTION);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_TRANSACTION);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        // different transaction -\u003e returns false"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        model.updateFilteredTransactionList(p -\u003e false);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertTrue(model.getFilteredTransactionList().isEmpty());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 65,
      "julianc269": 20,
      "-": 108
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AMOUNT_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DEADLINE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TYPE_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailureWithModelChange;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailureWithNoModelChange;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccessWithNoModelChange;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showTransactionAtIndex;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TRANSACTION;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TRANSACTION;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.getTypicalFinancialDatabase;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditTransactionDescriptor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.model.FinancialDatabase;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.testutil.EditTransactionDescriptorBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.testutil.TransactionBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFinancialDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        Transaction editedPerson \u003d new TransactionBuilder().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        EditTransactionDescriptor descriptor \u003d new EditTransactionDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_TRANSACTION, descriptor);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TRANSACTION_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FinancialDatabase(model.getFinancialDatabase()), new UserPrefs());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        expectedModel.updateTransaction(model.getFilteredTransactionList().get(0), editedPerson);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        expectedModel.commitFinancialDatabase();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertCommandSuccessWithNoModelChange(editCommand, model, expectedModel, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Index indexLastTransaction \u003d Index.fromOneBased(model.getFilteredTransactionList().size());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Transaction lastTransaction \u003d model.getFilteredTransactionList().get(indexLastTransaction.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        TransactionBuilder transactionInList \u003d new TransactionBuilder(lastTransaction);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Transaction editedTransaction \u003d transactionInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                .withAmount(VALID_AMOUNT_BOB).withType(VALID_TYPE_BOB).withDeadline(VALID_DEADLINE_BOB)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        EditTransactionDescriptor descriptor \u003d new EditTransactionDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withAmount(VALID_AMOUNT_BOB).withType(VALID_TYPE_BOB)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                .withDeadline(VALID_DEADLINE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastTransaction, descriptor);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TRANSACTION_SUCCESS, editedTransaction);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FinancialDatabase(model.getFinancialDatabase()), new UserPrefs());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        expectedModel.updateTransaction(lastTransaction, editedTransaction);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        expectedModel.commitFinancialDatabase();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertCommandSuccessWithNoModelChange(editCommand, model, expectedModel, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_TRANSACTION, new EditTransactionDescriptor());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Transaction editedPerson \u003d model.getFilteredTransactionList().get(INDEX_FIRST_TRANSACTION.getZeroBased());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TRANSACTION_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FinancialDatabase(model.getFinancialDatabase()), new UserPrefs());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        expectedModel.commitFinancialDatabase();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertCommandSuccessWithNoModelChange(editCommand, model, expectedModel, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        showTransactionAtIndex(model, INDEX_FIRST_TRANSACTION);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Transaction personInFilteredList \u003d model.getFilteredTransactionList()"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                .get(INDEX_FIRST_TRANSACTION.getZeroBased());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        Transaction editedPerson \u003d new TransactionBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_TRANSACTION,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                new EditTransactionDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TRANSACTION_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FinancialDatabase(model.getFinancialDatabase()), new UserPrefs());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        expectedModel.updateTransaction(model.getFilteredTransactionList().get(0), editedPerson);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        expectedModel.commitFinancialDatabase();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertCommandSuccessWithNoModelChange(editCommand, model, expectedModel, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Transaction firstPerson \u003d model.getFilteredTransactionList().get(INDEX_FIRST_TRANSACTION.getZeroBased());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        EditTransactionDescriptor descriptor \u003d new EditTransactionDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_TRANSACTION, descriptor);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFinancialDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertCommandFailureWithNoModelChange(editCommand, model, expectedModel, commandHistory,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                EditCommand.MESSAGE_DUPLICATE_TRANSACTION);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        showTransactionAtIndex(model, INDEX_FIRST_TRANSACTION);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        // edit transaction in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Transaction personInList \u003d model.getFinancialDatabase().getTransactionList()"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                .get(INDEX_SECOND_TRANSACTION.getZeroBased());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_TRANSACTION,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                new EditTransactionDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertCommandFailureWithModelChange(editCommand, model, commandHistory,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                EditCommand.MESSAGE_DUPLICATE_TRANSACTION);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTransactionList().size() + 1);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        EditTransactionDescriptor descriptor \u003d new EditTransactionDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFinancialDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertCommandFailureWithNoModelChange(editCommand, model, expectedModel, commandHistory,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        showTransactionAtIndex(model, INDEX_FIRST_TRANSACTION);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_TRANSACTION;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getFinancialDatabase().getTransactionList().size());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                new EditTransactionDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertCommandFailureWithModelChange(editCommand, model, commandHistory,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        Transaction editedPerson \u003d new TransactionBuilder().build();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Transaction personToEdit \u003d model.getFilteredTransactionList().get(INDEX_FIRST_TRANSACTION.getZeroBased());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        EditTransactionDescriptor descriptor \u003d new EditTransactionDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_TRANSACTION, descriptor);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FinancialDatabase(model.getFinancialDatabase()), new UserPrefs());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        expectedModel.updateTransaction(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        expectedModel.commitFinancialDatabase();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        // edit -\u003e first transaction edited"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered transaction list to show all persons"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        expectedModel.undoFinancialDatabase();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertCommandSuccessWithNoModelChange(new UndoCommand(), model, expectedModel, commandHistory,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                UndoCommand.MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        // redo -\u003e same first transaction edited again"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        expectedModel.redoFinancialDatabase();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertCommandSuccessWithNoModelChange(new RedoCommand(), model, expectedModel, commandHistory,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                RedoCommand.MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTransactionList().size() + 1);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        EditTransactionDescriptor descriptor \u003d new EditTransactionDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFinancialDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertCommandFailureWithNoModelChange(editCommand, model, expectedModel, commandHistory,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertCommandFailureWithNoModelChange(new UndoCommand(), model, expectedModel, commandHistory,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertCommandFailureWithNoModelChange(new RedoCommand(), model, expectedModel, commandHistory,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Edits a {@code Person} from a filtered list."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited transaction in the"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the transaction object regardless of indexing."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonEdited() throws Exception {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        Transaction editedPerson \u003d new TransactionBuilder().build();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        EditTransactionDescriptor descriptor \u003d new EditTransactionDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_TRANSACTION, descriptor);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FinancialDatabase(model.getFinancialDatabase()), new UserPrefs());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        showTransactionAtIndex(model, INDEX_SECOND_TRANSACTION);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Transaction personToEdit \u003d model.getFilteredTransactionList().get(INDEX_FIRST_TRANSACTION.getZeroBased());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        expectedModel.updateTransaction(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        expectedModel.commitFinancialDatabase();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        // edit -\u003e edits second transaction in unfiltered transaction list / first transaction"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        // in filtered transaction list"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered transaction list to show all persons"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        expectedModel.undoFinancialDatabase();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertCommandSuccessWithNoModelChange(new UndoCommand(), model, expectedModel, commandHistory,"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                UndoCommand.MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertNotEquals(model.getFilteredTransactionList().get(INDEX_FIRST_TRANSACTION.getZeroBased()), personToEdit);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        // redo -\u003e edits same second transaction in unfiltered transaction list"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        expectedModel.redoFinancialDatabase();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertCommandSuccessWithNoModelChange(new RedoCommand(), model, expectedModel, commandHistory,"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                RedoCommand.MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_TRANSACTION, DESC_AMY);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        EditTransactionDescriptor copyDescriptor \u003d new EditTransactionDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_TRANSACTION, copyDescriptor);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertEquals(standardCommand, commandWithSameValues);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertEquals(standardCommand, standardCommand);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertNotEquals(null, standardCommand);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertNotEquals(standardCommand, new ClearCommand());"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertNotEquals(standardCommand, new EditCommand(INDEX_SECOND_TRANSACTION, DESC_AMY));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertNotEquals(standardCommand, new EditCommand(INDEX_FIRST_TRANSACTION, DESC_BOB));"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 87,
      "julianc269": 49,
      "-": 135
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditTransactionDescriptorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.logic.commands.EditCommand.EditTransactionDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.testutil.EditTransactionDescriptorBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "julianc269"
        },
        "content": "public class EditTransactionDescriptorTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        EditTransactionDescriptor descriptorWithSameValues \u003d new EditTransactionDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        EditTransactionDescriptor editedAmy \u003d new EditTransactionDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        editedAmy \u003d new EditTransactionDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        editedAmy \u003d new EditTransactionDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        editedAmy \u003d new EditTransactionDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        editedAmy \u003d new EditTransactionDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 9,
      "julianc269": 2,
      "-": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FilterCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "julianc269"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_ALL_TRANSACTIONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccessWithModelChange;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.ALICE_TRANSACTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.CARL_TRANSACTION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.ELLE_TRANSACTION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.FIONA_TRANSACTION;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.getTypicalFinancialDatabase;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.logic.parser.FieldType;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.model.transaction.AmountBoundsPredicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.model.transaction.Deadline;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.model.transaction.DeadlineBoundsPredicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.model.transaction.FieldContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.model.transaction.MultiFieldPredicate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "julianc269"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "julianc269"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "julianc269"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "julianc269"
        },
        "content": "public class FilterCommandTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFinancialDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalFinancialDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        List\u003cPredicate\u003cTransaction\u003e\u003e firstPredicates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        firstPredicates.add(new FieldContainsKeywordsPredicate(FieldType.Name, Collections.singletonList(\"first\")));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        firstPredicates.add(new AmountBoundsPredicate(new Amount(\"SGD 10.00\"), AmountBoundsPredicate.BoundType.MAX));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        firstPredicates.add(new DeadlineBoundsPredicate(new Deadline(\"12/12/2018\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                DeadlineBoundsPredicate.BoundType.LATEST));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        FilterCommand filterFirstCommand \u003d new FilterCommand(firstPredicates, MultiFieldPredicate.OperatorType.OR);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        List\u003cPredicate\u003cTransaction\u003e\u003e secondPredicates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        firstPredicates.add(new FieldContainsKeywordsPredicate(FieldType.Name, Collections.singletonList(\"second\")));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        firstPredicates.add(new AmountBoundsPredicate(new Amount(\"SGD 10.00\"), AmountBoundsPredicate.BoundType.MAX));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        firstPredicates.add(new DeadlineBoundsPredicate(new Deadline(\"12/12/2018\"),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                DeadlineBoundsPredicate.BoundType.LATEST));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        FilterCommand filterSecondCommand \u003d new FilterCommand(secondPredicates, MultiFieldPredicate.OperatorType.OR);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        assertTrue(filterFirstCommand.equals(filterFirstCommand));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        FilterCommand filterFirstCommandCopy \u003d new FilterCommand(firstPredicates, MultiFieldPredicate.OperatorType.OR);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        assertTrue(filterFirstCommand.equals(filterFirstCommandCopy));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        assertFalse(filterFirstCommand.equals(1));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        assertFalse(filterFirstCommand.equals(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        // different transaction -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        assertFalse(filterFirstCommand.equals(filterSecondCommand));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public void execute_noPersonFound() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_ALL_TRANSACTIONS_LISTED_OVERVIEW, 0, 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        FieldContainsKeywordsPredicate predicate \u003d preparePredicate(\"no one\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        FilterCommand command \u003d new FilterCommand(Collections.singletonList(predicate),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                MultiFieldPredicate.OperatorType.AND);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        expectedModel.updateFilteredTransactionList(predicate);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        expectedModel.updateFilteredPastTransactionList(predicate);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        assertCommandSuccessWithModelChange(command, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredTransactionList());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_ALL_TRANSACTIONS_LISTED_OVERVIEW, 3, 0);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        FieldContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz;Elle;Kunz\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        FilterCommand command \u003d new FilterCommand(Collections.singletonList(predicate),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                MultiFieldPredicate.OperatorType.AND);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        expectedModel.updateFilteredTransactionList(predicate);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        expectedModel.updateFilteredPastTransactionList(predicate);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        assertCommandSuccessWithModelChange(command, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        assertEquals(Arrays.asList(CARL_TRANSACTION, ELLE_TRANSACTION, FIONA_TRANSACTION),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                model.getFilteredTransactionList());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public void execute_multiplePrefixes_singleTransactionFound() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_ALL_TRANSACTIONS_LISTED_OVERVIEW, 1, 0);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        FieldContainsKeywordsPredicate namePredicate \u003d preparePredicate(\"pauline\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        FieldContainsKeywordsPredicate addressPredicate \u003d"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                new FieldContainsKeywordsPredicate(FieldType.Address, Collections.singletonList(\"jurong\"));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        FieldContainsKeywordsPredicate emailPredicate \u003d"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                new FieldContainsKeywordsPredicate(FieldType.Email, Collections.singletonList(\"example.com\"));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        FieldContainsKeywordsPredicate phonePredicate \u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                new FieldContainsKeywordsPredicate(FieldType.Phone, Collections.singletonList(\"94351253\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        FieldContainsKeywordsPredicate tagPredicate \u003d"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                new FieldContainsKeywordsPredicate(FieldType.Tag, Collections.singletonList(\"friends\"));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        FieldContainsKeywordsPredicate amountPredicate \u003d"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                new FieldContainsKeywordsPredicate(FieldType.Amount, Collections.singletonList(\"42.50\"));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        FieldContainsKeywordsPredicate typePredicate \u003d"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                new FieldContainsKeywordsPredicate(FieldType.Type, Collections.singletonList(\"loan\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        List\u003cPredicate\u003cTransaction\u003e\u003e predicates \u003d Arrays.asList(namePredicate, addressPredicate, emailPredicate,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                phonePredicate, tagPredicate, amountPredicate, typePredicate);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        MultiFieldPredicate multiPredicate \u003d new MultiFieldPredicate(predicates, MultiFieldPredicate.OperatorType.AND);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        FilterCommand command \u003d new FilterCommand(predicates,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                MultiFieldPredicate.OperatorType.AND);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        expectedModel.updateFilteredTransactionList(multiPredicate);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        expectedModel.updateFilteredPastTransactionList(multiPredicate);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        assertCommandSuccessWithModelChange(command, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        assertEquals(Collections.singletonList(ALICE_TRANSACTION),"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                model.getFilteredTransactionList());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * Parses {@code userInput} into a {@code FieldContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    private FieldContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        return new FieldContainsKeywordsPredicate(FieldType.Name, Arrays.asList(userInput.split(\";\")));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "julianc269"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "julianc269": 141,
      "Bellaaarh": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccessWithNoModelChange;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertCommandSuccessWithNoModelChange(new HelpCommand(), model, expectedModel, commandHistory,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                SHOWING_HELP_MESSAGE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ShowHelpRequestEvent);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 3,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HistoryCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccessWithNoModelChange;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertCommandSuccessWithNoModelChange(new HistoryCommand(), model, expectedModel, history,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                HistoryCommand.MESSAGE_NO_HISTORY);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        String command1 \u003d \"clear\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertCommandSuccessWithNoModelChange(new HistoryCommand(), model, expectedModel, history,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                String.format(HistoryCommand.MESSAGE_SUCCESS, command1));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        String command2 \u003d \"randomCommand\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        String command3 \u003d \"select 1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command3);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(HistoryCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                String.join(\"\\n\", command3, command2, command1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertCommandSuccessWithNoModelChange(new HistoryCommand(), model, expectedModel, history, expectedMessage);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 6,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/InterestCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccessWithModelChange;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.getTypicalFinancialDatabase;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.InterestRate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.InterestScheme;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "public class InterestCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFinancialDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalFinancialDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void execute_noScheme_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        thrown.expectMessage(InterestScheme.MESSAGE_INTEREST_SCHEME_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        InterestCommand interestCommand \u003d new InterestCommand(\"\", \"1.5%\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        interestCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void execute_wrongScheme_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        thrown.expectMessage(InterestScheme.MESSAGE_INTEREST_SCHEME_CONSTRAINTS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        InterestCommand interestCommand \u003d new InterestCommand(\"compund\", \"1.5%\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        interestCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void execute_noRate_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        thrown.expectMessage(InterestRate.MESSAGE_INTEREST_RATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        InterestCommand interestCommand \u003d new InterestCommand(\"simple\", \"\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        interestCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void execute_wrongRate_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        thrown.expectMessage(InterestRate.MESSAGE_INTEREST_RATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        InterestCommand interestCommand \u003d new InterestCommand(\"compound\", \"1.5\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        interestCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void execute_noSchemeAndRate_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        thrown.expectMessage(InterestScheme.MESSAGE_INTEREST_SCHEME_CONSTRAINTS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        InterestCommand interestCommand \u003d new InterestCommand(\"\", \"\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        interestCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void execute_schemeWrongCase_success() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        int sizeOfTransactionList \u003d model.getFilteredTransactionList().size();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        String expectedMessage \u003d String.format(InterestCommand.MESSAGE_SUCCESS, sizeOfTransactionList);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        InterestCommand interestCommand \u003d new InterestCommand(\"cOmPoUnD\", \"2.30%\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        assertCommandSuccessWithModelChange(interestCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 69,
      "Bellaaarh": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccessWithNoModelChange;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showTransactionAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TRANSACTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.getTypicalFinancialDatabase;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        model \u003d new ModelManager(getTypicalFinancialDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getFinancialDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertCommandSuccessWithNoModelChange(new ListCommand(), model, expectedModel, commandHistory,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                ListCommand.MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        showTransactionAtIndex(model, INDEX_FIRST_TRANSACTION);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertCommandSuccessWithNoModelChange(new ListCommand(), model, expectedModel, commandHistory,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                ListCommand.MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 7,
      "julianc269": 4,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/NextTransactionCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_TRANSACTIONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccessWithModelChange;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.ALICE_TRANSACTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.BOB_TRANSACTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.getUniqueFinancialDatabase;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "import seedu.address.model.transaction.DeadlineContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for NextTransactionCommand."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "public class NextTransactionCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    private CommandHistory history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    private Model modelWithData \u003d new ModelManager(getUniqueFinancialDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    private Model expectedModelWithData \u003d new ModelManager(getUniqueFinancialDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    public void execute_emptyFinancialList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TRANSACTIONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        NextTransactionCommand nextTransactionCommand \u003d new NextTransactionCommand();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        assertCommandSuccessWithModelChange(nextTransactionCommand, model, history, expectedMessage);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    public void execute_nonEmptyFinancialList() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TRANSACTIONS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        DeadlineContainsKeywordsPredicate predicate \u003d preparePredicate(\"12/11/2018\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        NextTransactionCommand command \u003d new NextTransactionCommand();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        expectedModelWithData.updateFilteredTransactionList(predicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        assertCommandSuccessWithModelChange(command, modelWithData, history, expectedMessage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        assertEquals(Arrays.asList(ALICE_TRANSACTION, BOB_TRANSACTION),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "                expectedModelWithData.getFilteredTransactionList());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    private DeadlineContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        return new DeadlineContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xiaoyeong": 47,
      "Bellaaarh": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/PaidCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailureWithModelChange;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailureWithNoModelChange;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccessWithNoModelChange;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showTransactionAtIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TRANSACTION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TRANSACTION;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.getTypicalFinancialDatabase;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "public class PaidCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFinancialDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        Transaction personWhoPaid \u003d model.getFilteredTransactionList().get(INDEX_FIRST_TRANSACTION.getZeroBased());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        PaidCommand paidCommand \u003d new PaidCommand(INDEX_FIRST_TRANSACTION);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFinancialDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        expectedModel.deleteTransaction(personWhoPaid);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        expectedModel.addPastTransaction(personWhoPaid);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        expectedModel.commitFinancialDatabase();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        String expectedMessage \u003d String.format(PaidCommand.MESSAGE_PAID_TRANSACTION_SUCCESS, personWhoPaid);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        assertCommandSuccessWithNoModelChange(paidCommand, model, expectedModel, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTransactionList().size() + 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        PaidCommand paidCommand \u003d new PaidCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getFinancialDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        assertCommandFailureWithNoModelChange(paidCommand, model, expectedModel, commandHistory,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        showTransactionAtIndex(model, INDEX_FIRST_TRANSACTION);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        Transaction personWhoPaid \u003d model.getFilteredTransactionList().get(INDEX_FIRST_TRANSACTION.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        PaidCommand paidCommand \u003d new PaidCommand(INDEX_FIRST_TRANSACTION);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        String expectedMessage \u003d String.format(PaidCommand.MESSAGE_PAID_TRANSACTION_SUCCESS, personWhoPaid);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFinancialDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        expectedModel.deleteTransaction(personWhoPaid);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        expectedModel.addPastTransaction(personWhoPaid);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        expectedModel.commitFinancialDatabase();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        assertCommandSuccessWithNoModelChange(paidCommand, model, expectedModel, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        showTransactionAtIndex(model, INDEX_FIRST_TRANSACTION);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_TRANSACTION;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getFinancialDatabase().getTransactionList().size());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        PaidCommand paidCommand \u003d new PaidCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        assertCommandFailureWithModelChange(paidCommand, model, commandHistory,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        Transaction personWhoPaid \u003d model.getFilteredTransactionList().get(INDEX_FIRST_TRANSACTION.getZeroBased());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        PaidCommand paidCommand \u003d new PaidCommand(INDEX_FIRST_TRANSACTION);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFinancialDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        expectedModel.deleteTransaction(personWhoPaid);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        expectedModel.addPastTransaction(personWhoPaid);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        expectedModel.commitFinancialDatabase();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        // delete -\u003e first transaction deleted"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        paidCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered transaction list to show all persons"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        expectedModel.undoFinancialDatabase();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        assertCommandSuccessWithNoModelChange(new UndoCommand(), model, expectedModel, commandHistory,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "                UndoCommand.MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        // redo -\u003e same first transaction deleted again"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        expectedModel.redoFinancialDatabase();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        assertCommandSuccessWithNoModelChange(new RedoCommand(), model, expectedModel, commandHistory,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "                RedoCommand.MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTransactionList().size() + 1);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        PaidCommand paidCommand \u003d new PaidCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFinancialDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        // execution failed -\u003e financial database state not added into model"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        assertCommandFailureWithNoModelChange(paidCommand, model, expectedModel, commandHistory,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        // single financial database state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        assertCommandFailureWithNoModelChange(new UndoCommand(), model, expectedModel, commandHistory,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "                UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        assertCommandFailureWithNoModelChange(new RedoCommand(), model, expectedModel, commandHistory,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "                RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "     * 1. Deletes a {@code Person} from a filtered list."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted transaction in the"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the transaction object regardless of indexing."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonDeleted() throws Exception {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        PaidCommand paidCommand \u003d new PaidCommand(INDEX_FIRST_TRANSACTION);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFinancialDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        showTransactionAtIndex(model, INDEX_SECOND_TRANSACTION);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        Transaction personWhoPaid \u003d model.getFilteredTransactionList().get(INDEX_FIRST_TRANSACTION.getZeroBased());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        expectedModel.deleteTransaction(personWhoPaid);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        expectedModel.addPastTransaction(personWhoPaid);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        expectedModel.commitFinancialDatabase();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        // delete -\u003e deletes second transaction in unfiltered transaction list/ first"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        // transaction in filtered transaction list"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        paidCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered transaction list to show all persons"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        expectedModel.undoFinancialDatabase();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        assertCommandSuccessWithNoModelChange(new UndoCommand(), model, expectedModel, commandHistory,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "                UndoCommand.MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        assertNotEquals(personWhoPaid, model.getFilteredTransactionList().get(INDEX_FIRST_TRANSACTION.getZeroBased()));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        // redo -\u003e deletes same second transaction in unfiltered transaction list"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        expectedModel.redoFinancialDatabase();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        assertCommandSuccessWithNoModelChange(new RedoCommand(), model, expectedModel, commandHistory,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "                RedoCommand.MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        PaidCommand paidFirstCommand \u003d new PaidCommand(INDEX_FIRST_TRANSACTION);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        PaidCommand paidSecondCommand \u003d new PaidCommand(INDEX_SECOND_TRANSACTION);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        assertTrue(paidFirstCommand.equals(paidFirstCommand));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        PaidCommand paidFirstCommandCopy \u003d new PaidCommand(INDEX_FIRST_TRANSACTION);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        assertTrue(paidFirstCommand.equals(paidFirstCommandCopy));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        assertFalse(paidFirstCommand.equals(1));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        assertFalse(paidFirstCommand.equals(null));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        // different transaction -\u003e returns false"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        assertFalse(paidFirstCommand.equals(paidSecondCommand));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        model.updateFilteredTransactionList(p -\u003e false);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        assertTrue(model.getFilteredTransactionList().isEmpty());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Bellaaarh": 192
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/PhotoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TRANSACTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.getTypicalFinancialDatabase;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "public class PhotoCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFinancialDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "    public void deletePhotoTest() throws IllegalValueException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        Transaction transactionToAdd \u003d model.getFilteredTransactionList().get(INDEX_FIRST_TRANSACTION.getZeroBased());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        Transaction testTransaction \u003d new Transaction(transactionToAdd);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        testTransaction.setPhoto(\"delete\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "        assertEquals(transactionToAdd, testTransaction);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weiqing-nic": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RedoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailureWithNoModelChange;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccessWithNoModelChange;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstTransaction;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.getTypicalFinancialDatabase;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalFinancialDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalFinancialDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of both models\u0027 undo/redo history"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        deleteFirstTransaction(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        deleteFirstTransaction(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        model.undoFinancialDatabase();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        model.undoFinancialDatabase();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        deleteFirstTransaction(expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        deleteFirstTransaction(expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        expectedModel.undoFinancialDatabase();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        expectedModel.undoFinancialDatabase();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple redoable states in model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        expectedModel.redoFinancialDatabase();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertCommandSuccessWithNoModelChange(new RedoCommand(), model, expectedModel, commandHistory,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                RedoCommand.MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // single redoable state in model"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        expectedModel.redoFinancialDatabase();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertCommandSuccessWithNoModelChange(new RedoCommand(), model, expectedModel, commandHistory,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                RedoCommand.MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // no redoable state in model"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertCommandFailureWithNoModelChange(new RedoCommand(), model, expectedModel, commandHistory,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 8,
      "julianc269": 14,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SelectCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailureWithModelChange;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccessWithModelChange;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showTransactionAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TRANSACTION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TRANSACTION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_TRANSACTION;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.getTypicalFinancialDatabase;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SelectCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFinancialDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalFinancialDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredTransactionList().size());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_TRANSACTION);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertExecutionSuccess(INDEX_THIRD_TRANSACTION);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredTransactionList().size() + 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        showTransactionAtIndex(model, INDEX_FIRST_TRANSACTION);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        showTransactionAtIndex(expectedModel, INDEX_FIRST_TRANSACTION);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_TRANSACTION);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        showTransactionAtIndex(model, INDEX_FIRST_TRANSACTION);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        showTransactionAtIndex(expectedModel, INDEX_FIRST_TRANSACTION);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Index outOfBoundsIndex \u003d INDEX_SECOND_TRANSACTION;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getFinancialDatabase().getTransactionList().size());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_TRANSACTION);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_TRANSACTION);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_TRANSACTION);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        // different transaction -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that {@code JumpToListRequestEvent}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * is raised with the correct index."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        String expectedMessage \u003d String.format(SelectCommand.MESSAGE_SELECT_TRANSACTION_SUCCESS, index.getOneBased());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        assertCommandSuccessWithModelChange(selectCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        JumpToListRequestEvent lastEvent \u003d (JumpToListRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertCommandFailureWithModelChange(selectCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 19,
      "julianc269": 4,
      "-": 91,
      "Bellaaarh": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SortCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccessWithModelChange;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.getTypicalFinancialDatabase;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "public class SortCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private static final int LIST_SIZE \u003d getTypicalFinancialDatabase().getTransactionList().size();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFinancialDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void execute_lowercaseTypeSortParameter_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        String typeSortParameter \u003d \"type\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        SortCommand sortCommand \u003d new SortCommand(typeSortParameter);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        String expectedMessage \u003d String.format(SortCommand.MESSAGE_SUCCESS, LIST_SIZE, typeSortParameter);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertCommandSuccessWithModelChange(sortCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void execute_lowercaseDeadlineSortParameter_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        String deadlineSortParameter \u003d \"deadline\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        SortCommand sortCommand \u003d new SortCommand(deadlineSortParameter);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        String expectedMessage \u003d String.format(SortCommand.MESSAGE_SUCCESS, LIST_SIZE, deadlineSortParameter);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertCommandSuccessWithModelChange(sortCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void execute_lowercaseAmountSortParameter_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        String amountSortParameter \u003d \"amount\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        SortCommand sortCommand \u003d new SortCommand(amountSortParameter);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        String expectedMessage \u003d String.format(SortCommand.MESSAGE_SUCCESS, LIST_SIZE, amountSortParameter);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertCommandSuccessWithModelChange(sortCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void execute_noSortParameter_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        String amountSortParameter \u003d \"\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        SortCommand sortCommand \u003d new SortCommand(amountSortParameter);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        String expectedMessage \u003d String.format(SortCommand.MESSAGE_SUCCESS, LIST_SIZE,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                SortCommand.DEFAULT_SORT_PARAMETER);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertCommandSuccessWithModelChange(sortCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void execute_singleInvalidSortParameter_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        String amountSortParameter \u003d \"invalid\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        SortCommand sortCommand \u003d new SortCommand(amountSortParameter);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        String expectedMessage \u003d String.format(SortCommand.MESSAGE_SUCCESS, LIST_SIZE,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                SortCommand.DEFAULT_SORT_PARAMETER);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertCommandSuccessWithModelChange(sortCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void execute_multipleInvalidSortParameters_success() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        String amountSortParameter \u003d \"invalid sort parameters\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        SortCommand sortCommand \u003d new SortCommand(amountSortParameter);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        String expectedMessage \u003d String.format(SortCommand.MESSAGE_SUCCESS, LIST_SIZE,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                SortCommand.DEFAULT_SORT_PARAMETER);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertCommandSuccessWithModelChange(sortCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UndoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailureWithNoModelChange;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccessWithNoModelChange;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstTransaction;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.getTypicalFinancialDatabase;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalFinancialDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalFinancialDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of models\u0027 undo/redo history"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        deleteFirstTransaction(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        deleteFirstTransaction(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        deleteFirstTransaction(expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        deleteFirstTransaction(expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple undoable states in model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        expectedModel.undoFinancialDatabase();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertCommandSuccessWithNoModelChange(new UndoCommand(), model, expectedModel, commandHistory,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                UndoCommand.MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        expectedModel.undoFinancialDatabase();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertCommandSuccessWithNoModelChange(new UndoCommand(), model, expectedModel, commandHistory,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                UndoCommand.MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // no undoable states in model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertCommandFailureWithNoModelChange(new UndoCommand(), model, expectedModel, commandHistory,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 8,
      "julianc269": 10,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AMOUNT_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AMOUNT_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEADLINE_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEADLINE_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TYPE_DESC_AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TYPE_DESC_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertAddParseSuccess;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.AMY_TRANSACTION;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.BOB_TRANSACTION;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.testutil.TransactionBuilder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        Transaction expectedPerson \u003d new TransactionBuilder(BOB_TRANSACTION).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        assertAddParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                + ADDRESS_DESC_BOB + AMOUNT_DESC_BOB + TYPE_DESC_BOB + DEADLINE_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        assertAddParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                + ADDRESS_DESC_BOB + AMOUNT_DESC_BOB + TYPE_DESC_BOB + DEADLINE_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        assertAddParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                + ADDRESS_DESC_BOB + AMOUNT_DESC_BOB + TYPE_DESC_BOB + DEADLINE_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        assertAddParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                + ADDRESS_DESC_BOB + AMOUNT_DESC_BOB + TYPE_DESC_BOB + DEADLINE_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        assertAddParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                + ADDRESS_DESC_BOB + AMOUNT_DESC_BOB + TYPE_DESC_BOB + DEADLINE_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Transaction expectedPersonMultipleTags \u003d new TransactionBuilder(BOB_TRANSACTION)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        assertAddParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                + AMOUNT_DESC_BOB + TYPE_DESC_BOB + DEADLINE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        Transaction expectedPerson \u003d new TransactionBuilder(AMY_TRANSACTION).withTags().build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        assertAddParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                + AMOUNT_DESC_AMY + TYPE_DESC_AMY + DEADLINE_DESC_AMY,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                + AMOUNT_DESC_BOB + TYPE_DESC_BOB + DEADLINE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                + AMOUNT_DESC_BOB + TYPE_DESC_BOB + DEADLINE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                + AMOUNT_DESC_BOB + TYPE_DESC_BOB + DEADLINE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                + AMOUNT_DESC_BOB + TYPE_DESC_BOB + DEADLINE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                + AMOUNT_DESC_BOB + TYPE_DESC_BOB + DEADLINE_DESC_BOB + INVALID_TAG_DESC + VALID_TAG_FRIEND,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                        + AMOUNT_DESC_BOB + TYPE_DESC_BOB + DEADLINE_DESC_BOB , Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                + ADDRESS_DESC_BOB + AMOUNT_DESC_BOB + TYPE_DESC_BOB + DEADLINE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                + TAG_DESC_FRIEND, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 8,
      "julianc269": 41,
      "-": 112
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CalendarCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "julianc269"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.logic.commands.CalendarCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "julianc269"
        },
        "content": "public class CalendarCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    private CalendarCommandParser parser \u003d new CalendarCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                CalendarCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public void parse_validArgs_returnsCalendarCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        List\u003cString\u003e validArgs \u003d Arrays.asList(\"show\", \"login\", \"logout\", \"sync\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        for (String arg : validArgs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            CalendarCommand expectedCalendarCommand \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                    new CalendarCommand(arg);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            assertParseSuccess(parser, \" \" + arg, expectedCalendarCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "julianc269"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "julianc269": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CommandParserTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    static void assertAddParseSuccess(AddCommandParser parser, String userInput, AddCommand expectedCommand) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            AddCommand command \u003d parser.parseTester(userInput);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 4,
      "julianc269": 12,
      "-": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TRANSACTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_TRANSACTION));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 2,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TRANSACTION;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TRANSACTION;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_TRANSACTION;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditTransactionDescriptor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.testutil.EditTransactionDescriptorBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_EMAIL_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_ADDRESS_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_TRANSACTION;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        EditTransactionDescriptor descriptor \u003d new EditTransactionDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_TRANSACTION;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        EditTransactionDescriptor descriptor \u003d new EditTransactionDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_TRANSACTION;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        EditTransactionDescriptor descriptor \u003d new EditTransactionDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        descriptor \u003d new EditTransactionDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        descriptor \u003d new EditTransactionDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        descriptor \u003d new EditTransactionDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        descriptor \u003d new EditTransactionDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_TRANSACTION;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        EditTransactionDescriptor descriptor \u003d new EditTransactionDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_TRANSACTION;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        EditTransactionDescriptor descriptor \u003d new EditTransactionDescriptorBuilder()"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                .withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        descriptor \u003d new EditTransactionDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_TRANSACTION;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        EditTransactionDescriptor descriptor \u003d new EditTransactionDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 12,
      "julianc269": 12,
      "-": 189
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FilterCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "julianc269"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.model.transaction.FieldContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.model.transaction.MultiFieldPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "julianc269"
        },
        "content": "public class FilterCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    private FilterCommandParser parser \u003d new FilterCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                FilterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public void parse_validArgs_returnsFilterCommand() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        FilterCommand expectedFilterCommand \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                new FilterCommand(Collections.singletonList(new FieldContainsKeywordsPredicate(FieldType.Name,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                        Arrays.asList(\"Alice\", \"Bob\"))), MultiFieldPredicate.OperatorType.AND);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        assertParseSuccess(parser, \" n/Alice;Bob\", expectedFilterCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "julianc269"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "julianc269": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FinancialDatabaseParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.logic.commands.EditCommand.EditTransactionDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TRANSACTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.logic.commands.AnalyticsCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.logic.commands.CalendarCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.logic.commands.ConvertCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.logic.commands.InterestCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.logic.commands.NextTransactionCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.logic.commands.PaidCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.logic.commands.UploadPhotoCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.logic.commands.WildcardSearchCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.person.NameContainsLettersPredicate;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.person.Photo;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.AmountBoundsPredicate;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.Deadline;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.DeadlineBoundsPredicate;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.FieldContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.MultiFieldPredicate;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.testutil.EditTransactionDescriptorBuilder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.testutil.TransactionBuilder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.testutil.TransactionUtil;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "public class FinancialDatabaseParserTest {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    private final FinancialDatabaseParser parser \u003d new FinancialDatabaseParser();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Transaction transaction \u003d new TransactionBuilder().build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(TransactionUtil.getAddCommand(transaction));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertEquals(new AddCommand(transaction), command);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void parseCommand_analytics() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        AnalyticsCommand command \u003d (AnalyticsCommand)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                parser.parseCommand(AnalyticsCommand.COMMAND_WORD + \" \" + Deadline.CURRENT_DATE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Deadline todayDeadline \u003d new Deadline(Deadline.CURRENT_DATE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertEquals(new AnalyticsCommand(todayDeadline), command);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void parseCommand_calendar() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        CalendarCommand firstCommand \u003d (CalendarCommand) parser.parseCommand("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                CalendarCommand.COMMAND_WORD + \" \" + CalendarCommand.SHOW_ACTION);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        CalendarCommand secondCommand \u003d (CalendarCommand) parser.parseCommand("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                CalendarCommand.COMMAND_WORD + \" \" + CalendarCommand.LOGIN_ACTION);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        CalendarCommand thirdCommand \u003d (CalendarCommand) parser.parseCommand("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                CalendarCommand.COMMAND_WORD + \" \" + CalendarCommand.LOGOUT_ACTION);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        CalendarCommand fourthCommand \u003d (CalendarCommand) parser.parseCommand("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                CalendarCommand.COMMAND_WORD + \" \" + CalendarCommand.SYNC_ACTION);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertEquals(new CalendarCommand(CalendarCommand.SHOW_ACTION), firstCommand);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertEquals(new CalendarCommand(CalendarCommand.LOGIN_ACTION), secondCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertEquals(new CalendarCommand(CalendarCommand.LOGOUT_ACTION), thirdCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertEquals(new CalendarCommand(CalendarCommand.SYNC_ACTION), fourthCommand);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void parseCommand_convert() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertTrue(parser.parseCommand(ConvertCommand.COMMAND_WORD) instanceof ConvertCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertTrue(parser.parseCommand(ConvertCommand.COMMAND_WORD + \" 3\") instanceof ConvertCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TRANSACTION.getOneBased());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_TRANSACTION), command);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Transaction transaction \u003d new TransactionBuilder().build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        EditTransactionDescriptor descriptor \u003d new EditTransactionDescriptorBuilder(transaction).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                + INDEX_FIRST_TRANSACTION.getOneBased() + \" \""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                + TransactionUtil.getEditTransactionDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_TRANSACTION, descriptor), command);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void parseCommand_filter() throws Exception {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        List\u003cPredicate\u003cTransaction\u003e\u003e predicates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        List\u003cString\u003e nameList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        String aliceName \u003d TypicalPersons.ALICE.getName().toString();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        String danielName \u003d TypicalPersons.DANIEL.getName().toString();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        nameList.add(TypicalPersons.ALICE.getName().toString());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        nameList.add(TypicalPersons.DANIEL.getName().toString());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        predicates.add(new FieldContainsKeywordsPredicate(FieldType.Name, nameList));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        predicates.add(new DeadlineBoundsPredicate(new Deadline(Deadline.CURRENT_DATE),"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                DeadlineBoundsPredicate.BoundType.EARLIEST));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        predicates.add(new AmountBoundsPredicate(Amount.DEFAULT_AMOUNT, AmountBoundsPredicate.BoundType.MIN));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        FilterCommand testCommand \u003d new FilterCommand(predicates, MultiFieldPredicate.OperatorType.AND);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        FilterCommand parsedCommand \u003d (FilterCommand) parser.parseCommand(FilterCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                        + CliSyntax.PREFIX_NAME + \" \" + aliceName + \";\" + danielName + \" \""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                        + CliSyntax.PREFIX_TRANSACTION_DEADLINE_EARLIEST + \" \" + Deadline.CURRENT_DATE"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                        + \" \" + CliSyntax.PREFIX_TRANSACTION_AMOUNT_MIN + \" \" + Amount.DEFAULT_AMOUNT);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertEquals(parsedCommand, testCommand);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void parseCommand_interest() throws Exception {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        String interestScheme \u003d \"simple\";"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        String rate \u003d \"3.45%\";"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        InterestCommand command \u003d (InterestCommand) parser.parseCommand("
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                InterestCommand.COMMAND_WORD + \" \" + interestScheme + \" \" + rate);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertEquals(new InterestCommand(interestScheme, rate), command);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void parseCommand_nextTransaction() throws Exception {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertTrue(parser.parseCommand(NextTransactionCommand.COMMAND_WORD) instanceof NextTransactionCommand);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertTrue(parser.parseCommand(NextTransactionCommand.COMMAND_WORD + \" 3\")"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                instanceof NextTransactionCommand);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void parseCommand_wildCardSearch() throws Exception {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        String test \u003d \"Al\";"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        List\u003cString\u003e letters \u003d List.of(test);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        NameContainsLettersPredicate predicate \u003d new NameContainsLettersPredicate(letters);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        WildcardSearchCommand command \u003d (WildcardSearchCommand) parser.parseCommand("
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                WildcardSearchCommand.COMMAND_WORD + \" \" + test);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertEquals(new WildcardSearchCommand(predicate), command);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void parseCommand_uploadPhoto() throws Exception {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        UploadPhotoCommand command \u003d (UploadPhotoCommand) parser.parseCommand(UploadPhotoCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                + \" \" + UploadPhotoCommand.DEFAULT_INDEX + \" \" + CliSyntax.PREFIX_PHOTO_PATH + \" \""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                + Photo.DEFAULT_PHOTO_PATH);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertEquals(new UploadPhotoCommand(Index.fromOneBased(UploadPhotoCommand.DEFAULT_INDEX),"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                        Photo.DEFAULT_PHOTO_PATH), command);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void parseCommand_paid() throws Exception {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        PaidCommand command \u003d (PaidCommand) parser.parseCommand(PaidCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                + PaidCommand.DEFAULT_INDEX);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertEquals(new PaidCommand(Index.fromOneBased(PaidCommand.DEFAULT_INDEX)), command);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void parseCommand_sort() throws Exception {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertTrue(parser.parseCommand(SortCommand.COMMAND_WORD) instanceof SortCommand);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertTrue(parser.parseCommand(SortCommand.COMMAND_WORD + \" \" + SortCommand.AMOUNT_SORT_PARAMETER)"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                instanceof SortCommand);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertTrue(parser.parseCommand(SortCommand.COMMAND_WORD + \" \" + SortCommand.TYPE_SORT_PARAMETER)"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                instanceof SortCommand);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertTrue(parser.parseCommand(SortCommand.COMMAND_WORD + \" \" + SortCommand.DEADLINE_SORT_PARAMETER)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                instanceof SortCommand);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertTrue(parser.parseCommand(SortCommand.COMMAND_WORD) instanceof SortCommand);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TRANSACTION.getOneBased());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_TRANSACTION), command);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 153,
      "julianc269": 2,
      "-": 109
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/InterestCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.logic.commands.InterestCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.InterestRate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.InterestScheme;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "public class InterestCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private InterestCommandParser parser \u003d new InterestCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertParseFailure(parser, \"     \","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, InterestCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void parse_validArgs_returnsInterestCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        InterestCommand expectedInterestCommand \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                new InterestCommand(\"compound\", \"3.40%\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertParseSuccess(parser, \"compound 3.40%\", expectedInterestCommand);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertParseSuccess(parser, \" \\n compound \\n \\t 3.40%  \\t\", expectedInterestCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void parse_invalidScheme_throwsParseException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertParseFailure(parser, \"sample 4.0%\", InterestScheme.MESSAGE_INTEREST_SCHEME_CONSTRAINTS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void parse_invalidRate_throwsParseException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertParseFailure(parser, \"compound 4.635%\", InterestRate.MESSAGE_INTEREST_RATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void parse_missingOneArg_throwsParseException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertParseFailure(parser, \"simple  \","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, InterestCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TRANSACTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertEquals(INDEX_FIRST_TRANSACTION, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertEquals(INDEX_FIRST_TRANSACTION, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName(null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone(null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress(null));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail(null));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(null);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(INVALID_TAG);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(null);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003c\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 8,
      "-": 200
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SelectCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TRANSACTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Test scope: similar to {@code DeleteCommandParserTest}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * @see DeleteCommandParserTest"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private SelectCommandParser parser \u003d new SelectCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsSelectCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertParseSuccess(parser, \"1\", new SelectCommand(INDEX_FIRST_TRANSACTION));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 2,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/model/FinancialDatabaseTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.ALICE_TRANSACTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.getTypicalFinancialDatabase;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.model.transaction.exceptions.DuplicateTransactionException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.testutil.TransactionBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "public class FinancialDatabaseTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private final FinancialDatabase financialDatabase \u003d new FinancialDatabase();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertEquals(Collections.emptyList(), financialDatabase.getTransactionList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        financialDatabase.resetData(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void resetData_withValidReadOnlyFinancialDatabase_replacesData() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        FinancialDatabase newData \u003d getTypicalFinancialDatabase();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        financialDatabase.resetData(newData);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertEquals(newData, financialDatabase);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        // Two transactions with the same fields"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        Transaction editedAliceTransaction \u003d new TransactionBuilder().withPerson(ALICE).withAmount(\"SGD 42.50\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                .withType(\"Loan\").build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        List\u003cTransaction\u003e newTransactions \u003d Arrays.asList(ALICE_TRANSACTION, editedAliceTransaction);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        FinancialDatabaseStub newData \u003d new FinancialDatabaseStub(newTransactions);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        thrown.expect(DuplicateTransactionException.class);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        financialDatabase.resetData(newData);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void hasTransaction_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        financialDatabase.hasTransaction(null, financialDatabase.getCurrentList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void hasTransaction_transactionNotInFinancialDatabase_returnsFalse() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        assertFalse(financialDatabase.hasTransaction(ALICE_TRANSACTION, financialDatabase.getCurrentList()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void hasTransaction_transactionInFinancialDatabase_returnsTrue() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        financialDatabase.addTransaction(ALICE_TRANSACTION, financialDatabase.getCurrentList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        assertTrue(financialDatabase.hasTransaction(ALICE_TRANSACTION, financialDatabase.getCurrentList()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void hasTransaction_identicalTransactionInFinancialDatabase_returnsTrue() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        financialDatabase.addTransaction(ALICE_TRANSACTION, financialDatabase.getCurrentList());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Transaction editedAlice \u003d new TransactionBuilder(ALICE_TRANSACTION)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        assertTrue(financialDatabase.hasTransaction(editedAlice, financialDatabase.getCurrentList()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        financialDatabase.getTransactionList().remove(0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * A stub ReadOnlyFinancialDatabase whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private static class FinancialDatabaseStub implements ReadOnlyFinancialDatabase {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        private final ObservableList\u003cTransaction\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        private final ObservableList\u003cTransaction\u003e pastTransactions \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        FinancialDatabaseStub(Collection\u003cTransaction\u003e persons) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        public ObservableList\u003cTransaction\u003e getTransactionList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        public ObservableList\u003cTransaction\u003e getPastTransactionList() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            return pastTransactions;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 94,
      "julianc269": 7,
      "Bellaaarh": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TRANSACTIONS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.ALICE_TRANSACTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.BOB_TRANSACTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.testutil.FinancialDatabaseBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        modelManager.hasTransaction(null);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        assertFalse(modelManager.hasTransaction(ALICE_TRANSACTION));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        modelManager.addTransaction(ALICE_TRANSACTION);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        assertTrue(modelManager.hasTransaction(ALICE_TRANSACTION));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        modelManager.getFilteredTransactionList().remove(0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        FinancialDatabase addressBook \u003d new FinancialDatabaseBuilder()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                .withTransaction(ALICE_TRANSACTION)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                .withTransaction(BOB_TRANSACTION).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        FinancialDatabase differentAddressBook \u003d new FinancialDatabase();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        String[] keywords \u003d ALICE_TRANSACTION.getPerson().getName().toString().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        modelManager.updateFilteredTransactionList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        modelManager.updateFilteredTransactionList(PREDICATE_SHOW_ALL_TRANSACTIONS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        differentUserPrefs.setDebtTrackerFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 7,
      "julianc269": 10,
      "-": 69
    }
  },
  {
    "path": "src/test/java/seedu/address/model/VersionedFinancialDatabaseTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "julianc269"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.ALICE_TRANSACTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.BOB_TRANSACTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.CARL_TRANSACTION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.testutil.FinancialDatabaseBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "julianc269"
        },
        "content": "public class VersionedFinancialDatabaseTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private final ReadOnlyFinancialDatabase addressBookWithAmy \u003d new FinancialDatabaseBuilder()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            .withTransaction(ALICE_TRANSACTION)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private final ReadOnlyFinancialDatabase addressBookWithBob \u003d new FinancialDatabaseBuilder()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            .withTransaction(BOB_TRANSACTION)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private final ReadOnlyFinancialDatabase addressBookWithCarl \u003d new FinancialDatabaseBuilder()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            .withTransaction(CARL_TRANSACTION)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    private final ReadOnlyFinancialDatabase emptyAddressBook \u003d new FinancialDatabaseBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public void commit_singleAddressBook_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        VersionedFinancialDatabase versionedFinancialDatabase \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        versionedFinancialDatabase.commit();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertAddressBookListStatus(versionedFinancialDatabase,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                emptyAddressBook,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public void commit_multipleAddressBookPointerAtEndOfStateList_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        VersionedFinancialDatabase versionedFinancialDatabase \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        versionedFinancialDatabase.commit();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertAddressBookListStatus(versionedFinancialDatabase,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                Arrays.asList(emptyAddressBook, addressBookWithAmy, addressBookWithBob),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                addressBookWithBob,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public void commit_multipleAddressBookPointerNotAtEndOfStateList_statesAfterPointerRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        VersionedFinancialDatabase versionedFinancialDatabase \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedFinancialDatabase, 2);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        versionedFinancialDatabase.commit();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertAddressBookListStatus(versionedFinancialDatabase,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                emptyAddressBook,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        VersionedFinancialDatabase versionedFinancialDatabase \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertTrue(versionedFinancialDatabase.canUndo());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        VersionedFinancialDatabase versionedFinancialDatabase \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedFinancialDatabase, 1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertTrue(versionedFinancialDatabase.canUndo());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public void canUndo_singleAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        VersionedFinancialDatabase versionedFinancialDatabase \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertFalse(versionedFinancialDatabase.canUndo());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtStartOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        VersionedFinancialDatabase versionedFinancialDatabase \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedFinancialDatabase, 2);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertFalse(versionedFinancialDatabase.canUndo());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public void canRedo_multipleAddressBookPointerNotAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        VersionedFinancialDatabase versionedFinancialDatabase \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedFinancialDatabase, 1);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertTrue(versionedFinancialDatabase.canRedo());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public void canRedo_multipleAddressBookPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        VersionedFinancialDatabase versionedFinancialDatabase \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedFinancialDatabase, 2);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertTrue(versionedFinancialDatabase.canRedo());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public void canRedo_singleAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        VersionedFinancialDatabase versionedFinancialDatabase \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertFalse(versionedFinancialDatabase.canRedo());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public void canRedo_multipleAddressBookPointerAtEndOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        VersionedFinancialDatabase versionedFinancialDatabase \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertFalse(versionedFinancialDatabase.canRedo());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public void undo_multipleAddressBookPointerAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        VersionedFinancialDatabase versionedFinancialDatabase \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        versionedFinancialDatabase.undo();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertAddressBookListStatus(versionedFinancialDatabase,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                addressBookWithAmy,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                Collections.singletonList(addressBookWithBob));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public void undo_multipleAddressBookPointerNotAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        VersionedFinancialDatabase versionedFinancialDatabase \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedFinancialDatabase, 1);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        versionedFinancialDatabase.undo();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertAddressBookListStatus(versionedFinancialDatabase,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                emptyAddressBook,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                Arrays.asList(addressBookWithAmy, addressBookWithBob));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public void undo_singleAddressBook_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        VersionedFinancialDatabase versionedFinancialDatabase \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertThrows(VersionedFinancialDatabase.NoUndoableStateException.class, versionedFinancialDatabase::undo);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public void undo_multipleAddressBookPointerAtStartOfStateList_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        VersionedFinancialDatabase versionedFinancialDatabase \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedFinancialDatabase, 2);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertThrows(VersionedFinancialDatabase.NoUndoableStateException.class, versionedFinancialDatabase::undo);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public void redo_multipleAddressBookPointerNotAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        VersionedFinancialDatabase versionedFinancialDatabase \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedFinancialDatabase, 1);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        versionedFinancialDatabase.redo();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertAddressBookListStatus(versionedFinancialDatabase,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                Arrays.asList(emptyAddressBook, addressBookWithAmy),"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                addressBookWithBob,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public void redo_multipleAddressBookPointerAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        VersionedFinancialDatabase versionedFinancialDatabase \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedFinancialDatabase, 2);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        versionedFinancialDatabase.redo();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertAddressBookListStatus(versionedFinancialDatabase,"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                addressBookWithAmy,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                Collections.singletonList(addressBookWithBob));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public void redo_singleAddressBook_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        VersionedFinancialDatabase versionedFinancialDatabase \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertThrows(VersionedFinancialDatabase.NoRedoableStateException.class, versionedFinancialDatabase::redo);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public void redo_multipleAddressBookPointerAtEndOfStateList_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        VersionedFinancialDatabase versionedFinancialDatabase \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertThrows(VersionedFinancialDatabase.NoRedoableStateException.class, versionedFinancialDatabase::redo);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        VersionedFinancialDatabase versionedFinancialDatabase \u003d prepareAddressBookList(addressBookWithAmy,"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                addressBookWithBob);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        VersionedFinancialDatabase copy \u003d prepareAddressBookList(addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertTrue(versionedFinancialDatabase.equals(copy));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertTrue(versionedFinancialDatabase.equals(versionedFinancialDatabase));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertFalse(versionedFinancialDatabase.equals(null));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertFalse(versionedFinancialDatabase.equals(1));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        // different state list -\u003e returns false"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        VersionedFinancialDatabase differentAddressBookList \u003d prepareAddressBookList(addressBookWithBob,"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                addressBookWithCarl);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertFalse(versionedFinancialDatabase.equals(differentAddressBookList));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        // different current pointer index -\u003e returns false"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        VersionedFinancialDatabase differentCurrentStatePointer \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedFinancialDatabase, 1);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertFalse(versionedFinancialDatabase.equals(differentCurrentStatePointer));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * Asserts that {@code VersionedFinancialDatabase} is currently pointing at {@code expectedCurrentState},"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * states before {@code VersionedFinancialDatabase#currentStatePointer} is equal to"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * {@code expectedStatesBeforePointer}, and states after {@code VersionedFinancialDatabase#currentStatePointer}"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * is equal to {@code expectedStatesAfterPointer}."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private void assertAddressBookListStatus(VersionedFinancialDatabase versionedFinancialDatabase,"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                                             List\u003cReadOnlyFinancialDatabase\u003e expectedStatesBeforePointer,"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                                             ReadOnlyFinancialDatabase expectedCurrentState,"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                                             List\u003cReadOnlyFinancialDatabase\u003e expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        // check state currently pointing at is correct"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertEquals(new FinancialDatabase(versionedFinancialDatabase), expectedCurrentState);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        // shift pointer to start of state list"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        while (versionedFinancialDatabase.canUndo()) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            versionedFinancialDatabase.undo();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        // check states before pointer are correct"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        for (ReadOnlyFinancialDatabase expectedAddressBook : expectedStatesBeforePointer) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            assertEquals(expectedAddressBook, new FinancialDatabase(versionedFinancialDatabase));"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            versionedFinancialDatabase.redo();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        // check states after pointer are correct"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        for (ReadOnlyFinancialDatabase expectedAddressBook : expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            versionedFinancialDatabase.redo();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            assertEquals(expectedAddressBook, new FinancialDatabase(versionedFinancialDatabase));"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        // check that there are no more states after pointer"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertFalse(versionedFinancialDatabase.canRedo());"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        // revert pointer to original position"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        expectedStatesAfterPointer.forEach(unused -\u003e versionedFinancialDatabase.undo());"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Creates and returns a {@code VersionedFinancialDatabase} with the {@code addressBookStates} added into it,"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * and the {@code VersionedFinancialDatabase#currentStatePointer} at the end of list."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     */"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    private VersionedFinancialDatabase prepareAddressBookList(ReadOnlyFinancialDatabase... addressBookStates) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        assertFalse(addressBookStates.length \u003d\u003d 0);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        VersionedFinancialDatabase versionedFinancialDatabase \u003d new VersionedFinancialDatabase(addressBookStates[0]);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        for (int i \u003d 1; i \u003c addressBookStates.length; i++) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            versionedFinancialDatabase.resetData(addressBookStates[i]);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            versionedFinancialDatabase.commit();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return versionedFinancialDatabase;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * Shifts the {@code VersionedFinancialDatabase#currentStatePointer} by {@code count} to the left of its list."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     */"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private void shiftCurrentStatePointerLeftwards(VersionedFinancialDatabase versionedFinancialDatabase, int count) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            versionedFinancialDatabase.undo();"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "julianc269"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 94,
      "julianc269": 212,
      "Bellaaarh": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/NameContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.testutil.TransactionBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        // different transaction -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        assertTrue(predicate.test(new TransactionBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        assertTrue(predicate.test(new TransactionBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        assertTrue(predicate.test(new TransactionBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        assertTrue(predicate.test(new TransactionBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        assertFalse(predicate.test(new TransactionBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        assertFalse(predicate.test(new TransactionBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        assertFalse(predicate.test(new TransactionBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 1,
      "julianc269": 8,
      "-": 66
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PersonTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().remove(0);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        // different Person -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        // different phone -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertTrue(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        // different email -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertTrue(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        // different address -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertTrue(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        // different tags -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertTrue(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 8,
      "julianc269": 1,
      "-": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/model/transaction/AmountTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "public class AmountTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Amount(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void constructor_invalidAmount_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        String invalidAmount \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Amount(invalidAmount));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void isCorrectAmount() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        // null amount"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Amount.isValidAmount(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        //invalid amounts"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"\")); //empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertFalse(Amount.isValidAmount(\" \")); //spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"$ 35.20\")); //Currency symbol not allowed"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"37.45\")); //does not have currency code as prefix"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"SGD132.50\")); //does not have space between currency code and amount"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"EURA 156.75\")); //has 4 letter currency code"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"MYR 165.580\")); //the amount is not rounded to two decimal digits"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        //valid amounts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"SGD 227.50\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"USD 25987465246.50\")); //large payment sum"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/transaction/DeadlineTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private static final int POSITIVE_ONE \u003d 1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private static final int NEGATIVE_ONE \u003d -1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Deadline(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void constructor_invalidDeadline_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        String invalidDeadline \u003d \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Deadline(invalidDeadline));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void isCorrectDeadline() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        /* null deadline */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Deadline.matchesDateFormat(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        /* invalid deadlines */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        //empty string"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertFalse(Deadline.matchesDateFormat(\"\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        //spaces only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertFalse(Deadline.matchesDateFormat(\" \"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        //incorrect day of the month"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Assert.assertThrows(DateTimeException.class, () -\u003e Deadline.checkDateInFuture(\"30/02/2019\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        //incorrect day"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Assert.assertThrows(DateTimeException.class, () -\u003e Deadline.checkDateInFuture(\"152/12/2019\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        //incorrect month"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Assert.assertThrows(DateTimeException.class, () -\u003e Deadline.checkDateInFuture(\"12/13/2018\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        //incorrect year"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Assert.assertThrows(DateTimeException.class, () -\u003e Deadline.checkDateInFuture(\"31/11/201\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        //deadline has already passed"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Assert.assertThrows(DateTimeException.class, () -\u003e Deadline.checkDateInFuture(\"24/09/2018\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        /* valid deadlines */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertTrue(Deadline.matchesDateFormat(\"25/12/2018\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertTrue(Deadline.matchesDateFormat(\"28/04/2019\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    //TODO: improve this randomized testing"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Generates a random date (date with random valid values for day, month and year)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private String generateOneDate() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Random rng \u003d new Random();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        String dateFormat \u003d \"%d/%d/%d\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        int dayOfMonth \u003d rng.nextInt(31) + 1; //day range is from 1 - 31"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        int month \u003d rng.nextInt(12) + 1; //month range is from 1 - 12"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        int year \u003d rng.nextInt(21) + 2018; //testing for uptil 20 years from baseline year 2018"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        String date \u003d String.format(dateFormat, dayOfMonth, month, year);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        if (!Deadline.matchesDateFormat(date)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            return generateOneDate();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            Deadline.checkDateInFuture(date);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        } catch (DateTimeException ex) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            return generateOneDate();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Generates two random dates with one date occurring chronologically before the other."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private String[] generateTwoDates() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Random rng \u003d new Random();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        String dateFormat \u003d \"%d/%d/%d\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        int firstDayOfMonth \u003d rng.nextInt(15) + 1; //day range for first date is from 1 - 15"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        int secondDayOfMonth \u003d rng.nextInt(16) + 16; //day range for second date is from 16 - 31"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        int firstMonth \u003d rng.nextInt(6) + 1; //month range for first month is from 1 - 6"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        int secondMonth \u003d rng.nextInt(6) + 7; //month range for second month is from 7 - 12"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        int firstYear \u003d rng.nextInt(10) + 2018; //year range is from 2018 - 2027"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        int secondYear \u003d rng.nextInt(11) + 2028; //year range is from 2028 - 2038"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        String firstDate \u003d String.format(dateFormat, firstDayOfMonth, firstMonth, firstYear);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        String secondDate \u003d String.format(dateFormat, secondDayOfMonth, secondMonth, secondYear);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        if (!Deadline.matchesDateFormat(firstDate) || !Deadline.matchesDateFormat(secondDate)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            return generateTwoDates();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            Deadline.checkDateInFuture(firstDate);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            Deadline.checkDateInFuture(secondDate);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        } catch (DateTimeException ex) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            return generateTwoDates();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return new String[]{firstDate, secondDate};"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void compareTo_sameDeadlines_returnZero() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        String date \u003d generateOneDate();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Deadline firstDeadline \u003d new Deadline(date);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Deadline secondDeadline \u003d new Deadline(date);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertEquals(firstDeadline.compareTo(secondDeadline), 0);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void compareTo_differentDeadlines_returnNegativeOne() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        String[] dates \u003d generateTwoDates();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Deadline firstDeadline \u003d new Deadline(dates[0]);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Deadline secondDeadline \u003d new Deadline(dates[1]);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertEquals(firstDeadline.compareTo(secondDeadline), -1);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void compareTo_differentDeadlines_returnPositiveOne() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        String[] dates \u003d generateTwoDates();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Deadline firstDeadline \u003d new Deadline(dates[1]);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Deadline secondDeadline \u003d new Deadline(dates[0]);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertEquals(firstDeadline.compareTo(secondDeadline), 1);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 125
    }
  },
  {
    "path": "src/test/java/seedu/address/model/transaction/InterestRateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "public class InterestRateTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void constructorTest() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new InterestRate(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void getValueTest() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        InterestRate interestRate \u003d new InterestRate(\"2.56%\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        double rate \u003d interestRate.getValue();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertEquals(0.0256, rate, 0.002);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void isValidInterestRateTest() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        //null interest rate"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e InterestRate.isValidInterestRate(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        //invalid interest rates"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertFalse(InterestRate.isValidInterestRate(\"1.53\")); //interest rate not expressed as a percentage"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertFalse(InterestRate.isValidInterestRate(\"1%\")); //missing fractional part"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertFalse(InterestRate.isValidInterestRate(\"4.01%\")); //slightly above the capped interest rate"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertFalse(InterestRate.isValidInterestRate(\"4.73%\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertFalse(InterestRate.isValidInterestRate(\"125.35%\")); //a very large interest rate"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertFalse(InterestRate.isValidInterestRate(\"1.5%\")); //less than 2 decimal places"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertFalse(InterestRate.isValidInterestRate(\"1.534%\")); //more than 2 decimal places"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertFalse(InterestRate.isValidInterestRate(\"1.a8%\")); //contains alphabetic character after decimal point"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertFalse(InterestRate.isValidInterestRate(\"d.12%\")); //contains alphabetic character before decimal point"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        //valid interest rates"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertTrue(InterestRate.isValidInterestRate(\"1.53%\")); //a very large interest rate"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertTrue(InterestRate.isValidInterestRate(\"4.00%\")); //equal to the capped interest rate"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertTrue(InterestRate.isValidInterestRate(\"3.99%\")); //slightly lesser than the capped interest rate"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        String rate \u003d \"2.53%\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        InterestRate interestRate \u003d new InterestRate(rate);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertEquals(interestRate.toString(), rate);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void equalsTest() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        String rate \u003d \"3.46%\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        String amount \u003d \"JPY 55.60\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        InterestRate firstInterestRate \u003d new InterestRate(rate);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        InterestRate secondInterestRate \u003d new InterestRate(rate);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Amount amountNotInterestRate \u003d new Amount(amount);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertEquals(firstInterestRate, secondInterestRate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertNotEquals(firstInterestRate, amountNotInterestRate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/model/transaction/PhotoTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "//travis not able to test this"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "// package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "//"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "//import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "//import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "//import java.util.concurrent.atomic.AtomicReference;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "//import org.junit.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "//import seedu.address.model.person.Photo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "//public class PhotoTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "//    public void makePhoto_successfullyCreatePhoto() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "//        AtomicReference\u003cPhoto\u003e newPhoto \u003d new AtomicReference\u003c\u003e(new Photo());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "//            newPhoto.get().makePhotoFolder();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "//        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "//            e.printStackTrace();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "//        //This test does not work with travis"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "//        Assert.assertTrue(new File(Photo.getOperatingPath()).exists());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "//        //Assert.assertThrows(IOException.class, () -\u003e newPhoto.makePhoto(folderPath, newPhoto.getPicturePath()));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weiqing-nic"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "weiqing-nic": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() throws DataConversionException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(\"NotJsonFormatUserPrefs.json\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(1000, 500, 300, 100);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        userPrefs.setDebtTrackerFilePath(Paths.get(\"data/debttracker.xml\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(new UserPrefs(), null);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(1200, 200, 0, 2);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.getRoot().toPath().resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(5, 5, 5, 5);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 1,
      "-": 133
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.getTypicalFinancialDatabase;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.commons.events.model.FinancialDatabaseChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.model.FinancialDatabase;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.model.ReadOnlyFinancialDatabase;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        XmlFinancialDatabaseStorage addressBookStorage \u003d new XmlFinancialDatabaseStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(300, 600, 4, 6);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link XmlAddressBookStorage} class."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link XmlAddressBookStorageTest} class."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        FinancialDatabase original \u003d getTypicalFinancialDatabase();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        storageManager.saveFinancialDatabase(original);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        ReadOnlyFinancialDatabase retrieved \u003d storageManager.readFinancialDatabase().get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        assertEquals(original, new FinancialDatabase(retrieved));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        assertNotNull(storageManager.getFinancialDatabaseFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public void handleFinancialDatabaseChangedEvent_exceptionThrown_eventRaised() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Storage storage \u003d new StorageManager("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                new XmlFinancialDatabaseStorageExceptionThrowingStub(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(Paths.get(\"dummy\")));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        storage.handleFinancialDatabaseChangedEvent(new FinancialDatabaseChangedEvent(new FinancialDatabase()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Stub class to throw an exception when the save method is called"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    class XmlFinancialDatabaseStorageExceptionThrowingStub extends XmlFinancialDatabaseStorage {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        public XmlFinancialDatabaseStorageExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        public void saveFinancialDatabase(ReadOnlyFinancialDatabase financialDatabase, Path filePath)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 5,
      "julianc269": 13,
      "-": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAdaptedTransactionTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.storage.XmlAdaptedTransaction.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.BOB_TRANSACTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "public class XmlAdaptedTransactionTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private static final String INVALID_TYPE \u003d \"Borrow\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private static final String INVALID_AMOUNT \u003d \"46.50\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private static final String INVALID_DEADLINE \u003d \"21112018\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private static final String VALID_TYPE \u003d \"Loan\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private static final String VALID_AMOUNT \u003d \"SGD 45.60\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private static final String VALID_DEADLINE \u003d \"21/11/2018\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private static final String VALID_NAME \u003d BOB.getName().toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private static final String VALID_PHONE \u003d BOB.getPhone().toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private static final String VALID_EMAIL \u003d BOB.getEmail().toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BOB.getAddress().toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BOB.getTags().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void toModelType_validTransactionDetails_returnsTransaction() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        XmlAdaptedTransaction transaction \u003d new XmlAdaptedTransaction(BOB_TRANSACTION);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertEquals(BOB_TRANSACTION, transaction.toModelType());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        XmlAdaptedTransaction transaction \u003d new XmlAdaptedTransaction(VALID_TYPE, VALID_AMOUNT, VALID_DEADLINE,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, transaction::toModelType);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        XmlAdaptedTransaction transaction \u003d new XmlAdaptedTransaction(VALID_TYPE, VALID_AMOUNT, VALID_DEADLINE,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, transaction::toModelType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        XmlAdaptedTransaction transaction \u003d new XmlAdaptedTransaction(VALID_TYPE, VALID_AMOUNT, VALID_DEADLINE,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, transaction::toModelType);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        XmlAdaptedTransaction transaction \u003d new XmlAdaptedTransaction(VALID_TYPE, VALID_AMOUNT, VALID_DEADLINE,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, transaction::toModelType);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        XmlAdaptedTransaction transaction \u003d new XmlAdaptedTransaction(VALID_TYPE, VALID_AMOUNT, VALID_DEADLINE,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, transaction::toModelType);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        XmlAdaptedTransaction transaction \u003d new XmlAdaptedTransaction(VALID_TYPE, VALID_AMOUNT, VALID_DEADLINE,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, transaction::toModelType);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        XmlAdaptedTransaction transaction \u003d new XmlAdaptedTransaction(VALID_TYPE, VALID_AMOUNT, VALID_DEADLINE,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_ADDRESS_CONSTRAINTS;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, transaction::toModelType);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        XmlAdaptedTransaction transaction \u003d new XmlAdaptedTransaction(VALID_TYPE, VALID_AMOUNT, VALID_DEADLINE,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_TAGS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, transaction::toModelType);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        XmlAdaptedTransaction transaction \u003d new XmlAdaptedTransaction(VALID_TYPE, VALID_AMOUNT, VALID_DEADLINE,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, transaction::toModelType);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 30,
      "julianc269": 15,
      "-": 76
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlFinancialDatabaseStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.ALICE_TRANSACTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.HOON_TRANSACTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.IDA_TRANSACTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.getTypicalFinancialDatabase;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.model.FinancialDatabase;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.model.ReadOnlyFinancialDatabase;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "julianc269"
        },
        "content": "public class XmlFinancialDatabaseStorageTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            \"XmlFinancialDatabaseStorageTest\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void readFinancialDatabase_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        readFinancialDatabase(null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private java.util.Optional\u003cReadOnlyFinancialDatabase\u003e readFinancialDatabase(String filePath) throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return new XmlFinancialDatabaseStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                .readFinancialDatabase(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertFalse(readFinancialDatabase(\"NonExistentFile.xml\").isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notXmlFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        readFinancialDatabase(\"NotXmlFormatFinancialDatabase.xml\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void readFinancialDatabase_invalidTransactionFinancialDatabase_throwDataConversionException()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        readFinancialDatabase(\"invalidTransactionFinancialDatabase.xml\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void readFinancialDatabase_invalidAndValidTransactionFinancialDatabase_throwDataConversionException()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        readFinancialDatabase(\"invalidAndValidTransactionFinancialDatabase.xml\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void readAndSaveFinancialDatabase_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempAddressBook.xml\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        FinancialDatabase original \u003d getTypicalFinancialDatabase();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        XmlFinancialDatabaseStorage xmlAddressBookStorage \u003d new XmlFinancialDatabaseStorage(filePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        //Save in new file and read back"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        xmlAddressBookStorage.saveFinancialDatabase(original, filePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        ReadOnlyFinancialDatabase readBack \u003d xmlAddressBookStorage.readFinancialDatabase(filePath).get();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        assertEquals(original, new FinancialDatabase(readBack));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        original.addTransaction(HOON_TRANSACTION, original.getCurrentList());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        original.removeTransaction(ALICE_TRANSACTION, original.getCurrentList());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        xmlAddressBookStorage.saveFinancialDatabase(original, filePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        readBack \u003d xmlAddressBookStorage.readFinancialDatabase(filePath).get();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        assertEquals(original, new FinancialDatabase(readBack));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        //Save and read without specifying file path"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        original.addTransaction(IDA_TRANSACTION, original.getCurrentList());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        xmlAddressBookStorage.saveFinancialDatabase(original); //file path not specified"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        readBack \u003d xmlAddressBookStorage.readFinancialDatabase().get(); //file path not specified"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        assertEquals(original, new FinancialDatabase(readBack));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public void saveFinancialDatabase_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        saveFinancialDatabase(null, \"SomeFile.xml\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    private void saveFinancialDatabase(ReadOnlyFinancialDatabase addressBook, String filePath) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            new XmlFinancialDatabaseStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                    .saveFinancialDatabase(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public void saveFinancialDatabase_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        saveFinancialDatabase(new FinancialDatabase(), null);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 16,
      "julianc269": 26,
      "-": 87,
      "Bellaaarh": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlSerializableDebtTrackerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.model.FinancialDatabase;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.testutil.TypicalTransactions;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "public class XmlSerializableDebtTrackerTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            \"XmlSerializableFinancialDatabaseTest\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private static final Path TYPICAL_TRANSACTIONS_FILE \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"typicalTransactionsFinancialDatabase.xml\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private static final Path INVALID_TRANSACTION_FILE \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"invalidTransactionFinancialDatabase.xml\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private static final Path DUPLICATE_TRANSACTION_FILE \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"duplicateTransactionFinancialDatabase.xml\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        XmlSerializableFinancialDatabase dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_TRANSACTIONS_FILE,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                XmlSerializableFinancialDatabase.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        FinancialDatabase addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        FinancialDatabase typicalPersonsFinancialDatabase \u003d TypicalTransactions.getTypicalFinancialDatabase();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertEquals(addressBookFromFile, typicalPersonsFinancialDatabase);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        XmlSerializableFinancialDatabase dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_TRANSACTION_FILE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                XmlSerializableFinancialDatabase.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        XmlSerializableFinancialDatabase dataFromFile \u003d XmlUtil.getDataFromFile(DUPLICATE_TRANSACTION_FILE,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                XmlSerializableFinancialDatabase.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        thrown.expectMessage(XmlSerializableFinancialDatabase.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 14,
      "julianc269": 7,
      "-": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditTransactionDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditTransactionDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.Deadline;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.Type;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": " * A utility class to help with building EditTransactionDescriptor objects."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "public class EditTransactionDescriptorBuilder {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private EditTransactionDescriptor descriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public EditTransactionDescriptorBuilder() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        descriptor \u003d new EditTransactionDescriptor();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public EditTransactionDescriptorBuilder(EditTransactionDescriptor descriptor) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        this.descriptor \u003d new EditTransactionDescriptor(descriptor);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Returns an {@code EditTransactionDescriptor} with fields containing {@code transaction}\u0027s details"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public EditTransactionDescriptorBuilder(Transaction transaction) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        descriptor \u003d new EditTransactionDescriptor();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        descriptor.setAmount(transaction.getAmount());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        descriptor.setType(transaction.getType());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        descriptor.setDeadline(transaction.getDeadline());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        descriptor.setAddress(transaction.getPerson().getAddress());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        descriptor.setEmail(transaction.getPerson().getEmail());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        descriptor.setName(transaction.getPerson().getName());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        descriptor.setPhone(transaction.getPerson().getPhone());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        descriptor.setTags(transaction.getPerson().getTags());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Sets the {@code Amount} of the {@code EditTransactionDescriptor} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public EditTransactionDescriptorBuilder withAmount(String amount) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        descriptor.setAmount(new Amount(amount));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Sets the {@code Type} of the {@code EditTransactionDescriptor} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public EditTransactionDescriptorBuilder withType(String type) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        descriptor.setType(new Type(type));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Sets the {@code Person} of the {@code EditTransactionDescriptor} that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public EditTransactionDescriptorBuilder withDeadline(String deadline) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        descriptor.setDeadline(new Deadline(deadline));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public EditTransactionDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public EditTransactionDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public EditTransactionDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public EditTransactionDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public EditTransactionDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public EditTransactionDescriptor build() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 112,
      "julianc269": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/FinancialDatabaseBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "julianc269"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.model.FinancialDatabase;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "julianc269"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "julianc269"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "julianc269"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "julianc269"
        },
        "content": " *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "julianc269"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "julianc269"
        },
        "content": "public class FinancialDatabaseBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    private FinancialDatabase financialDatabase;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public FinancialDatabaseBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        financialDatabase \u003d new FinancialDatabase();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public FinancialDatabaseBuilder(FinancialDatabase addressBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        this.financialDatabase \u003d addressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * Adds a new {@code Person} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * @param transaction"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public FinancialDatabaseBuilder withTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        financialDatabase.addTransaction(transaction, financialDatabase.getCurrentList());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public FinancialDatabase build() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        return financialDatabase;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "julianc269"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 3,
      "julianc269": 31,
      "Bellaaarh": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Returns the middle index of the transaction in the {@code model}\u0027s transaction list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return Index.fromOneBased(model.getFilteredTransactionList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Returns the last index of the transaction in the {@code model}\u0027s transaction list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return Index.fromOneBased(model.getFilteredTransactionList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Returns the transaction in the {@code model}\u0027s transaction list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static Transaction getTransaction(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return model.getFilteredTransactionList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 8,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TransactionBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.Deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.Type;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "julianc269"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "julianc269"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "julianc269"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "public class TransactionBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private static final String DEFAULT_TYPE \u003d \"Loan\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private static final String DEFAULT_AMOUNT \u003d \"SGD 10.00\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private static final Person DEFAULT_PERSON \u003d TypicalPersons.AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private static final String DEFAULT_DEADLINE \u003d \"12/11/2018\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private Type type;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private Amount amount;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private Person person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private Deadline deadline;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public TransactionBuilder() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        type \u003d new Type(DEFAULT_TYPE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        amount \u003d new Amount(DEFAULT_AMOUNT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        person \u003d DEFAULT_PERSON;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        deadline \u003d new Deadline(DEFAULT_DEADLINE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Initializes the TransactionBuilder with the data of {@code transactionToCopy}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public TransactionBuilder(Transaction transactionToCopy) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        type \u003d transactionToCopy.getType();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        amount \u003d transactionToCopy.getAmount();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        person \u003d transactionToCopy.getPerson();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        deadline \u003d transactionToCopy.getDeadline();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Sets the {@code Type} of the {@code Transaction} that we are building."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public TransactionBuilder withType(String type) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        this.type \u003d new Type(type);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Sets the {@code Amount} of the {@code Transaction} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public TransactionBuilder withAmount(String amount) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        this.amount \u003d new Amount(amount);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * Sets the {@code Deadline} of the {@code Transaction} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public TransactionBuilder withDeadline(String deadline) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        this.deadline \u003d new Deadline(deadline);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Sets the {@code Person} of the {@code Transaction} that we are building."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public TransactionBuilder withPerson(Person person) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * Sets the {@code Name} of the {@code Transaction} that we are building."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public TransactionBuilder withName(String name) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        this.person \u003d new Person(new Name(name), this.person.getPhone(), this.person.getEmail(),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                this.person.getAddress(), this.person.getTags());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * Sets the {@code Address} of the {@code Transaction} that we are building."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public TransactionBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        this.person \u003d new Person(this.person.getName(), this.person.getPhone(), this.person.getEmail(),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                new Address(address), this.person.getTags());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * Sets the {@code Email} of the {@code Transaction} that we are building."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public TransactionBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        this.person \u003d new Person(this.person.getName(), this.person.getPhone(), new Email(email),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                this.person.getAddress(), this.person.getTags());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * Sets the {@code Phone} of the {@code Transaction} that we are building."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public TransactionBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        this.person \u003d new Person(this.person.getName(), new Phone(phone), this.person.getEmail(),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                this.person.getAddress(), this.person.getTags());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     * Sets the {@code Tags} of the {@code Transaction} that we are building."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "julianc269"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public TransactionBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        this.person \u003d new Person(this.person.getName(), this.person.getPhone(), this.person.getEmail(),"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                this.person.getAddress(), SampleDataUtil.getTagSet(tags));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public Transaction build() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return new Transaction(type, amount, deadline, person);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 69,
      "julianc269": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TransactionUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TRANSACTION_AMOUNT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TRANSACTION_DEADLINE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TRANSACTION_TYPE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditTransactionDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "public class TransactionUtil {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Returns an add command string for adding the {@code transaction}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static String getAddCommand(Transaction transaction) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getTransactionDetails(transaction);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Returns the part of command string for the given {@code transaction}\u0027s details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static String getTransactionDetails(Transaction transaction) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Person person \u003d transaction.getPerson();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        sb.append(PREFIX_TRANSACTION_TYPE + transaction.getType().value + \" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        sb.append(PREFIX_TRANSACTION_AMOUNT + transaction.getAmount().toString() + \" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        sb.append(PREFIX_TRANSACTION_DEADLINE + transaction.getDeadline().value + \" \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().toString() + \" \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * @param descriptor"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static String getEditTransactionDescriptorDetails(EditTransactionDescriptor descriptor) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.toString()).append(\" \"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        descriptor.getAmount().ifPresent(amount -\u003e sb.append(PREFIX_TRANSACTION_AMOUNT).append(amount.toString())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                .append(\" \"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        descriptor.getDeadline().ifPresent(deadline -\u003e sb.append(PREFIX_TRANSACTION_DEADLINE).append(deadline.value)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                .append(\" \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        descriptor.getType().ifPresent(type -\u003e sb.append(PREFIX_TRANSACTION_TYPE).append(type.value)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                .append(\" \"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 21,
      "julianc269": 5,
      "-": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static final Index INDEX_FIRST_TRANSACTION \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static final Index INDEX_SECOND_TRANSACTION \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static final Index INDEX_THIRD_TRANSACTION \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 3,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            .withPhone(\"94351253\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    public static final Person JACK \u003d new PersonBuilder().withName(\"JACK lee\").withPhone(\"8402424\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "            .withEmail(\"jacklee@example.com\").withAddress(\"chinatown\").build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 6,
      "xiaoyeong": 3,
      "-": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalTransactions.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.FinancialDatabase;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": " * A utility class containing a list of {@code Transaction} objects to be used in tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "public class TypicalTransactions {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    //TODO: Update according to accepted currencies"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public static final Transaction ALICE_TRANSACTION \u003d new TransactionBuilder().withPerson(TypicalPersons.ALICE)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            .withAmount(\"SGD 42.50\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            .withType(\"Loan\").build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public static final Transaction BENSON_TRANSACTION \u003d new TransactionBuilder().withPerson(TypicalPersons.BENSON)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            .withAmount(\"AUD 12.85\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            .withType(\"Debt\").build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public static final Transaction CARL_TRANSACTION \u003d new TransactionBuilder().withPerson(TypicalPersons.CARL)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            .withAmount(\"USD 57.60\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            .withType(\"Debt\").build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public static final Transaction DANIEL_TRANSACTION \u003d new TransactionBuilder().withPerson(TypicalPersons.DANIEL)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            .withAmount(\"INR 44.70\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            .withType(\"Loan\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public static final Transaction ELLE_TRANSACTION \u003d new TransactionBuilder().withPerson(TypicalPersons.ELLE)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            .withAmount(\"CNY 47.65\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            .withType(\"Debt\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public static final Transaction FIONA_TRANSACTION \u003d new TransactionBuilder().withPerson(TypicalPersons.FIONA)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            .withAmount(\"CNY 47.25\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            .withType(\"Debt\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public static final Transaction GEORGE_TRANSACTION \u003d new TransactionBuilder().withPerson(TypicalPersons.GEORGE)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            .withAmount(\"CNY 47.15\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            .withType(\"Debt\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public static final Transaction HOON_TRANSACTION \u003d new TransactionBuilder().withPerson(TypicalPersons.HOON)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            .withAmount(\"CNY 77.15\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            .withType(\"Debt\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public static final Transaction IDA_TRANSACTION \u003d new TransactionBuilder().withPerson(TypicalPersons.IDA)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            .withAmount(\"CNY 67.15\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            .withType(\"Debt\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    public static final Transaction JACK_TRANSACTION \u003d new TransactionBuilder().withPerson(TypicalPersons.JACK)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "            .withAmount(\"SGD 42.50\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "            .withType(\"Debt\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "            .withDeadline(\"19/11/2018\").build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public static final Transaction AMY_TRANSACTION \u003d new TransactionBuilder().withPerson(TypicalPersons.AMY)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            .withAmount(\"SGD 145.60\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            .withType(\"Loan\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            .withDeadline(\"17/11/2018\").build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public static final Transaction BOB_TRANSACTION \u003d new TransactionBuilder().withPerson(TypicalPersons.BOB)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            .withAmount(\"SGD 42.50\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            .withType(\"Loan\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            .withDeadline(\"12/11/2018\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private TypicalTransactions() {} // prevents instantiation"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static FinancialDatabase getTypicalFinancialDatabase() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        FinancialDatabase database \u003d new FinancialDatabase();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        for (Transaction transaction : getTypicalTransactions()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            database.addTransaction(transaction, database.getCurrentList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return database;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static List\u003cTransaction\u003e getTypicalTransactions() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE_TRANSACTION, BENSON_TRANSACTION, CARL_TRANSACTION,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                DANIEL_TRANSACTION, ELLE_TRANSACTION, FIONA_TRANSACTION, GEORGE_TRANSACTION));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "     * Returns an {@code AddressBook} with all the unique persons."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    public static FinancialDatabase getUniqueFinancialDatabase() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        FinancialDatabase database \u003d new FinancialDatabase();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        for (Transaction transaction : getUniqueTransactions()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "            database.addTransaction(transaction, database.getCurrentList());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        return database;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    public static List\u003cTransaction\u003e getUniqueTransactions() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE_TRANSACTION, AMY_TRANSACTION, BOB_TRANSACTION,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "                 JACK_TRANSACTION));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xiaoyeong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 36,
      "xiaoyeong": 19,
      "julianc269": 36,
      "Bellaaarh": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/BrowserPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.ALICE_TRANSACTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.commons.events.ui.TransactionPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private TransactionPanelSelectionChangedEvent selectionChangedEventStub;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanelHandle browserPanelHandle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        selectionChangedEventStub \u003d new TransactionPanelSelectionChangedEvent(ALICE_TRANSACTION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(browserPanel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // default web page"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedDefaultPageUrl \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedDefaultPageUrl, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        // associated web page of a transaction"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(selectionChangedEventStub);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        URL expectedPersonUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + ALICE_TRANSACTION.getDeadline().value"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                .replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(browserPanelHandle);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPersonUrl, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 3,
      "julianc269": 4,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/HelpWindowTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assume.assumeFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.HelpWindow.USERGUIDE_FILE_PATH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindowTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindowHandle helpWindowHandle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e helpWindow \u003d new HelpWindow());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.registerStage(helpWindow::getRoot);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindowHandle \u003d new HelpWindowHandle(helpWindow.getRoot());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedHelpPage \u003d HelpWindow.class.getResource(USERGUIDE_FILE_PATH);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedHelpPage, helpWindowHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isShowing_helpWindowIsShowing_returnsTrue() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(helpWindow::show);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(helpWindow.isShowing());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isShowing_helpWindowIsHiding_returnsFalse() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(helpWindow.isShowing());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public void focus_helpWindowNotFocused_focused() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: This test skip can be removed once this bug is fixed:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // https://github.com/javafxports/openjdk-jfx/issues/50"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        //"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // When there are two stages (stage1 and stage2) shown,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // stage1 is in focus and stage2.requestFocus() is called,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // we expect that stage1.isFocused() will return false while"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // stage2.isFocused() returns true. However, as reported in the bug report,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // both stage1.isFocused() and stage2.isFocused() returns true,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // which fails the test."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assumeFalse(\"Test skipped in headless mode: Window focus behavior is buggy.\", guiRobot.isHeadlessMode());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(helpWindow::show);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Focus on another stage to remove focus from the helpWindow"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Stage temporaryStage \u003d new Stage();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            temporaryStage.show();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            temporaryStage.requestFocus();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(helpWindow.getRoot().isFocused());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(helpWindow::focus);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(helpWindow.getRoot().isFocused());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 1,
      "-": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/PersonCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysTransaction;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import guitests.guihandles.TransactionCardHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.testutil.TransactionBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no tags"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Transaction personWithNoTags \u003d new TransactionBuilder().withTags().build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        TransactionCard personCard \u003d new TransactionCard(personWithNoTags, 1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(personCard);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardDisplay(personCard, personWithNoTags, 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // with tags"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        Transaction personWithTags \u003d new TransactionBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        personCard \u003d new TransactionCard(personWithTags, 2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(personCard);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardDisplay(personCard, personWithTags, 2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        Transaction person \u003d new TransactionBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        TransactionCard personCard \u003d new TransactionCard(person, 0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        // same transaction, same index -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        TransactionCard copy \u003d new TransactionCard(person, 0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertEquals(personCard, copy);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertEquals(personCard, personCard);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertNotEquals(null, personCard);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertNotEquals(0, personCard);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        // different transaction, same index -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        Transaction differentPerson \u003d new TransactionBuilder().withName(\"differentName\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertNotEquals(personCard, new TransactionCard(differentPerson, 0));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        // same transaction, different index -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertNotEquals(personCard, new TransactionCard(person, 1));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code personCard} displays the details of {@code expectedPerson} correctly and matches"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    private void assertCardDisplay(TransactionCard personCard, Transaction expectedPerson, int expectedId) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        TransactionCardHandle transactionCardHandle \u003d new TransactionCardHandle(personCard.getRoot());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertEquals(Integer.toString(expectedId) + \". \", transactionCardHandle.getId());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        // verify transaction details are displayed correctly"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertCardDisplaysTransaction(expectedPerson, transactionCardHandle);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 18,
      "julianc269": 10,
      "-": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/StatusBarFooterTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.AfterClass;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.commons.events.model.FinancialDatabaseChangedEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.model.FinancialDatabase;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooterTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path STUB_SAVE_LOCATION \u003d Paths.get(\"Stub\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path RELATIVE_PATH \u003d Paths.get(\".\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private static final FinancialDatabaseChangedEvent EVENT_STUB \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            new FinancialDatabaseChangedEvent(new FinancialDatabase());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBarFooterHandle statusBarFooterHandle;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setUpBeforeClass() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // inject fixed clock"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @AfterClass"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void tearDownAfterClass() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // restore original clock"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(STUB_SAVE_LOCATION);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(statusBarFooter);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // initial state"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(), SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // after address book is updated"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(EVENT_STUB);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the save location matches that of {@code expectedSaveLocation}, and the"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * sync status matches that of {@code expectedSyncStatus}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertStatusBarContent(String expectedSaveLocation, String expectedSyncStatus) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 2,
      "julianc269": 2,
      "-": 74
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/TransactionListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TRANSACTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.getTypicalTransactions;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysTransaction;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import guitests.guihandles.TransactionCardHandle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import guitests.guihandles.TransactionListPanelHandle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.storage.XmlSerializableFinancialDatabase;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "public class TransactionListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private static final ObservableList\u003cTransaction\u003e TYPICAL_PERSONS \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            FXCollections.observableList(getTypicalTransactions());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private static final JumpToListRequestEvent JUMP_TO_SECOND_EVENT \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            new JumpToListRequestEvent(INDEX_SECOND_TRANSACTION);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private TransactionListPanelHandle transactionListPanelHandle;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        initUi(TYPICAL_PERSONS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_PERSONS.size(); i++) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            transactionListPanelHandle.navigateToCard(TYPICAL_PERSONS.get(i));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            Transaction expectedPerson \u003d TYPICAL_PERSONS.get(i);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            TransactionCardHandle actualCard \u003d transactionListPanelHandle.getPersonCardHandle(i);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            assertCardDisplaysTransaction(expectedPerson, actualCard);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleJumpToListRequestEvent() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        initUi(TYPICAL_PERSONS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(JUMP_TO_SECOND_EVENT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        TransactionCardHandle expectedTransaction \u003d transactionListPanelHandle"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                .getPersonCardHandle(INDEX_SECOND_TRANSACTION.getZeroBased());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        TransactionCardHandle selectedTransaction \u003d transactionListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertCardEquals(expectedTransaction, selectedTransaction);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Verifies that creating and deleting large number of persons in {@code TransactionListPanel} requires lesser than"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void performanceTest() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        ObservableList\u003cTransaction\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        }, \"Creation and deletion of transaction cards exceeded time limit\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a list of persons containing {@code personCount} persons that is used to populate the"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * {@code TransactionListPanel}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private ObservableList\u003cTransaction\u003e createBackingList(int personCount) throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Path xmlFile \u003d createXmlFileWithPersons(personCount);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        XmlSerializableFinancialDatabase xmlAddressBook \u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                XmlUtil.getDataFromFile(xmlFile, XmlSerializableFinancialDatabase.class);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        return FXCollections.observableArrayList(xmlAddressBook.toModelType().getTransactionList());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a .xml file containing {@code personCount} persons. This file will be deleted when the JVM terminates."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path createXmlFileWithPersons(int personCount) throws Exception {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(\"\u003c?xml version\u003d\\\"1.0\\\" encoding\u003d\\\"UTF-8\\\" standalone\u003d\\\"yes\\\"?\u003e\\n\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        builder.append(\"\u003cfinancialdatabase\u003e\\n\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c personCount; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cpersons\u003e\\n\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            builder.append(\"\u003cuniqueId\u003e\").append(Integer.toString(i + 1)).append(\"\u003c/uniqueId\u003e\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cname\u003e\").append(i).append(\"a\u003c/name\u003e\\n\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cphone\u003e000\u003c/phone\u003e\\n\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cemail\u003ea@aa\u003c/email\u003e\\n\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003caddress\u003ea\u003c/address\u003e\\n\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003c/persons\u003e\\n\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        builder.append(\"\u003c/financialdatabase\u003e\\n\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        Path manyPersonsFile \u003d Paths.get(TEST_DATA_FOLDER + \"manyPersons.xml\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createFile(manyPersonsFile);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(manyPersonsFile, builder.toString());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        manyPersonsFile.toFile().deleteOnExit();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return manyPersonsFile;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Initializes {@code transactionListPanelHandle} with a {@code TransactionListPanel} backed by {@code backingList}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code TransactionListPanel}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private void initUi(ObservableList\u003cTransaction\u003e backingList) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        TransactionListPanel transactionListPanel \u003d new TransactionListPanel(backingList);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        uiPartRule.setUiPart(transactionListPanel);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        transactionListPanelHandle \u003d new TransactionListPanelHandle(getChildNode(transactionListPanel.getRoot(),"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                TransactionListPanelHandle.PERSON_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 31,
      "julianc269": 10,
      "-": 90
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/testutil/GuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import guitests.guihandles.TransactionCardHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import guitests.guihandles.TransactionListPanelHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static void assertCardEquals(TransactionCardHandle expectedCard, TransactionCardHandle actualCard) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertEquals(expectedCard.getType(), actualCard.getType());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertEquals(expectedCard.getAmount(), actualCard.getAmount());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertEquals(expectedCard.getDeadline(), actualCard.getDeadline());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getTags(), actualCard.getTags());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedTransaction}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static void assertCardDisplaysTransaction(Transaction expectedTransaction,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                                                     TransactionCardHandle actualCard) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Person person \u003d expectedTransaction.getPerson();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertEquals(expectedTransaction.getType().value, actualCard.getType());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertEquals(expectedTransaction.getAmount().toString(), actualCard.getAmount());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertEquals(expectedTransaction.getDeadline().value, actualCard.getDeadline());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertEquals(person.getName().toString(), actualCard.getName());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertEquals(person.getPhone().value, actualCard.getPhone());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertEquals(person.getEmail().value, actualCard.getEmail());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertEquals(person.getAddress().value, actualCard.getAddress());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertEquals(person.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                actualCard.getTags());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Asserts that the list in {@code transactionListPanelHandle} displays the details of {@code persons} correctly and"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static void assertListMatching(TransactionListPanelHandle transactionListPanelHandle,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                                          Transaction... persons) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.length; i++) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            transactionListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "            assertCardDisplaysTransaction(persons[i], transactionListPanelHandle.getPersonCardHandle(i));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Asserts that the list in {@code transactionListPanelHandle} displays the details of {@code persons} correctly and"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static void assertListMatching(TransactionListPanelHandle transactionListPanelHandle,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                                          List\u003cTransaction\u003e persons) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertListMatching(transactionListPanelHandle, persons.toArray(new Transaction[0]));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Asserts the size of the list in {@code transactionListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static void assertListSize(TransactionListPanelHandle transactionListPanelHandle, int size) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        int numberOfPeople \u003d transactionListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(size, numberOfPeople);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 32,
      "-": 53
    }
  },
  {
    "path": "src/test/java/systemtests/AddCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AMOUNT_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AMOUNT_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEADLINE_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEADLINE_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TYPE_DESC_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TYPE_DESC_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.ALICE_TRANSACTION;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.AMY_TRANSACTION;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.BOB_TRANSACTION;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.CARL_TRANSACTION;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.HOON_TRANSACTION;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.IDA_TRANSACTION;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.testutil.TransactionUtil;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "public class AddCommandSystemTest extends FinancialDatabaseSystemTest {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        /* Case: add a transaction without tags to a non-empty address book, command with leading spaces and trailing"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "         * spaces -\u003e added"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        Transaction toAdd \u003d AMY_TRANSACTION;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + AMOUNT_DESC_AMY + \"  \" + TYPE_DESC_AMY + \"  \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                + DEADLINE_DESC_AMY + \"  \" + TAG_DESC_FRIEND + \" \";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "julianc269"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo adding Amy to the list -\u003e Amy deleted */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo adding Amy to the list -\u003e Amy added again */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        model.addTransaction(toAdd);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        /* Case: add to empty database  -\u003e added */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        deleteAllTransactions();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertCommandSuccess(ALICE_TRANSACTION);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        /* Case: add a transaction with tags, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        toAdd \u003d BOB_TRANSACTION;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                + TAG_DESC_HUSBAND + EMAIL_DESC_BOB + TYPE_DESC_BOB + AMOUNT_DESC_BOB + DEADLINE_DESC_BOB;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        /* Case: add a transaction, missing tags -\u003e added */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        assertCommandSuccess(HOON_TRANSACTION);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        /* Case: filters the transaction list before adding -\u003e added */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        showTransactionsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        assertCommandSuccess(IDA_TRANSACTION);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        /* ------------------------ Perform add operation while a transaction card is selected ---------------------- */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        /* Case: selects first card in the transaction list, add a transaction -\u003e added, card selection remains"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "           unchanged */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        selectTransaction(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        assertCommandSuccess(CARL_TRANSACTION);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        /* Case: add a duplicate transaction -\u003e rejected */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        command \u003d TransactionUtil.getAddCommand(HOON_TRANSACTION);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_TRANSACTION);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing name -\u003e rejected */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + AMOUNT_DESC_AMY"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                + TYPE_DESC_AMY + DEADLINE_DESC_AMY;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing phone -\u003e rejected */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + AMOUNT_DESC_AMY"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                + TYPE_DESC_AMY + DEADLINE_DESC_AMY;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing email -\u003e rejected */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY + AMOUNT_DESC_AMY"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                + TYPE_DESC_AMY + DEADLINE_DESC_AMY;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing address -\u003e rejected */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + AMOUNT_DESC_AMY"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                + TYPE_DESC_AMY + DEADLINE_DESC_AMY;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        command \u003d \"adds \" + TransactionUtil.getTransactionDetails(toAdd);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                + AMOUNT_DESC_AMY + TYPE_DESC_AMY + DEADLINE_DESC_AMY;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                + AMOUNT_DESC_AMY + TYPE_DESC_AMY + DEADLINE_DESC_AMY;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                + AMOUNT_DESC_AMY + TYPE_DESC_AMY + DEADLINE_DESC_AMY;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                + AMOUNT_DESC_AMY + TYPE_DESC_AMY + DEADLINE_DESC_AMY;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                + AMOUNT_DESC_AMY + TYPE_DESC_AMY + DEADLINE_DESC_AMY + INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * 4. {@code Storage} and {@code TransactionListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * {@code FinancialDatabaseSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * @see FinancialDatabaseSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private void assertCommandSuccess(Transaction toAdd) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertCommandSuccess(TransactionUtil.getAddCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccessWithNoModelChange(Person)}. Executes {@code command}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(Transaction)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private void assertCommandSuccess(String command, Transaction toAdd) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        expectedModel.addTransaction(toAdd);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccessWithNoModelChange(String, Person)} except asserts"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * 2. {@code Storage} and {@code TransactionListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(String, Transaction)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * 4. {@code Storage} and {@code TransactionListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * {@code FinancialDatabaseSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * @see FinancialDatabaseSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 40,
      "julianc269": 35,
      "-": 152
    }
  },
  {
    "path": "src/test/java/systemtests/ClearCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "public class ClearCommandSystemTest extends FinancialDatabaseSystemTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        final Model defaultModel \u003d getModel();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear non-empty address book, command with leading spaces and trailing alphanumeric characters and"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "         * spaces -\u003e cleared"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo clearing address book -\u003e original address book restored */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, defaultModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo clearing address book -\u003e cleared */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        /* Case: selects first card in transaction list and clears address book -\u003e cleared and no card selected */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        selectTransaction(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        /* Case: filters the transaction list before clearing -\u003e entire address book cleared */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        showTransactionsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear empty address book -\u003e cleared */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * {@code FinancialDatabaseSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * @see FinancialDatabaseSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccessWithNoModelChange(String)} except that the result"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ClearCommandSystemTest#assertCommandSuccess(String)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * {@code FinancialDatabaseSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * @see FinancialDatabaseSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 11,
      "-": 90
    }
  },
  {
    "path": "src/test/java/systemtests/ClockRule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TestRule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runner.Description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runners.model.Statement;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * This rule makes the time stamp in the status bar predictable during a test."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Before the test starts, the rule replaces the clock in the status bar with a fixed clock."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * At the end of the test, the rule restores the original clock."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Clock#fixed(Instant, ZoneId)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClockRule implements TestRule {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Clock injectedClock;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void before() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void after() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public Statement apply(final Statement base, final Description description) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Statement() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            public void evaluate() throws Throwable {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                before();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                    base.evaluate();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                } finally {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    after();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Clock getInjectedClock() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return injectedClock;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the clock in the status bar with a fixed clock having the current time as its instance."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setInjectedClockToCurrentTime() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 57,
      "Bellaaarh": 1
    }
  },
  {
    "path": "src/test/java/systemtests/DeleteCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_TRANSACTION_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.logic.commands.DeleteCommand.MESSAGE_DELETE_TRANSACTION_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.testutil.TestUtil.getTransaction;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TRANSACTION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "public class DeleteCommandSystemTest extends FinancialDatabaseSystemTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void delete() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        /* Case: delete the first transaction in the list, command with leading spaces and trailing spaces -\u003e deleted */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \"      \" + INDEX_FIRST_TRANSACTION.getOneBased()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                + \"       \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Transaction deletedTransaction \u003d removeTransaction(expectedModel, INDEX_FIRST_TRANSACTION);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_TRANSACTION_SUCCESS, deletedTransaction);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        /* Case: delete the last transaction in the list -\u003e deleted */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Model modelBeforeDeletingLast \u003d getModel();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Index lastTransactionIndex \u003d getLastIndex(modelBeforeDeletingLast);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertCommandSuccess(lastTransactionIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        /* Case: undo deleting the last transaction in the list -\u003e last transaction restored */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        /* Case: redo deleting the last transaction in the list -\u003e last transaction deleted again */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        removeTransaction(modelBeforeDeletingLast, lastTransactionIndex);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        /* Case: delete the middle transaction in the list -\u003e deleted */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Index middleTransactionIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertCommandSuccess(middleTransactionIndex);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        /* Case: filtered transaction list, delete index within bounds of address book and"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "         * transaction list -\u003e deleted"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "         */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        showTransactionsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Index index \u003d INDEX_FIRST_TRANSACTION;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredTransactionList().size());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(index);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        /* Case: filtered transaction list, delete index within bounds of address book but out of bounds of"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "         * transaction list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        showTransactionsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        int invalidIndex \u003d getModel().getFinancialDatabase().getTransactionList().size();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_TRANSACTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        /* --------------------- Performing delete operation while a transaction card is selected ------------------- */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        /* Case: delete the selected transaction -\u003e transaction list panel selects the transaction before the deleted"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "         * transaction"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "         */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        showAllTransactions();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Index selectedIndex \u003d getLastIndex(expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        selectTransaction(selectedIndex);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        deletedTransaction \u003d removeTransaction(expectedModel, selectedIndex);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        expectedResultMessage \u003d String.format(MESSAGE_DELETE_TRANSACTION_SUCCESS, deletedTransaction);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                getModel().getFinancialDatabase().getTransactionList().size() + 1);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_TRANSACTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Removes the {@code Transaction} at the specified {@code index} in {@code model}\u0027s address book."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * @return the removed transaction"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private Transaction removeTransaction(Model model, Index index) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Transaction targetTransaction \u003d getTransaction(model, index);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        model.deleteTransaction(targetTransaction);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return targetTransaction;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Deletes the transaction at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * and performs the same verification as {@code assertCommandSuccessWithNoModelChange(String, Model, String)}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Index toDelete) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Transaction deletedTransaction \u003d removeTransaction(expectedModel, toDelete);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_TRANSACTION_SUCCESS, deletedTransaction);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * {@code FinancialDatabaseSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * @see FinancialDatabaseSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccessWithNoModelChange(String, Model, String)} except"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * that the browser url and selected card are expected to update accordingly depending on the"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * card at {@code expectedSelectedCardIndex}."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * @see FinancialDatabaseSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * {@code FinancialDatabaseSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * @see FinancialDatabaseSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 56,
      "julianc269": 3,
      "-": 141
    }
  },
  {
    "path": "src/test/java/systemtests/EditCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AMOUNT_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AMOUNT_DESC_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEADLINE_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEADLINE_DESC_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TYPE_DESC_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TYPE_DESC_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TRANSACTIONS;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TRANSACTION;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TRANSACTION;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.AMY_TRANSACTION;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import static seedu.address.testutil.TypicalTransactions.BOB_TRANSACTION;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.testutil.TransactionBuilder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.testutil.TransactionUtil;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "public class EditCommandSystemTest extends FinancialDatabaseSystemTest {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void edit() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Index index \u003d INDEX_FIRST_TRANSACTION;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + ADDRESS_DESC_BOB + \"  \" + AMOUNT_DESC_BOB + \"  \""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                + TYPE_DESC_BOB + \"  \" + DEADLINE_DESC_BOB + \"  \" + TAG_DESC_HUSBAND + \" \";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Transaction editedTransaction \u003d new TransactionBuilder(BOB_TRANSACTION).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        logger.info(\"\" + index.getZeroBased());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertCommandSuccess(command, index, editedTransaction);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        /* Case: undo editing the last transaction in the list -\u003e last transaction restored */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        /* Case: redo editing the last transaction in the list -\u003e last transaction edited again */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        model.updateTransaction("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                getModel().getFilteredTransactionList().get(INDEX_FIRST_TRANSACTION.getZeroBased()), editedTransaction);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        /* Case: edit a transaction with new values same as existing values -\u003e edited */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                + ADDRESS_DESC_BOB + AMOUNT_DESC_BOB + TYPE_DESC_BOB + DEADLINE_DESC_BOB + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        assertCommandSuccess(command, index, BOB_TRANSACTION);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        /* Case: edit a transaction with new values same as another transaction\u0027s values but with different name -\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "         * edited"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "         */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        assertTrue(getModel().getFinancialDatabase().getTransactionList().contains(BOB_TRANSACTION));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        index \u003d INDEX_SECOND_TRANSACTION;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertNotEquals(getModel().getFilteredTransactionList().get(index.getZeroBased()), BOB);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                + ADDRESS_DESC_BOB + AMOUNT_DESC_BOB + TYPE_DESC_BOB + DEADLINE_DESC_BOB + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        editedTransaction \u003d new TransactionBuilder(BOB_TRANSACTION).withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertCommandSuccess(command, index, editedTransaction);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        /* Case: edit a transaction with new values same as another transaction\u0027s values but with different phone and"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "         * email -\u003e edited"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        index \u003d INDEX_SECOND_TRANSACTION;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        editedTransaction \u003d new TransactionBuilder(BOB_TRANSACTION).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertCommandSuccess(command, index, editedTransaction);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear tags -\u003e cleared */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        index \u003d INDEX_FIRST_TRANSACTION;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Transaction personToEdit \u003d getModel().getFilteredTransactionList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        editedTransaction \u003d new TransactionBuilder(personToEdit).withTags().build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertCommandSuccess(command, index, editedTransaction);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        /* Case: filtered transaction list, edit index within bounds of address book and transaction list -\u003e edited */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        showTransactionsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        index \u003d INDEX_FIRST_TRANSACTION;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredTransactionList().size());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        personToEdit \u003d getModel().getFilteredTransactionList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        editedTransaction \u003d new TransactionBuilder(personToEdit).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertCommandSuccess(command, index, editedTransaction);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        /* Case: filtered transaction list, edit index within bounds of address book but out of bounds of transaction"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "         * list -\u003e rejected"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        showTransactionsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        int invalidIndex \u003d getModel().getFinancialDatabase().getTransactionList().size();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                Messages.MESSAGE_INVALID_TRANSACTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        /* --------------------- Performing edit operation while a transaction card is selected --------------------- */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        /* Case: selects first card in the transaction list, edit a transaction -\u003e edited, card selection remains"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "         * unchanged but browser url changes."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        showAllTransactions();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        index \u003d INDEX_FIRST_TRANSACTION;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        selectTransaction(index);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                + ADDRESS_DESC_AMY + AMOUNT_DESC_AMY + TYPE_DESC_AMY + DEADLINE_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // this can be misleading: card selection actually remains unchanged but the"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        // browser\u0027s url is updated to reflect the new transaction\u0027s name"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        assertCommandSuccess(command, index, AMY_TRANSACTION, index);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredTransactionList().size() + 1;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                Messages.MESSAGE_INVALID_TRANSACTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing index -\u003e rejected */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing all fields -\u003e rejected */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TRANSACTION.getOneBased(),"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TRANSACTION.getOneBased()"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                        + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TRANSACTION.getOneBased()"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                        + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TRANSACTION.getOneBased()"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                        + INVALID_EMAIL_DESC, Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TRANSACTION.getOneBased()"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                        + INVALID_ADDRESS_DESC, Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TRANSACTION.getOneBased()"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                        + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        /* Case: edit a transaction with new values same as another transaction\u0027s values -\u003e rejected */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        executeCommand(TransactionUtil.getAddCommand(BOB_TRANSACTION));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        assertTrue(getModel().getFinancialDatabase().getTransactionList().contains(BOB_TRANSACTION));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        index \u003d INDEX_FIRST_TRANSACTION;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertNotEquals(getModel().getFilteredTransactionList().get(index.getZeroBased()), BOB_TRANSACTION);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                + ADDRESS_DESC_BOB + AMOUNT_DESC_BOB + TYPE_DESC_BOB + DEADLINE_DESC_BOB + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "julianc269"
        },
        "content": "                + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_TRANSACTION);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccessWithNoModelChange(String, Index, Person, Index)}"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * except that the browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Transaction, Index)"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Transaction editedTransaction) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertCommandSuccess(command, toEdit, editedTransaction, null);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccessWithNoModelChange(String, Model, String, Index)}"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * 2. Asserts that the model related components are updated to reflect the transaction at index {@code toEdit} being"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * updated to values specified {@code editedTransaction}.\u003cbr\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Transaction editedTransaction,"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        expectedModel.updateTransaction(expectedModel.getFilteredTransactionList().get(toEdit.getZeroBased()),"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                editedTransaction);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        expectedModel.updateFilteredTransactionList(PREDICATE_SHOW_ALL_TRANSACTIONS);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                String.format(EditCommand.MESSAGE_EDIT_TRANSACTION_SUCCESS, editedTransaction),"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccessWithNoModelChange(String, Model, String, Index)}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * except that the browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card update accordingly depending on the card at"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * {@code FinancialDatabaseSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * @see FinancialDatabaseSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * @see FinancialDatabaseSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        expectedModel.updateFilteredTransactionList(PREDICATE_SHOW_ALL_TRANSACTIONS);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * {@code FinancialDatabaseSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * @see FinancialDatabaseSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 97,
      "julianc269": 23,
      "-": 182
    }
  },
  {
    "path": "src/test/java/systemtests/ErrorDialogGuiTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postLater;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.UiManager.FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.UiManager.FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.UiManager.FILE_OPS_ERROR_DIALOG_STAGE_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.AlertDialogHandle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "public class ErrorDialogGuiTest extends FinancialDatabaseSystemTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException IO_EXCEPTION_STUB \u003d new IOException(\"Stub\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showErrorDialogs() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        postLater(new DataSavingExceptionEvent(IO_EXCEPTION_STUB));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.waitForEvent(() -\u003e guiRobot.isWindowShown(FILE_OPS_ERROR_DIALOG_STAGE_TITLE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        AlertDialogHandle alertDialog \u003d new AlertDialogHandle(guiRobot.getStage(FILE_OPS_ERROR_DIALOG_STAGE_TITLE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, alertDialog.getHeaderText());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE + \":\\n\" + IO_EXCEPTION_STUB.toString(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                alertDialog.getContentText());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/systemtests/FinancialDatabaseSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import guitests.guihandles.TransactionListPanelHandle;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "import seedu.address.logic.commands.WildcardSearchCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.model.FinancialDatabase;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.testutil.TypicalTransactions;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.BrowserPanel;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": " * A system test class for FinancialDatabase, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "public abstract class FinancialDatabaseSystemTest {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    protected FinancialDatabase getInitialData() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return TypicalTransactions.getTypicalFinancialDatabase();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public TransactionListPanelHandle getTransactionListPanel() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        return mainWindowHandle.getTransactionListPanel();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getBrowserPanel();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons in the address book."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    protected void showAllTransactions() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertEquals(getModel().getFinancialDatabase().getTransactionList().size(),"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                getModel().getFilteredTransactionList().size());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    protected void showTransactionsWithName(String keyword) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Bellaaarh"
        },
        "content": "        executeCommand(WildcardSearchCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertTrue(getModel().getFilteredTransactionList().size()"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                \u003c getModel().getFinancialDatabase().getTransactionList().size());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Selects the transaction at {@code index} of the displayed list."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    protected void selectTransaction(Index index) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertEquals(index.getZeroBased(), getTransactionListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes all persons in the address book."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    protected void deleteAllTransactions() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertEquals(0, getModel().getFinancialDatabase().getTransactionList().size());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same transaction objects as {@code expectedModel}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * and the transaction list panel displays the persons in the model correctly."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                                                     Model expectedModel) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertEquals(new FinancialDatabase(expectedModel.getFinancialDatabase()),"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                testApp.readStorageFinancialDatabase());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertListMatching(getTransactionListPanel(), expectedModel.getFilteredTransactionList());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code TransactionListPanelHandle} and {@code StatusBarFooterHandle} to"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * remember their current state."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().rememberUrl();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        getTransactionListPanel().rememberSelectedPersonCard();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * of the previously selected transaction."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertFalse(getTransactionListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     *Asserts that the browser\u0027s url is changed to display the details of the transaction in the transaction list panel"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * at {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * @see TransactionListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        getTransactionListPanel().navigateToCard(getTransactionListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        String selectedCardDeadline \u003d getTransactionListPanel().getHandleToSelectedCard().getDeadline();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedUrl;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "julianc269"
        },
        "content": "            expectedUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + selectedCardDeadline.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (MalformedURLException mue) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"URL expected to be valid.\", mue);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getTransactionListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card in the transaction list panel remain unchanged."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * @see TransactionListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertFalse(getTransactionListPanel().isSelectedPersonCardChanged());"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertListMatching(getTransactionListPanel(), getModel().getFilteredTransactionList());"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE), getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "                getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 38,
      "julianc269": 4,
      "-": 252,
      "Bellaaarh": 2
    }
  },
  {
    "path": "src/test/java/systemtests/HelpCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TRANSACTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.BrowserPanel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for the help window, which contains interaction with other UI components."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "public class HelpCommandSystemTest extends FinancialDatabaseSystemTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void openHelpWindow() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        //use accelerator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        getResultDisplay().click();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        getTransactionListPanel().click();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().click();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowNotOpen();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        //use menu button"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        //use command box"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // open help window and give it focus"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that while the help window is open the UI updates correctly for a command execution"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TRANSACTION.getOneBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertListMatching(getTransactionListPanel(), getModel().getFilteredTransactionList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that the status bar too is updated correctly while the help window is open"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // note: the select command tested above does not update the status bar"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TRANSACTION.getOneBased());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void help_multipleCommands_onlyOneHelpWindowOpen() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, guiRobot.getNumberOfWindowsShown(HelpWindowHandle.HELP_WINDOW_TITLE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window is open, and closes it after checking."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowOpen() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window isn\u0027t open."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowNotOpen() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 6,
      "-": 101
    }
  },
  {
    "path": "src/test/java/systemtests/ModelHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods to set up {@code Model} for testing."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelHelper {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private static final Predicate\u003cTransaction\u003e PREDICATE_MATCHING_NO_PERSONS \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static void setFilteredList(Model model, List\u003cTransaction\u003e toDisplay) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Optional\u003cPredicate\u003cTransaction\u003e\u003e predicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                toDisplay.stream().map(ModelHelper::getPredicateMatching).reduce(Predicate::or);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        model.updateFilteredTransactionList(predicate.orElse(PREDICATE_MATCHING_NO_PERSONS));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ModelHelper#setFilteredList(Model, List)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    public static void setFilteredList(Model model, Transaction... toDisplay) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        setFilteredList(model, Arrays.asList(toDisplay));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a predicate that evaluates to true if this {@code Person} equals to {@code other}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "    private static Predicate\u003cTransaction\u003e getPredicateMatching(Transaction other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return person -\u003e person.equals(other);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 7,
      "-": 32
    }
  },
  {
    "path": "src/test/java/systemtests/SampleDataTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.model.FinancialDatabase;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "public class SampleDataTest extends FinancialDatabaseSystemTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    protected FinancialDatabase getInitialData() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a non-existent file location to force test app to load sample data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFileIfExists(filePath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the file at {@code filePath} if it exists."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void deleteFileIfExists(Path filePath) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.deleteIfExists(filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBook_dataFileDoesNotExist_loadSampleData() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        Transaction[] expectedList \u003d SampleDataUtil.getSampleTransactions();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertListMatching(getTransactionListPanel(), expectedList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 4,
      "julianc269": 2,
      "-": 45
    }
  },
  {
    "path": "src/test/java/systemtests/SelectCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_TRANSACTION_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.logic.commands.SelectCommand.MESSAGE_SELECT_TRANSACTION_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TRANSACTION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "public class SelectCommandSystemTest extends FinancialDatabaseSystemTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        /* Case: select the first card in the transaction list, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e selected"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TRANSACTION.getOneBased() + \"   \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertCommandSuccess(command, INDEX_FIRST_TRANSACTION);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        /* Case: select the last card in the transaction list -\u003e selected */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Index personCount \u003d getLastIndex(getModel());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + personCount.getOneBased();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, personCount);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous selection -\u003e rejected */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo selecting last card in the list -\u003e rejected */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        /* Case: select the middle card in the transaction list -\u003e selected */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middleIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the current selected card -\u003e selected */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        /* Case: filtered transaction list, select index within bounds of address book but out of bounds of transaction"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "         * list -\u003e rejected"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        showTransactionsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        int invalidIndex \u003d getModel().getFinancialDatabase().getTransactionList().size();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                MESSAGE_INVALID_TRANSACTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        /* Case: filtered transaction list, select index within bounds of address book and transaction list -\u003e selected"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "         */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Index validIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredTransactionList().size());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, validIndex);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredTransactionList().size() + 1;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                MESSAGE_INVALID_TRANSACTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select from empty address book -\u003e rejected */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "julianc269"
        },
        "content": "        deleteAllTransactions();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TRANSACTION.getOneBased(),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                MESSAGE_INVALID_TRANSACTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing select command with the"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * {@code expectedSelectedCardIndex} of the selected transaction.\u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * 4. {@code Storage} and {@code TransactionListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * {@code FinancialDatabaseSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * @see FinancialDatabaseSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * @see FinancialDatabaseSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "                MESSAGE_SELECT_TRANSACTION_SUCCESS, expectedSelectedCardIndex.getOneBased());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "        int preExecutionSelectedCardIndex \u003d getTransactionListPanel().getSelectedCardIndex();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * 4. {@code Storage} and {@code TransactionListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * {@code FinancialDatabaseSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aaditkamat"
        },
        "content": "     * @see FinancialDatabaseSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aaditkamat": 32,
      "julianc269": 2,
      "-": 123
    }
  },
  {
    "path": "src/test/java/systemtests/SystemTestSetupHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "julianc269"
        },
        "content": "import seedu.address.model.ReadOnlyFinancialDatabase;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods that system tests require."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class SystemTestSetupHelper {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets up a new {@code TestApp} and returns it."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "julianc269"
        },
        "content": "    public TestApp setupApplication(Supplier\u003cReadOnlyFinancialDatabase\u003e addressBook, Path saveFileLocation) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerStage(Stage::new);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupApplication(() -\u003e testApp \u003d new TestApp(addressBook, saveFileLocation));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Application takes too long to set up.\", te);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes TestFX."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void initialize() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.hideStage();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Encapsulates the primary stage of {@code TestApp} in a {@code MainWindowHandle} and returns it."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle setupMainWindowHandle() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupStage((stage) -\u003e {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle \u003d new MainWindowHandle(stage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle.focus();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to set up.\", te);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tears down existing stages."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDownStage() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.cleanupStages();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to tear down.\", te);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "julianc269": 2,
      "-": 72
    }
  }
]
