[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d EventOrganiser"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "//https://travis-ci.org/se-edu/addressbook-level4[image:https://travis-ci.org/se-edu/addressbook-level4.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "//https://ci.appveyor.com/project/damithc/addressbook-level4[image:https://ci.appveyor.com/api/projects/status/3boko2x2vr5cc3w2?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "https://coveralls.io/github/CS2103-AY1819S1-W10-3/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103-AY1819S1-W10-3/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "https://travis-ci.org/nus-cs2103-AY1819S1/addressbook-level4.svg?branch\u003dmaster[image:https://travis-ci.org/nus-cs2103-AY1819S1/addressbook-level4.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "image:https://api.codacy.com/project/badge/Grade/79ff087debd54ac493fcb20282d384b0[\"Codacy code quality\", link\u003d\"https://www.codacy.com/app/yao-feng/main_2?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dCS2103-AY1819S1-W10-3/main\u0026utm_campaign\u003dBadge_Grade\"]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "//https://www.codacy.com/app/damith/addressbook-level4?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dse-edu/addressbook-level4\u0026utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/fc0b7775cf7f4fdeaf08776f3d8e364a[Codacy Badge]]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "//https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* This is a desktop Event Organiser application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* It allows users to store their own personal particulars and organise events and for other users to join the event as event participants."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* The event organiser can get participants to vote for the time and location to hold the event,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "and ask the application for recommendations based on the participants\u0027 schedule and addresses."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "** Support for _Build Automation_ using Gradle and for _Continuous Integration_ using Travis CI."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cLearningOutcomes#, Learning Outcomes\u003e\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* This application was based off https://github.com/nus-cs2103-AY1819S1/addressbook-level4[se-edu/addressbook-level4]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "yao-feng": 7,
      "-": 35
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    id \u0027pmd\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "adjscent"
        },
        "content": "pmd {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    ignoreFailures \u003d true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    pmdTest.enabled\u003dfalse"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    ruleSets \u003d ["
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            \u0027java-basic\u0027,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            \u0027java-braces\u0027,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            \u0027java-clone\u0027,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            \u0027java-codesize\u0027,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            \u0027java-comments\u0027,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            \u0027java-controversial\u0027,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            \u0027java-design\u0027,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            \u0027java-empty\u0027,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            \u0027java-finalizers\u0027,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            \u0027java-imports\u0027,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            \u0027java-optimizations\u0027,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            \u0027java-strictexception\u0027,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            \u0027java-strings\u0027,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            \u0027java-typeresolution\u0027,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            \u0027java-unnecessary\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "adjscent"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u00278.40.11\u0027"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.xml.bind\u0027, name: \u0027jaxb-api\u0027, version: \u00272.2.8\u0027"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-impl\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-core\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.activation\u0027, name: \u0027activation\u0027, version: \u00271.1.1\u0027"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        \u0027site-name\u0027: \u0027EventOrganiser\u0027,"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/CS2103-AY1819S1-W10-3/main\u0027"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "task copyDummySearchPage(type: Copy) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    from \u0027docs/DummySearchPage.html\u0027"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${buildDir}/docs/html5\""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "adjscent"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027,\u0027pmdMain\u0027, \u0027check\u0027, \u0027checkstyleTest\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "yao-feng": 2,
      "adjscent": 25,
      "-": 243
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "EventOrganiser was developed by the https://github.com/CS2103-AY1819S1-W10-3[CS2103-AY1819S1-W10-3] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Adeel Dhedhi Bhyria"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "image::adeeldb.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} [https://github.com/adeeldb[github]] [\u003c\u003cadeeldb#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: UI"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Chow Keng Ji"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "image::thejrlinguist.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[http://github.com/thejrlinguist[github]] [\u003c\u003cthejrlinguist#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: Model (Event)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Soh Jason"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::adjscent.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[https://github.com/adjscent[github]] [\u003c\u003cadjscent#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: Storage"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Wang Yaofeng"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "image::yao-feng.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[https://github.com/yao-feng[github]] [\u003c\u003cyao-feng#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: Model (User)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Zhang Cheng"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "image::agendazhang.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[https://github.com/agendazhang[github]] [\u003c\u003cagendazhang#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: Logic"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "agendazhang": 1,
      "-": 49
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "\u003d Event Organiser - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level4/tree/master"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "By: `Team W10-03`      Since: `Aug 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Open link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson.java`] and link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow.java`] and check for any code errors"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".. Due to an ongoing https://youtrack.jetbrains.com/issue/IDEA-189060[issue] with some of the newer versions of IntelliJ, code errors may be detected even if the project can be built and run successfully"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".. To resolve this, place your cursor over any of the code section highlighted in red. Press kbd:[ALT + ENTER], and select `Add \u0027--add-modules\u003d...\u0027 to module compiler options` for each error"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat this for the test folder as well (e.g. check link:{repoURL}/src/test/java/seedu/address/commons/util/XmlUtilTest.java[`XmlUtilTest.java`] and link:{repoURL}/src/test/java/seedu/address/ui/HelpWindowTest.java[`HelpWindowTest.java`] for code errors, and if so, resolve it the same way)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level4` repo."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level4`), you should do the following:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Events-Driven nature of the design"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 1)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 2)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "* Responds to events raised from various parts of the App and updates the UI accordingly."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagramUpdated.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the EventOrganiser data."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` and `ObservableList\u003cEvent\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "The Event class contains attributes which depend on the Person and UniquePersonList classes."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "These are the event organiser (Person), the list of participants (a UniquePersonList)."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "Each event also contains a list of polls, which contains a voter list for each option, which is a UniquePersonList."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Event Organiser data in xml format and read it back."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "Each event contains references to persons in the list of persons in the event organiser."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "The storage component stores these people in the form of XmlPersonIndex objects, which are constructed from the index of the person as it is stored in the event organiser."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "When converting XmlAdaptedEvent objects back to a model type Event object, the XmlPersonIndex must be converted to the corresponding person in the event organiser person list."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::poll[]"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Poll feature"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "This section explains the implementation of the features associated with the Poll class of each Event while detailing some implementation details of the Event class."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "The relevant commands which are callable by the user to be discussed are:"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "* `AddPollCommand` - adds a new poll to the event given the name of the poll to be created."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "* `AddPollOptionCommand` - adds a new poll option to the poll given the poll index and the name of the option to be added."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "* `VoteCommand` - adds the current user as a voter to the given option."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "* `AddDayTimePollCommand` - creates a new poll automatically populated with options based on the schedules of the event participants."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "For all the above commands, the event must first be selected using the `selectEvent` command, which will set the `currentEvent` through the `Model#setSelectedEvent()` method."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "This is done to ensure that users do not have to continually specify the event for which the Poll commands are called for every command."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "This is on top of the `currentUser` in the Model which was already selected through the `LoginCommand`."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "Each Poll object contains a `HashMap\u003cString, UniquePersonList\u003e` attribute which stores each option as a string and the list of voters to that particular option as a UniquePersonList."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "When storing the Poll object in the Storage component, since the XML format does not support the HashMap format,"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "each entry of the HashMap must be converted to a XmlAdaptedPollEntry."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "Each XmlAdaptedPollEntry contains the option as a String as well as a list of XmlPersonIndex objects, which serve as pointers to the actual Person objects stored in the event organiser."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "As an example, the following sequence diagram illustrates the workings of the `VoteCommand`."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "image::VoteSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "As stated above, since Model already stores the current user and the selected event from prior user commands,"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "the Model can call the correct Event e and Person object in the `addVoteToPoll` method. If there is no logged-in user,"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "a `NoUserLoggedInException` is thrown, and if there is no selected event, a `NoEventSelectedException` is thrown."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "In addition, four other possible exceptions might be thrown by the VoteCommand:"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "* A user must have already joined the event as a participant, or be on the invite list in order to vote, failing which, a UserNotJoinedEventException is thrown."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "* A user must not already have voted for that particular option in the poll already. This is enforced by the UniquePersonList, which throws a DuplicatePersonException if someeone tries to vote twice."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "* A poll must exist at the given poll index for the selected event, else, an IndexOutOfBoundsException is thrown."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "* The given option must exist in the selected poll, else, an IllegalArgumentException is thrown."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "The other commands `AddPollCommand` and `AddPollOptionCommand` follow a very similar structure."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "The sequence diagram within the model for the `AddPollCommand` is illustrated here:"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "image::AddPollSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "In all cases, the Poll object is returned to the calling Command object,"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "so that the contents of the poll can be retrieved as a String through the `Poll#displayPoll()` method."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "The displayed details of the poll contains the most popular options, computed using the `Poll#getPopularOptions()` method."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "A new `DisplayPollEvent` is then posted to the EventsCenter, which is handled by the PollDisplayPanel in the UI component."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "//to be implemented in v1.3 or v1.4"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "The `DayTimePoll` class extends from the abstract `Poll` class which is constructed by calling the `AddDayTimePollCommand`."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "This command automatically generates a list of times based on the schedules of the persons on the event invite list."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: The relationship between `GenericPoll` and `DayTimePoll`"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1:**: Design them as separate classes which both inherit from an abstract `Poll` class."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Allows for future extendability from the abstract Poll class eg additional types of Polls (location, date) which constrain the option types"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": " and include additional features to recommend the best option eg most convenient location by distance for participants."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:**: Allow `DayTimePoll` to extend from the `GenericPoll` class."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: The two classes differ only in that `DayTimePoll` has the augmented feature of generating options from the schedule of event participants."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Unable to constrain the input and prevent users from adding the wrong format for options into `DayTimePoll`, since this would violate the Liskov Substitution Principle."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Storage of voters in Poll"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1:**: Store the voters as Persons."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: All information about the voters are stored."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Need for complete reference to the actual person via the XmlPersonIndex class in storage, rather than duplicating the person details."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "The voter list must also be manually updated every time the person details are updated."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:**: Store only the names of voters."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: No need for complete reference to the actual person via the XmlPersonIndex class in storage."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Some persons might share the same name. It is also not extendable for future versions where the data/attributes of the voters might be relevant to computing the best option."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "adjscent"
        },
        "content": "// end:::poll[]"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "adjscent"
        },
        "content": "//tag::schedule[]"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "adjscent"
        },
        "content": "\u003d\u003d\u003d Schedule feature"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "adjscent"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "adjscent"
        },
        "content": "This section explains the implementation of the features associated with the Schedule class of each Schedule while detailing some implementation details of the Schedule class. The relevant commands which are callable by the user to be discussed are:"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "adjscent"
        },
        "content": "EditCommmand - The base Edit commmand for person with two additions - Schedule and Schedule Update parameter"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "adjscent"
        },
        "content": "MaxScheduleCommand - Compare two persons\u0027 schedules and return the common free time."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "adjscent"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "adjscent"
        },
        "content": "For EditCommand, despite the fact that schedule piggybacks off the original edit command, the original person did not have a schedule object included and adjustments have to be made. Firstly, if the person does not have the schedule object, a new schedule object would be created by the logic layer. This is to ensure backwards compatability with past test cases without schedule objects. Next, the schedule needs to be stored in the xml file in a concise way so that it would not be bloated. As the persons in the applications are students, we can be certain that their schedules will be likely the same through the week, thus only the week\u0027s schedule is stored."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "adjscent"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Storage of schedule in person"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "adjscent"
        },
        "content": "To store the schedule, a unique approach of using bit counters is used. Each bit stores a 30 minute block, totalling to 24 hours * 2 30-mins * 7 days \u003d  336 bits. 1-bit signifies an occupied slot while a 0-bit signifies an empty slot. This 336 bit string is then stored as a string in the xml. However, in the application, it will stored as a two-dimensional array [7][48]. This allows O(1) access times for each slot, while only requiring O(n) on startup to reload the bitstring into an array."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "adjscent"
        },
        "content": "Each bit string is then translated into a Slot, detailing its time of the day and the day of the week, to be used by the application"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "adjscent"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Schedule Update"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "adjscent"
        },
        "content": "As the schedule is stored as a bitstring, we can employ bitwise operations for updates. To effect a schedule update, a pair of strings \"time of the day\" and \"day of the week\" is to be inputed. The following is then implemented into a new empty schedule, with that specific slot as 1-bit. Finally, the new schedule is to be xor-ed with the existing schedule, implementating a \"bit flipper\", and stored back to the person."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "adjscent"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: MaxSchedule Command"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "adjscent"
        },
        "content": "Similarity, as bitwise operations are allowed, two or more persons\u0027 schedule are or-ed together to form a new schedule object. This schedule object is then translated into slots and print back to the application."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "adjscent"
        },
        "content": "// end:::schedule[]"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "adjscent"
        },
        "content": "//tag::timetable[]"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "adjscent"
        },
        "content": "\u003d\u003d\u003d TimeTable feature"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "adjscent"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "adjscent"
        },
        "content": "This section explains the implementation of the features associated with the TimeTableUtil and Timetable class of each TimeTable while detailing some implementation details of the TimeTable and TimeTableUtil class. The relevant commands which are callable by the user to be discussed are:"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "adjscent"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "adjscent"
        },
        "content": "EditCommmand - The base Edit commmand for person with one addition - Timetable parameter"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "adjscent"
        },
        "content": "TimeTable is data downloaded from nusmods.com, detailing the students\u0027 weekly schedule for the semester. This is to allow ease of access for the students, without having them to enter their schedules manually using schedule/ schedule update parameters in the EditCommand. This timetable is also not stored as it is inside the xml but immediately translated into a schedule object to be passed back to the application."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "adjscent"
        },
        "content": "As nusmods.com is an external web server, internet access needs to be checked first. Following up, the nusmods.com gives the user a modsn.com shortlink which can translated back to a nusmods.com/... full link, if he wants to share his timetable with himself or others. Finally, a valid nusmods.com timetable would include json data in its GET parameters. All of these must be fulfiled or else a Invalid Nusmods link will be returend to the application."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "adjscent"
        },
        "content": "A full valid example of the nusmods link is as follows:"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "adjscent"
        },
        "content": "```"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "adjscent"
        },
        "content": "https://nusmods.com/timetable/sem-1/share?CS2102\u003dLEC:1,TUT:11\u0026CS2103\u003dLEC:1,TUT:01\u0026CS2105\u003dLEC:1,TUT:16\u0026CS2106\u003dLAB:09,LEC:1,TUT:09\u0026MA1521\u003dLEC:1,TUT:4\u0026UCV2209\u003dSEM:01"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "adjscent"
        },
        "content": "```"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "adjscent"
        },
        "content": "How to obtain the full timetable."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "adjscent"
        },
        "content": "Step 1. We can easily obtain the person\u0027s timetable by splitting the GET parameters by \u0027;\u0027 delimiter. The resulting array would contain Module Code /\u003d/ Lesson Type /:/ Number Slot."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "adjscent"
        },
        "content": "Step 2. Then, to obtain the full details of the module (including all lessons and all slots), we can use the NUSMODS API detailed here https://github.com/nusmodifications/nusmods-api."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "adjscent"
        },
        "content": "Step 3. We will then filter out the lessons obtained in step 1 from the full detail in step 2."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "adjscent"
        },
        "content": "Step 4. The filtered lessons is then converted into an arraylist of Slot before returning to the aplication."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "adjscent"
        },
        "content": "// end:::timetable[]"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "a. Include those libraries in the repo (this bloats the repo size) +"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "b. Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Suggested Programming Tasks to Get Started"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "////"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "Suggested path for new programmers:"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-EachComponent]]"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Improving each component"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Logic` component"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the aliases that you have added."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "** Update the user guide to document the new aliases."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Model` component"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the new public methods that you have added."
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Ui` component"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": ". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-before.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-after.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "** Use the .css attribute `-fx-background-color` to add a color."
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-before.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-after.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "** You can write two different kinds of tests to ensure that the functionality works:"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "*** The unit tests for `ResultDisplay` can be modified to include verification of the color."
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "*** Do read the commits one at a time if you feel overwhelmed."
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-before.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-after.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Storage` component"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "* Hint"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlAddressBookStorage.java[`XmlAddressBookStorage`] class."
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-RemarkCommand]]"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Creating a new command: `remark`"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Description"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for a person specified in the `INDEX`. +"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `remark INDEX r/[REMARK]`"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/Likes to drink coffee.` +"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for the first person to `Likes to drink coffee.`"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/` +"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "Removes the remark for the first person."
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Step-by-step Instructions"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/Command.java[`Command`]. Upon execution, it should just throw an `Exception`."
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandTest` that tests that `execute()` throws an Exception."
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": ". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParserTest` that tests different boundary values"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "for `RemarkCommandParser`."
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": ". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": "We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": ". Add test for `Remark`, to test the `Remark#equals()` method."
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": "Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": ". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `addressBook.xml` so that the application will load the sample data when you launch it.)"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedPerson` class"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson`] to include a `Remark` field so that it will be saved."
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new Xml field for `Remark`."
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": ". Fix `invalidAndValidPersonAddressBook.xml`, `typicalPersonsAddressBook.xml`, `validAddressBook.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": ". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": "Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": "We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": ". Update `RemarkCommandTest` to test that the `execute()` logic works."
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Full Solution"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": "See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "////"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "* Busy NUS students."
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "* Need to organise group project meetings."
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "*  Need to organise interest group meet-ups and encourage new participants to attend."
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "*  Need to find the best time and location based on the schedules of participants and addresses."
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "*  Some level of tech-savviness to appreciate CLI apps."
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "*  Have a schedule that works on a weekly basis."
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "*Value proposition*:"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "* Key concept: Semi-automate the coordination of meeting time/venue based on participant’s schedule."
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "* What customers want: Students want to organize all kinds of meetups in a fast and efficient way, eg project meetups, interests groups etc."
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "* Limitations of what customers can do now: Hard to coordinate the meetups as they are unable to locate people of available time slots or contact people with similar interests. They have to resort to use platforms such as WhatsApp to advertise their events through friends, and coordinate similar time slots through very manual means such as Google Docs and Doodle."
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "* Benefits customers seek to achieve: Students want to do all the scheduling, inviting and finalizing of a meetup in a fast and effective way."
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "* How value proposition is delivered: The event organiser app provides a large database of all the contacts and information of NUS students, which allows the organizers to search by name, availability, interests etc."
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "[Discrete]"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "\u003d\u003d\u003d Feature"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "\u003d\u003d\u003d\u003d Division of work"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": "#### Keng Ji : Add event feature with polls and time, location features"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": "- [x] V1.1: Event organiser able to create a basic event with date, time, organiser, participant and poll features."
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": "- [ ] V1.2: Organisers able to \"invite\" participants to get recommendations for and set location;"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": "Users able to search for events by attributes (date, time, location, interest) and retrieve joined events."
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": "- [ ] V1.3: Application able to generate poll options based on application recommendation for time and location."
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "#### Yao Feng : Add login function and improve on search functions"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "- [x] V1.1: Basic login command."
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "- [ ] V1.2: Search for users based on phone number, interests, friendships, schedule, and address."
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "- [ ] V1.3: Improved login command with password."
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "#### Zhang Cheng : Add additional attributes for networking among users"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "- [x] V1.1: Users able to specify their interests."
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": "- [ ] V1.2: Users able to specify friendships with other people."
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": "- [ ] V1.3: Users able to form groups and find mutual friends."
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "#### Adeel : Add location-related features"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": "- [ ] V1.1: Add feature of nearest MRT for each individual."
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": "- [ ] V1.2: Implement recommendation of best meet-up location via MRT lines."
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": "- [ ] V1.3: Implement Google maps visualisation."
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "#### Jason : Event Management/Recommendation"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": "- [x] V1.1: Pull schedule from NUS Mods and convert to a timetable. Allow Unions of timetable."
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": "- [ ] V1.2: Create, Update, Delete individual slots in timetable. Find best possible time for events using timetables."
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": "- [ ] V1.3: Visualize timetables of multiple friends."
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "|`* * *`|Event Organiser|Find people that might be interested in the event that I am organising.| Find potentially interested individuals to join my event."
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "|`* * *`|Event Organiser|Allow my participants to vote for their most preferred time and location.| Organise an event at a time and location based on popular vote."
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "|`* * *`|Event Organiser|Automate the task of sieving through the schedules of all my participants for the ideal meet-up location and meet-up time.| Do not have to worry about the hassle of finding the best time and location for my event."
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "|`* * *`|Event Organiser|Have a specialised platform to post events aimed at a tech-savvy audience.| Promote my event to an audience that I am interested in."
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "|`* * *`|Busy User|Have a platform to search for all the events that are near the place I stay.| Go to an event without the trouble of travelling long distances."
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "|`* * *`|Busy User|Have a platform to search for all the events that occur during my free time.| Easily find a event that I have time to go for."
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "|`* * *`|Tech-savvy User| Have a platform that supports CLI.| Easily write scripts to automatic the task that I want to accomplish on a regular basis."
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "|`* * *`|User|Keep track of all the events that I can gone to.| Have a record of the events that I have been to."
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "|`* * *`|User|Visualise the event location on Google maps.| Find out exactly how to get to that location."
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "|`* * *`|User|A social media kind of platform which specialises on organising events.| Know the events that my friends are going to and let my friends know about the events that I am going to."
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "|`* * *`|User|Easily find other users based on their particulars.| Find my friends and family members, or anyone that might be of interest to me."
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "|`* * *`|User|Create an individual profile with some security features.| I can access and make changes to my own profile easily, but other people will not have access to it."
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "|`* * *`|NUS student|Have a platform that utilises NUSMODS\u0027s schedule.| Conveniently update my schedule using NUSMODS\u0027s schedule."
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "|`* * *`|NUS student|Have a platform that can facilitate the task of finding the ideal time and location for project group meet-ups.| Easily organise project group meet-ups instead of asking each individual group mates one by one."
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "|`* *`|Event Organiser|Find people who live close to a specific location and people who are available at a specific time.| Find people who are at least able to attend the event."
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "|`* *`|User|Find mutual friends in among my social circle and people with similar interests as me.|I can widen my social circle and meet like minded people."
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "|`*`|User|Visualise my social network and the groups I am a part of.| See how I am connected with another person."
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "//(For all use cases below, the *System* is the `AddressBook` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "(For all use cases below, the *System* is the `EventOrganiser`, unless specified otherwise)"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "\u003d\u003d\u003d Use case: U01 - Create new user"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "*Actor: New user*"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "*MSS:*"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "1.\tUser creates new user profile by specifying his/her contact detail, address, schedule, and interests."
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "2.\tSystem checks that the details are valid."
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "3.\tSystem informs the user that the profile has been successfully created."
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "*Extensions:*"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "* 2a. User enters invalid detail."
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "** 2a1. System will prompt user to re-enter their details."
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "** 2a2. User enters profile details again."
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "Steps 2a1 - 2a2 are repeated until the details entered are valid."
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "Use case resumes from step 3."
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "\u003d\u003d\u003d Use case: U02 - Log in to a user account"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "*Actor: User*"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "*MSS:*"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "1.\tUser creates logs in using his/her name, contact detail, address, and email"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "2.\tSystem checks that the details are valid."
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "3.\tSystem informs the user that he/she has successfully logged in."
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "*Extensions:*"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "* 2a. User enters invalid details."
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "** 2a1. System will prompt user to re-enter their details."
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "** 2a2. User enters profile details again."
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "Steps 2a1 - 2a2 are repeated until the details entered are valid."
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "Use case resumes from step 3."
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "\u003d\u003d\u003d Use case: U03 – Delete a user"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "*Actor: User*"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "*MSS:*"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "1.\tUser chooses to delete his/her user profile."
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "2.\tSystem checks that the profile that will be deleted corresponds to the profile of the current user."
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "3.\tSystem informs the user that the profile has been successfully deleted."
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "4.\tSystem deletes the user profile within its storage."
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "*Extensions:*"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "* 2a. The profile to be deleted does not correspond to the profile of the current user."
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "** 2a1. System informs user that the profile cannot be deleted."
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "** 2a2. User either change his profile or change the profile that he/she wants to delete."
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "Steps 2a1 – 2a2 are repeated until the current user and the user profile that will be deleted matches."
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "Use case resumes from step 3."
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "\u003d\u003d\u003d Use case: U04 – Create new event"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "*Actor: User*"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "*Precondition: User has identified himself/herself*"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "*MSS:*"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "1.\tUser creates a new event by specifying the details of the event."
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "2.\tSystem checks that the details are valid."
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "3.\tSystem informs the user that the event has been successfully created."
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "*Extensions:*"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "* 2a. User enters invalid details."
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "** 2a1. System will prompt user to re-enter the event details."
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "** 2a2. User enters event details again."
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "Steps 2a1 - 2a2 are repeated until the details entered are valid."
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "Use case resumes from step 3."
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "\u003d\u003d\u003d Use case: U05 – Delete an event"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "*Actor: User*"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "*Precondition: User has identified himself/herself*"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "*MSS:*"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "1.\tUser chooses to delete an event."
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "2.\tSystem checks that the event belongs to the user."
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "3.\tSystem informs the user that the event has been successfully deleted."
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "*Extensions:*"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "* 2a. The event that will be deleted does not belong to the user."
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "** 2a1. System will inform the user that the event cannot be deleted."
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "** 2a2. User either change his profile or change the event that he/she wants to delete."
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "** Steps 2a1 – 2a2 are repeated until the event belongs to the current user."
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "Use case resumes from step 3."
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "\u003d\u003d\u003d Use case: U06 - User joins an event"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "*Actor: User*"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "*Precondition: User has identified himself*"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "*MSS:*"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "1.\tUser searches for available events."
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "2.\tSystem shows user all the events that are available."
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "3.\tUser chooses an event that he wants to join."
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "4.\tSystem informs the user that he/she has been successfully joined the event."
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "*Extensions:*"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "* 1a. User may specify extra details to filter out search results."
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "\u003d\u003d\u003d Use case: U07 – User invites other to join him/her event"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "*Actor: Event organiser, another user that will be invited to join the event organiser’s event*"
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "*Precondition: All the relevant users have identified themselves*"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "*MSS:*"
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "1.\tEvent organiser searches for other users."
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "2.\tSystem shows user all the other users."
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "3.\tUser chooses a user that he/she wants to invite."
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "4.\tSystem informs the event organiser that an invitation has been sent to the user."
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "5.\tSystem informs the user of an invitation to join an event."
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "6.\tUser being invited choose to accept the event invitation."
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "7.\tSystem informs the user that he/she has successfully joined the event."
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "8.\tSystem informs the event organiser that a new user has joined his/her event."
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "Use"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "*Extensions:*"
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "* 1a. Event organiser may specify extra details to filter search results."
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "* 6a. User being invited may choose to deny the event invitation."
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "** 6a1. System informs the user that he/she has rejected the event invitation."
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "\u003d\u003d\u003d Use case: U08 – User who is keen on joining an event chooses their preferred date, time and location for the event, given that the event organiser has created a polling session for this event"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "*Actor: Event organiser, user who is keen to join an event*"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "*Precondition: All relevant User has identified himself*"
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "*MSS:*"
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "1.\tUser searches for the event that he wants to join."
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "2.\tSystem shows all the possible date, time, and location options that the event organiser has allocated for this event."
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "3.\tUser chooses his/her preferred date, time, and locations."
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "4.\tSystem informs the user’s options has been successfully updated."
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "5.\tSystem updates polling information in its storage."
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "\u003d\u003d\u003d Use case: U09 – Event organiser gets the recommended date, time and location for his event from the system’s algorithm and the polling session. Thereafter, chooses the date, time and location for his event"
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "*Actor: Event organiser*"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "*Precondition: Event organiser has identified himself and has created an event*"
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "*MSS:*"
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "1.\tEvent organiser asks the systems to recommend the date and time for the event based on the schedules of the current users that have indicated that they are going."
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "2.\tSystem shows a few recommendations for the date and time."
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "3.\tEvent organiser checks the polling result for the date and time."
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "4.\tSystem shows the top choices for the date and time from the polling session."
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "5.\tEvent organiser chooses the date time for his date and time for the event."
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "6.\tSystem informs user that the date and time has been successfully updated."
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "7.\tSystem updates the date and time for the event."
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "8.\tEvent organiser Event organiser asks the systems to recommend the date and time for the event on the address of the current users that have indicated that they are going."
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "9.\tSystem shows a few recommendations for the location."
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "10.\tEvent organiser checks the polling result for the date and time."
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "11.\tSystem shows the top choices for location from the polling session."
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "12.\tEvent organiser chooses the location for the event."
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "13.\tSystem informs the location has been successfully updated."
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "*Extension:*"
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "* 1a. Event organiser asks for recommendations when the event does not have any users that has indicated that they are going."
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "** 1a1. The system will recommend time and date based on the schedule of the event organiser."
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "Use case resumes from step 3."
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "* 3a. Event organiser checks the polling result when more than 1 option has the highest votes."
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "** 3a1. System will show all the options that have the highest votes only."
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "Use case resumes from step 5."
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "* 8a. Event organiser ask for recommendations when the event does not have any users that has indicated that they are going."
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "** 8a1. The system will recommend the location based on the address of the event organiser."
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "Use case resumes from step 10."
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "* 10a. Event organiser checks the polling result when more than 1 option has the"
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "highest votes."
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "** 10a1. System will show all the options that have the highest votes only."
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "Use case resumes from step 12."
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ".  Commands should be intuitive for users to pick up easily."
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ".  Allows a limited form of security by ensuring that users are only able to log in to their own accounts."
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "[[user]] User / Person::"
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "Refers to a person who uses EventOrganiser."
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "[[user-profile]] User Profile::"
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "Refers to an account that is recorded in EventOrganiser."
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "[[new-user]] New User::"
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "Refers to a person who does not own a user profile in EventOrganiser."
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "[[current-user]] Current User::"
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "Refers to the user currently identified by the system."
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "[[event-organiser]] Event Organiser::"
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "Refers to a user who has created an event."
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "////"
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "////"
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "////"
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "////"
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "* NIL"
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "yao-feng": 343,
      "adjscent": 57,
      "agendazhang": 2,
      "-": 1020
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Event Organiser - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S1-W10-3/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "By: `Team W10-3`      Since: `Aug 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "EventOrganiser is an application for managing and organising events built for NUS students. More importantly, EventOrganiser is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, AB4 can get your contact management tasks done faster than traditional GUI apps. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ".  Download the latest `addressbook.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your Address Book."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "* *`listUsers`* : lists all contacts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : adds a contact named `John Doe` to the Address Book."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* **`delete`**`3` : deletes the 3rd contact shown in the current list"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "Shows all the commands in the app and how to use them."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Login : `login`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "Allows the user to login to the system. A user must first log in to enable certain commands to be executed."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "Users can also use a the command alias `l` to replace the `login\u0027 command."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "`login n/USERNAME p/PHONE e/EMAIL`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "`l n/USERNAME p/PHONE e/EMAIL`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "`login n/John Doe p/98765432 e/johnd@example.com`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "`l n/John Doe p/98765432 e/johnd@example.com`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d User Commands"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "\u003d\u003d\u003d\u003d Listing all users : `listUsers`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Shows a list of all users in the event organiser. +"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `listUsers`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Locating users: `findUser`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "Finds users whose names contain any of the given keywords. +"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `findUser [KEYWORD] [KEYWORDS]...`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "* users matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "* `findUser John` +"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "Returns `john` and `John Doe`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "* `findUser Betsy Tim John` +"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "Returns any user having names `Betsy`, `Tim`, or `John`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Locating users by available time range: `findUserAvailAt`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "Finds users who are available between a start and end time on a specific day."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `findUserAvailAt t1/HOUR:MINUTE t2/HOUR:MINUTE d/DAY/MONTH/YEAR`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "* `findUserAvailAt t1/08:00 t2/10:00 d/23-08-2018` +"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "Finds users available from 8am to 10am on 23 August."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "\u003d\u003d\u003d\u003d Locating users who live close to a MRT station: `findUserCloseTo`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "//"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "Finds users who live close to a MRT station. +"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "Format: `findUserCloseTo MRTNAME r/SEARCH_RADIUS`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "* SEARCH_RADIUS is defined by the number of MRT stations from MRTNAME"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "* `findUserCloseTo Clementi r/2`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "Finds all users who live within 2 stops from Clementi MRT Station."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Locating users who know a user: `findFriendsOf`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "Finds users who are friends of a user. +"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `findFriendsOf USERNAME`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* `findFriendsOf John Doe`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting a user : `deleteUser`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the specified user from the event organiser. +"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `deleteUser INDEX`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "* Deletes the user at the specified `INDEX`."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "* The index refers to the index number shown in the displayed user list."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "* A user can only deleted by the owner of the user profile"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "`deleteUser 2` +"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "Deletes the 2nd user in the event organiser."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "`deleteUser 1` +"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "Deletes the 1st user in the results of the `find` command."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "\u003d\u003d\u003d\u003d Selecting a user : `select`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "Selects the user identified by the index number used in the displayed user list. +"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `select INDEX`"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "* Selects the user and loads the Google search page the user at the specified `INDEX`."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "* The index refers to the index number shown in the displayed user list."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "`select 2` +"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "Selects the 2nd user in the event organiser."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "`select 1` +"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "Selects the 1st user in the results of the `find` command."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Clearing all user entries : `clear`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "Clears all users from the event organiser. +"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setup user commands"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "\u003d\u003d\u003d\u003d Setup a user : `setupUser`"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "Set up a new user to the event organiser. This is one of the only two commands that are available before an user logs in (the other being `setupUser`) +"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "Format: `setupUser n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [i/INTEREST]...`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "A user can have any number of tags (including 0)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "* `setupUser n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01`"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "* `setupUser n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 t/criminal`"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Editing a user : `edit`"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "Edits an existing user in the event organiser. +"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "Format: `edit INDEX n/NAME p/PHONE e/EMAIL a/ADDRESS i/INTEREST...`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "* Edits the user at the specified `INDEX`. The index refers to the index number shown in the displayed user list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "* When editing tags, the existing tags of the user will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "* You can remove all the user\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "* `edit 1 p/91234567 e/johndoe@example.com` +"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "Edits the phone number and email address of the 1st user to be `91234567` and `johndoe@example.com` respectively."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "* `edit 2 n/Betsy Crower t/` +"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "Edits the name of the 2nd user to be `Betsy Crower` and clears all existing tags."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Add an interest : `addInterest`"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "Adds an interest to the pre-selected user. +"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `addInterest INTEREST`"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "* `addInterest Tennis` +"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "Adds the interest \"Tennis\" to the pre-selected user."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Add a group : `addGroup`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "Adds a group to the pre-selected user. +"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `addGroup GROUP`"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "* `addGroup SOC` +"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "Adds the group \"SOC\" to the pre-selected user."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Add a friend : `addFriend`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "Adds another user as a friend of the pre-selected user. +"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `addFriend USERNAME`"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "* `addFriend John Doe` +"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "Adds the user \u0027John Doe\u0027 as a friend of pre-selected user."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "\u003d\u003d\u003d\u003d Setup useral weekly schedule : `addSchedule`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "Sets up a user\u0027s weekly schedule using NUSMods timetable."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `addSchedule NUSMODS_LINK`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "* `addSchedule http://modsn.us/ij207`"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Add activity to schedule : `addToSchedule`"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "Adds a range of unavailable times to the weekly schedule."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "Format: `addToSchedule t1/HOUR:MINUTE t2/HOUR:MINUTE [w/DAY_OF_WEEK]`"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "* `addToSchedule t1/08:00 t2/12:00 w/Tuesday` +"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "Adds activity from 8am to 12pm every Tuesday."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Create and confirm event commands"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Create a new event : `addEvent`"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "Adds a new event to the event organiser. +"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `addEvent n/NAME a/LOCATION t/TAGS`"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "* `addEvent n/NUS Tennis Welcome Session, a/SOC Canteen t/NIL`"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "* `addEvent n/CS1101S Meet-up a/UTown t/By invite`"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Delete an event : `deleteEvent`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the specified event from the event organiser. +"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `deleteEvent INDEX`"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "* Deletes the event at the specified `INDEX`."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "* The index refers to the index number shown in the displayed user list."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "* Event can only be deleted by the event organiser"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "`deleteEvent 2` +"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 2nd event in the event organiser."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Set the event date : `setDate`"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "Sets the event date. +"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `setDate d/DAY-MONTH-YEAR`"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "* Day, month and year are specified as numbers."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "* `setDate d/08-09-2018`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "* `setDate d/11-12-2019`"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Set the event time : `setTime`"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "Sets the event time. +"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `setTime t1/HOUR:MINUTE t2/HOUR:MINUTE`"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "* Time is specified in 24 hour format"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "* `setTime t1/23:00 t2/23:30`"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "* `setTime t1/13:30 t2/14:00`"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Set the event location : `setPlace`"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "Sets the location of the event. +"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `setPlace PLACENAME`"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "* `setPlace Central Library`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "* `setPlace Clementi Mall`"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Create a new poll for an event : `addPoll n/NAME`"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "Sets up a new poll for the event with the specified name. +"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `addPoll n/Location`"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "\u003d\u003d\u003d\u003d Setup poll for location : `addOption`"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "Add new poll option in the specified poll. +"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `addOption i/POLL_ID o/OPTION`"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "* `addOption i/1 o/SoC canteen`"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Set poll deadline : `setPollDeadline`"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "Sets a deadline for the poll. +"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `setPollDeadline DAY/MONTH/YEAR HOUR:MINUTE`"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "* `setPollDeadline 08/09/2018 23:59`"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "* `setPollDeadline 10/11/2019 13:00`"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Get poll result : `displayPoll`"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "Gets the result of a specified poll. +"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `displayPoll i/POLL_INDEX`"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "* `displayPoll i/1`"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "\u003d\u003d\u003d\u003d Confirm all event details : `confirmEvent`"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "\u003d\u003d\u003d\u003d Get recommendation for time : `recDayTime`"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "Retrieves recommendations for the best time on a specific day of a week to hold the event. +"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "Format: `recDayTime`"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "* The event organiser will calculate and display the time slots where the most participants can attend, based on their NUSMods schedule and stated unavailable timeslots."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Get recommendation for location : `recPlace`"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "Retrieves recommendations for the best location to hold the event. +"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `recPlace`"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "* The event organiser will compute the best event location (most central MRT station) based on the proximity of the participants\u0027 addresses."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Join event commands"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Find event by the name of the event : `findEvent`"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "Finds events based on the attributes of the event: event name, event location, date, start time, event organiser, and event participants.+"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `findEvent [e/EVENT_NAME] [a/LOCATION] [d/DATE] [t1/START_TIME] [on/ORGANISER_NAME] [pn/PARTICIPANT_NAME]`"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "* `findEvent e/FaceBook Recruitment Talk on/John Doe` +"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "Finds all events with the name \"FaceBook Recruitment Talk\" and with the organiser whose name is \"John Doe\"."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "\u003d\u003d\u003d\u003d Find event by a date range : `findEventByDate`"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "Finds events based start and end date. +"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "Format: `findEvent d1/FROMDATE d2/TODATE`"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "* Dates are specified in DAY/MONTH/YEAR format."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "* `findEvent d1/23/08/2018 d2/25/08/2018` +"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "Finds all events held between 23 August and 25 August in 2018."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "\u003d\u003d\u003d\u003d Find event by a time interval: `findEventByTime`"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "Finds events based start and end time. +"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `findEvent d/DATE t1/FROMTIME t2/TOTIME`"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "****"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "* Times are specfied in 24 hour, HOUR:MINUTE format."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "****"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "* `findEvent d/12-12-2018 t1/12:00 t2/18:00` +"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "Finds all events held between 12pm and 6pm on 12 December 2018."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "\u003d\u003d\u003d\u003d Find event by a time interval: `findEventByMRTStation`"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "Finds events based MRT Station. +"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "Format: `findEvent p/PLACE`"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "* `findEvent Clementi` +"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "Finds all events held near Clementi."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "// Find event by interest?"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "\u003d\u003d\u003d\u003d Join event : `joinEvent`"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "Joins event identified by unique event ID. +"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "Format: `joinEvent ID`"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "* `joinEvent 213`"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "\u003d\u003d\u003d\u003d Vote for date : `voteOption`"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "Vote for a option specified in a specified poll, if there is one."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `voteDate i/POLL_ID o/OPTION_ID`"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "* `voteDate i/3 o/12 August`"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d List joined events : `listJoinedEvents`"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "Lists all the events joined by the current user."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `listJoinedEvents`"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing entered commands : `history`"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undoing previous command : `undo`"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "Restores the event organiser to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "Undoable commands: those commands that modify the event organiser\u0027s content (`add`, `delete`, `edit` and `clear`)."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "* `select 1` +"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Redoing the previously undone command : `redo`"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "Event organiser data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "_{explain how the user can enable/disable data encryption}_"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "* *Login*  `login n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS`"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "e.g. `login n/John Doe p/98765432 e/johnd@example.com a/123, Clementi Rd, 1234665`"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "* *Add* `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...` +"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague`"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "* *Delete* : `delete INDEX` +"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `delete 3`"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "adjscent"
        },
        "content": "* *Edit* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [s/ SCHEDULE] [su/ SCHEDULE_UPDATE] [tt/ TIMETABLE] [t/TAG]...` +"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "adjscent"
        },
        "content": "e.g. `edit 2 n/James Lee e/jameslee@example.com` +"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "adjscent"
        },
        "content": "e.g. `edit 1 tt/ http://modsn.us/H4v8s` +"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "adjscent"
        },
        "content": "e.g. `edit 1 su/ monday 0000`"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `find James Jake`"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "* *List* : `list`"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "* *Select* : `select INDEX` +"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "e.g.`select 2`"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "* *History* : `history`"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "* *Redo* : `redo`"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "adjscent"
        },
        "content": "* *Free time between persons*: `maxSchedule INDEX INDEX ...` +"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "adjscent"
        },
        "content": "e.g. `maxSchedule 0 1 2 3`"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "adjscent"
        },
        "content": "​"
      }
    ],
    "authorContributionMap": {
      "yao-feng": 89,
      "adjscent": 7,
      "agendazhang": 7,
      "-": 442
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAddressBookStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "// Testing Travis CI"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs userPrefs;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing EventOrganiser ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic, config, userPrefs);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        initEventsCenter();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initEventsCenter() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting EventOrganiser \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping EventOrganiser Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.stop();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        stop();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yao-feng": 2,
      "-": 208
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/index/Index.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    private int zeroBasedIndex2;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    private Index(int zeroBasedIndex, int zeroBasedIndex2) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        if (zeroBasedIndex \u003c 0 || zeroBasedIndex2 \u003c 0) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        this.zeroBasedIndex2 \u003d zeroBasedIndex2;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public int getZeroBased2() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        return zeroBasedIndex2;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public int getOneBased2() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        return zeroBasedIndex2 + 1;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex, int zeroBasedIndex2) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        return new Index(zeroBasedIndex, zeroBasedIndex2);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex, int oneBasedIndex2) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        return new Index(oneBasedIndex - 1, oneBasedIndex2 - 1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                \u0026\u0026 zeroBasedIndex2 \u003d\u003d ((Index) other).zeroBasedIndex2); // state check"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agendazhang": 36,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/AddressBookChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/** Indicates the AddressBook in the model has changed*/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ReadOnlyAddressBook data;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookChangedEvent(ReadOnlyAddressBook data) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        return \"number of persons \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "                + data.getPersonList().size()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "                + \"number of events \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "                + data.getEventList().size();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yao-feng": 5,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import java.util.StringTokenizer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public static final String COMMA \u003d \",\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                + \"should be a single word\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            ArrayList\u003cInteger\u003e values \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            if (s.contains(COMMA)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                values \u003d splitIntegersWithComma(s);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                values.add(Integer.parseInt(s));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            for (int value : values) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                if (!(value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"))) { // \"+1\" successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * Given a string that separates two integers with a comma (eg \"1,2\"), this function returns"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * an ArrayList that contains the two integers"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public static ArrayList\u003cInteger\u003e splitIntegersWithComma(String s) throws NumberFormatException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        ArrayList\u003cInteger\u003e values \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        StringTokenizer st \u003d new StringTokenizer(s, \",\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        while (st.hasMoreTokens()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            values.add(Integer.parseInt(st.nextToken()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        return values;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agendazhang": 31,
      "-": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/TimeTableUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "adjscent"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import java.net.HttpURLConnection;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import seedu.address.model.person.Lesson;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import seedu.address.model.person.TimeTable;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "adjscent"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "adjscent"
        },
        "content": " * @author adjscent"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "adjscent"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "adjscent"
        },
        "content": "public class TimeTableUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * Examples"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * User selects share timetable"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * - http://modsn.us/H4v8s - is given"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * We will break that url down into the long url"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * https://nusmods.com/timetable/sem-1/share?CS2102\u003dLEC:1,TUT:11\u0026"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * CS2103\u003dLEC:1,TUT:01\u0026"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * CS2105\u003dLEC:1,TUT:16\u0026"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * CS2106\u003dLAB:09,LEC:1,TUT:09\u0026MA1521\u003dLEC:1,TUT:4\u0026"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * UCV2209\u003dSEM:01"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * This long url contains the info we need :)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    // Messages"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    public static final String INVALID_URL \u003d \"Invalid NUSMODS URL\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    public static final String API_CALL_FAILURE \u003d \"Cannot retrieve NUSMODS module information\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    // URL indexs for nusmods"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    private static final int SEMSTER_INDEX \u003d 4;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    private static final int MODULE_INDEX \u003d 5;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    // REGEX constants cos laziness"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    private static final String REGEX_SLASH \u003d \"/\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    private static final String REGEX_EQUAL \u003d \"\u003d\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    private static final String REGEX_DASH \u003d \"-\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    private static final String REGEX_COMMA \u003d \",\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    private static final String REGEX_COLON \u003d \":\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    private static final String REGEX_GET_SEPARATER \u003d \"\\\\?\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    private static final String REGEX_MODULE_SEPARATER \u003d \"\u0026\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * @param url"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    public static TimeTable parseUrl(String url) throws ParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        return parseLongUrl(parseShortUrl(url));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * @param urlString"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    public static String parseShortUrl(String urlString) throws ParseException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            URL url \u003d new URL(urlString);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            HttpURLConnection httpUrlConnection \u003d (HttpURLConnection) url.openConnection();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            // 1 sec timeout in case no internet or nusmods is down"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            httpUrlConnection.setReadTimeout(1000);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            // Get the redirected link"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            String longUrlString \u003d httpUrlConnection.getHeaderField(\"Location\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            httpUrlConnection.disconnect();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            // Redirect failure handler"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            if (longUrlString.equals(\"\") || longUrlString \u003d\u003d null) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "adjscent"
        },
        "content": "                throw new ParseException(INVALID_URL);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            // Invalid short url handler"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            if (longUrlString.equals((\"http://modsn.us\"))) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "adjscent"
        },
        "content": "                throw new ParseException(INVALID_URL);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            return longUrlString;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            throw new ParseException(INVALID_URL);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            throw new ParseException(INVALID_URL);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * @param urlString"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    public static TimeTable parseLongUrl(String urlString) throws ParseException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        // variables"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        ArrayList\u003cLesson\u003e lessonList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        // split url into /../../../"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        String[] parts \u003d urlString.split(REGEX_SLASH);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        // get semster from url"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        String semster \u003d parts[SEMSTER_INDEX];"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        // get each modules from url and remove share?"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        String[] modules \u003d parts[MODULE_INDEX].split(REGEX_GET_SEPARATER)[1].split(REGEX_MODULE_SEPARATER);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        // Get all of the (limited) module information via api call"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        for (String module : modules) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            ArrayList\u003cLesson\u003e newlist \u003d parseModule(module, semster);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            lessonList.addAll(newlist);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        TimeTable timetable \u003d new TimeTable(lessonList);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        return timetable;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * @param module"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * @param semster"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    public static ArrayList\u003cLesson\u003e parseModule(String module, String semster) throws ParseException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        // split CS2103\u003dLEC"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        String[] moduleInfo \u003d module.split(REGEX_EQUAL);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        String moduleCode \u003d moduleInfo[0]; // CS2103"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        // So that it is easier to select our own module slots when looking through the full list"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        String[] moduleChosenSlotList \u003d moduleInfo[1].split(REGEX_COMMA);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        HashMap\u003cString, String\u003e moduleChosenSlotMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        for (String moduleChosenSlot : moduleChosenSlotList) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            String[] temp \u003d moduleChosenSlot.split(REGEX_COLON);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            moduleChosenSlotMap.put(temp[0], temp[1]);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        // Get Semester number"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        int semsterNumber \u003d Integer.parseInt(semster.split(REGEX_DASH)[1]);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        ArrayList\u003cLesson\u003e lessonList \u003d obtainModuleInfoFromApi(moduleCode, semsterNumber);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        ArrayList\u003cLesson\u003e toBeAddedLessonList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        // Note that the api call will give back all timeslots of the module"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        // We will need to select the ones that are relevant to us"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        for (Lesson lesson : lessonList) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            // Need to change Lecture to LEC, Tutorial to TUT... before using the hashmap"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            String moduleSlotNum \u003d moduleChosenSlotMap.get(lesson.getLessonType().substring(0, 3).toUpperCase());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            if (moduleSlotNum !\u003d null \u0026\u0026 moduleSlotNum.equals(lesson.getClassNo())) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "adjscent"
        },
        "content": "                toBeAddedLessonList.add(lesson);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        return toBeAddedLessonList;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * API call for nusmods"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     *"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * @param semNum"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    public static ArrayList\u003cLesson\u003e obtainModuleInfoFromApi(String moduleCode, int semNum) throws ParseException {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        LocalDate currentDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        String acadYear;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        // Calculate current academic year"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        if (currentDate.getMonthValue() \u003c\u003d 6) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            acadYear \u003d (currentDate.getYear() - 1) + \"-\" + (currentDate.getYear());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            acadYear \u003d currentDate.getYear() + \"-\" + (currentDate.getYear() + 1);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        // Link format is correct as of 25/9/2018"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        String link \u003d \"http://api.nusmods.com/\" + acadYear + \"/\" + semNum + \"/modules/\" + moduleCode + \".json\";"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        ObjectMapper mapper \u003d new ObjectMapper();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            // Grab lesson info from API and store as a map"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            URL url \u003d new URL(link);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            Map\u003cString, Object\u003e mappedJson \u003d mapper.readValue(url, HashMap.class);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            ArrayList\u003cHashMap\u003cString, String\u003e\u003e lessonInfo \u003d (ArrayList\u003cHashMap\u003cString, String\u003e\u003e)"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "adjscent"
        },
        "content": "                mappedJson.get(\"Timetable\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            // Parse the information from API and creates an Arraylist of all possible lessons"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            ArrayList\u003cLesson\u003e lessons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            for (HashMap\u003cString, String\u003e lesson : lessonInfo) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "adjscent"
        },
        "content": "                Lesson lessonToAdd \u003d new Lesson(moduleCode, lesson.get(\"ClassNo\"), lesson.get(\"LessonType\"),"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "adjscent"
        },
        "content": "                    lesson.get(\"WeekText\"), lesson.get(\"DayText\"), lesson.get(\"StartTime\"), lesson.get(\"EndTime\"));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "adjscent"
        },
        "content": "                lessons.add(lessonToAdd);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            return lessons;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        } catch (IOException exception) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            throw new ParseException(API_CALL_FAILURE);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "adjscent"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "adjscent": 218
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/LoginCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yao-feng"
        },
        "content": " * Allow a person to login to EventOrganiser."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yao-feng"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "public class LoginCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"l\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"login\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Login a person to the address book. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Welcome back %1$s!\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    public static final String MESSAGE_PERSON_DOES_NOT_EXIST \u003d \"This person does not exist in the address book\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    private Person toLogin;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "     * Creates an LoginCommand to log in the specified {@code CurrentUser}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    public LoginCommand(Person person) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        toLogin \u003d person;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        if (!model.hasPerson(toLogin)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "            throw new CommandException(MESSAGE_PERSON_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        model.setCurrentUser(toLogin);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toLogin.getName()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        return toLogin.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "                || (other instanceof LoginCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "                \u0026\u0026 toLogin.equals(((LoginCommand) other).toLogin));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yao-feng": 64,
      "agendazhang": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/MaxScheduleCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Schedule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Max Schedule Command"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "adjscent"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "adjscent"
        },
        "content": " * @author adjscent"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class MaxScheduleCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"maxSchedule\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Find free time between several users. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"1 2 3 4 5 ...\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Free time found: %1$s!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSON_DOES_NOT_EXIST \u003d \"This person does not exist in the address book\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index[] indexs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Schedule schedule;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an LoginCommand to log in the specified {@code CurrentUser}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public MaxScheduleCommand(Index[] indexs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(indexs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.indexs \u003d indexs;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        schedule \u003d new Schedule();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cPerson\u003e persons \u003d new ArrayList\u003cPerson\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        String text \u003d \"\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            for (Index index : indexs) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                Person person \u003d model.getPerson(index);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                persons.add(person);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                schedule \u003d Schedule.maxSchedule(schedule, person.getSchedule());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "adjscent"
        },
        "content": "                text \u003d schedule.freeTimeToString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_PERSON_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, text));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            || (other instanceof MaxScheduleCommand)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            \u0026\u0026 Arrays.deepEquals(indexs, ((MaxScheduleCommand) other).indexs); // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "adjscent": 10,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/eventcommands/AddPollCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "//@@author theJrLinguist"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "package seedu.address.logic.commands.eventcommands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.commons.events.ui.DisplayPollEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.commands.exceptions.NoEventSelectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.commands.exceptions.NoUserLoggedInException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.event.Poll;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.event.exceptions.NotEventOrganiserException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": " * Command to add a new poll to the pre-selected event."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "public class AddPollCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addPoll\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a poll to the pre-selected event.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            + PREFIX_NAME + \"NAME \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Poll %1$s created for %2$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private final String pollName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Event}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public AddPollCommand(String pollName) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        requireNonNull(pollName);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        this.pollName \u003d pollName;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            Poll poll \u003d model.addPoll(pollName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            model.commitAddressBook();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            //model.updateEvent(event, event);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            String pollDisplayResult \u003d poll.displayPoll();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            EventsCenter.getInstance().post(new DisplayPollEvent(pollDisplayResult));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, pollName, model.getSelectedEvent()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        } catch (NoUserLoggedInException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NO_USER_LOGGED_IN);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        } catch (NoEventSelectedException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NO_EVENT_SELECTED);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        } catch (NotEventOrganiserException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NOT_EVENT_ORGANISER);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                || (other instanceof AddPollCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                \u0026\u0026 pollName.equals(((AddPollCommand) other).pollName)); // state check"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theJrLinguist": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/eventcommands/AddPollOptionCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "//@@author theJrLinguist"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "package seedu.address.logic.commands.eventcommands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_POLL_OPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.commons.events.ui.DisplayPollEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.commands.exceptions.NoEventSelectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.event.Poll;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": " * Command to adds an option to the specified poll"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "public class AddPollOptionCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addOption\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Event organiser adds option to the specified poll.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            + PREFIX_INDEX + \"INDEX OF POLL \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            + PREFIX_POLL_OPTION + \"OPTION \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Poll option %1$s added to poll %2$d\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private final String pollOption;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * Creates an AddPollOptionCommand to add the specified {@code Event}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public AddPollOptionCommand(Index index, String pollOption) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        requireNonNull(pollOption);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        this.targetIndex \u003d index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        this.pollOption \u003d pollOption;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            Poll poll \u003d model.addPollOption(targetIndex, pollOption);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            model.commitAddressBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            String result \u003d String.format(MESSAGE_SUCCESS, pollOption, targetIndex.getOneBased());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            String pollDisplayResult \u003d poll.displayPoll();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            EventsCenter.getInstance().post(new DisplayPollEvent(pollDisplayResult));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            return new CommandResult(result);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            throw new CommandException(\"No poll exists at this index.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        } catch (NoEventSelectedException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NO_EVENT_SELECTED);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                || (other instanceof AddPollOptionCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                \u0026\u0026 pollOption.equals(((AddPollOptionCommand) other).pollOption)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((AddPollOptionCommand) other).targetIndex));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theJrLinguist": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/eventcommands/DeleteEventCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "//@@author theJrLinguist"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "package seedu.address.logic.commands.eventcommands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.event.exceptions.NotEventOrganiserException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": " * Deletes an event identified using its displayed index from the event organiser."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "public class DeleteEventCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteEvent\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            + \": Deletes the event identified by the index number used in the displayed event list.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public static final String MESSAGE_DELETE_EVENT_SUCCESS \u003d \"Deleted Event: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public DeleteEventCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        List\u003cEvent\u003e lastShownList \u003d model.getFilteredEventList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Event eventToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            model.deleteEvent(eventToDelete);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        } catch (NotEventOrganiserException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NOT_EVENT_ORGANISER);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_EVENT_SUCCESS, eventToDelete));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                || (other instanceof DeleteEventCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteEventCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theJrLinguist": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/eventcommands/DisplayPollCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "//@@author theJrLinguist"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "package seedu.address.logic.commands.eventcommands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.commons.events.ui.DisplayPollEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.commands.exceptions.NoEventSelectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.event.Poll;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": " * Command to display a poll of a pre-selected event given an index."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "public class DisplayPollCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"displayPoll\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Displays the poll with the provided index\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Poll %1$s of %2$s displayed.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * Creates an DisplayPollCommand to add the specified {@code Event}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public DisplayPollCommand(Index index) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        this.targetIndex \u003d index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            Event event \u003d model.getSelectedEvent();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            Poll poll \u003d event.getPoll(targetIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            String result \u003d String.format(MESSAGE_SUCCESS, targetIndex.getOneBased(), event);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            String pollDisplayResult \u003d poll.displayPoll();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            EventsCenter.getInstance().post(new DisplayPollEvent(pollDisplayResult));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            return new CommandResult(result);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NO_POLL_AT_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        } catch (NoEventSelectedException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NO_EVENT_SELECTED);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                || (other instanceof DisplayPollCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DisplayPollCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theJrLinguist": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/eventcommands/FindEventCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "//@@author theJrLinguist"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "package seedu.address.logic.commands.eventcommands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ORGANISER_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PARTICIPANT_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME_START;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.event.EventAttributesPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": " * Command to find event which have the specified attributes."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "public class FindEventCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findEvent\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds events which have the specified attributes \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            + PREFIX_EVENT_NAME + \"NAME \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            + PREFIX_ADDRESS + \"LOCATION \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            + PREFIX_DATE + \"dd-MM-yyyy \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            + PREFIX_TIME_START + \"HH:mm\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            + PREFIX_ORGANISER_NAME + \"ORGANISER NAME \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            + PREFIX_PARTICIPANT_NAME + \"PARTICIPANT NAME\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"%1$d event(s) found.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private final EventAttributesPredicate predicate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * Creates an FindEventCommand to add a date to the specified {@code Event}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public FindEventCommand(EventAttributesPredicate predicate) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        model.updateFilteredEventList(predicate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, model.getFilteredEventList().size()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                || (other instanceof FindEventCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindEventCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theJrLinguist": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/eventcommands/JoinEventCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "//@@author theJrLinguist"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "package seedu.address.logic.commands.eventcommands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.commons.events.ui.JumpToEventListRequestEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.commands.exceptions.NoUserLoggedInException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": " * Current user joins an event identified using its displayed index from the address book."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "public class JoinEventCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"joinEvent\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            + \": Current user joins the event identified by the index number used in the displayed event list.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Joined event: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public JoinEventCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        List\u003cEvent\u003e filteredEventList \u003d model.getFilteredEventList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredEventList.size()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Event event \u003d model.getEvent(targetIndex);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        model.setSelectedEvent(event);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            event.addPerson(model.getCurrentUser());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        } catch (DuplicatePersonException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_ALREADY_JOINED);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        } catch (NoUserLoggedInException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NO_USER_LOGGED_IN);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        model.updateEvent(event, event);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        EventsCenter.getInstance().post(new JumpToEventListRequestEvent(targetIndex));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        String result \u003d String.format(MESSAGE_SUCCESS, event);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        result +\u003d \"\\n\" + \"People attending: \" + event.getNameList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        return new CommandResult(result);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                || (other instanceof JoinEventCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((JoinEventCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theJrLinguist": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/eventcommands/SelectEventCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "//@@author theJrLinguist"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "package seedu.address.logic.commands.eventcommands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.commons.events.ui.DisplayPollEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.commons.events.ui.JumpToEventListRequestEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": " * Selects a event identified using its displayed index from the address book."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "public class SelectEventCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"selectEvent\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            + \": Selects the event identified by the index number used in the displayed event list.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public static final String MESSAGE_SELECT_EVENT_SUCCESS \u003d \"Selected Event: %1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public SelectEventCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        List\u003cEvent\u003e filteredEventList \u003d model.getFilteredEventList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredEventList.size()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Event event \u003d model.getEvent(targetIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        model.setSelectedEvent(event);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        EventsCenter.getInstance().post(new DisplayPollEvent(event.getInfo())); //need tests"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        EventsCenter.getInstance().post(new JumpToEventListRequestEvent(targetIndex));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_EVENT_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                || (other instanceof SelectEventCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((SelectEventCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theJrLinguist": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/eventcommands/SetDateCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "//@@author theJrLinguist"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "package seedu.address.logic.commands.eventcommands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.commands.exceptions.NoEventSelectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.commands.exceptions.NoUserLoggedInException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": " * Sets the date of an event."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "public class SetDateCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"setDate\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Confirms the date for the pre-selected event.\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            + PREFIX_DATE + \"dd-MM-yyyy \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Date %1$s set for %2$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private final LocalDate date;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private Event event;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * Creates an SetDateCommand to add a date to the specified {@code Event}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public SetDateCommand(LocalDate date) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public Event getEvent() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        return event;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            event \u003d model.getSelectedEvent();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            Person person \u003d model.getCurrentUser();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            if (!person.equals(event.getOrganiser())) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_NOT_EVENT_ORGANISER);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        } catch (NoUserLoggedInException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NO_USER_LOGGED_IN);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        } catch (NoEventSelectedException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NO_EVENT_SELECTED);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        event.setDate(date);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        model.updateEvent(event, event);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        DateTimeFormatter dateFormat \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, date.format(dateFormat), event));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                || (other instanceof SetDateCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                \u0026\u0026 date.equals(((SetDateCommand) other).date)); // state check"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theJrLinguist": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/eventcommands/SetTimeCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "//@@author theJrLinguist"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "package seedu.address.logic.commands.eventcommands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME_END;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME_START;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.commands.exceptions.NoEventSelectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.commands.exceptions.NoUserLoggedInException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": " * Sets the time of an event."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "public class SetTimeCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"setTime\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Confirms the time for the pre-selected event.\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            + \"Parameters (use 24-hr format): \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            + PREFIX_TIME_START + \"HH:mm \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            + PREFIX_TIME_END + \"HH:mm\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Time from %1$s to %2$s set for %3$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private final LocalTime startTime;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private final LocalTime endTime;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private Event event;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Event}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public SetTimeCommand(LocalTime startTime, LocalTime endTime) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        requireNonNull(startTime);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        requireNonNull(endTime);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void setEvent(Event event) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        this.event \u003d event;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            event \u003d model.getSelectedEvent();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            Person person \u003d model.getCurrentUser();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            if (!person.equals(event.getOrganiser())) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_NOT_EVENT_ORGANISER);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        } catch (NoUserLoggedInException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NO_USER_LOGGED_IN);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        } catch (NoEventSelectedException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NO_EVENT_SELECTED);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            event.setTime(startTime, endTime);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_END_BEFORE_START_TIME);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        model.updateEvent(event, event);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        DateTimeFormatter timeFormat \u003d DateTimeFormatter.ofPattern(\"HH:mm\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, startTime.format(timeFormat),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                endTime.format(timeFormat), event));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                || (other instanceof SetTimeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                \u0026\u0026 startTime.equals(((SetTimeCommand) other).startTime)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                \u0026\u0026 endTime.equals(((SetTimeCommand) other).endTime)); // state check"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theJrLinguist": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/eventcommands/VoteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "//@@author theJrLinguist"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "package seedu.address.logic.commands.eventcommands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_POLL_OPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.commons.events.ui.DisplayPollEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.commands.exceptions.NoEventSelectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.commands.exceptions.NoUserLoggedInException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.event.Poll;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.event.exceptions.UserNotJoinedEventException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": " * Command adds a vote to the specified poll and option."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "public class VoteCommand extends Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"vote\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": User adds vote to the option of the specified poll.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            + PREFIX_INDEX + \"INDEX \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            + PREFIX_POLL_OPTION + \"OPTION \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Voted for option \u0027%1$s\u0027 of poll %2$s.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private final Index pollIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private final String optionName;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * Creates an VoteCommand to add the specified {@code Event}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public VoteCommand(Index pollIndex, String optionName) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        requireNonNull(pollIndex, optionName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        this.pollIndex \u003d pollIndex;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        this.optionName \u003d optionName;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            Poll poll \u003d model.voteOption(pollIndex, optionName);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            model.commitAddressBook();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            String result \u003d String.format(MESSAGE_SUCCESS, optionName, pollIndex.getOneBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            String pollDisplayResult \u003d poll.displayPoll();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            EventsCenter.getInstance().post(new DisplayPollEvent(pollDisplayResult));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            return new CommandResult(result);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NO_POLL_AT_INDEX);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NO_SUCH_OPTION);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        } catch (DuplicatePersonException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_HAVE_ALREADY_VOTED);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        } catch (NoUserLoggedInException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NO_USER_LOGGED_IN);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        } catch (NoEventSelectedException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NO_EVENT_SELECTED);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        } catch (UserNotJoinedEventException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_HAVE_NOT_JOINED);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                || (other instanceof VoteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                \u0026\u0026 pollIndex.equals(((VoteCommand) other).pollIndex)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                \u0026\u0026 optionName.equals(((VoteCommand) other).optionName));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theJrLinguist": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/exceptions/NoUserLoggedInException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "//@@author theJrLinguist"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "package seedu.address.logic.commands.exceptions;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": " * Represents an error when there is no user logged-in."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "public class NoUserLoggedInException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theJrLinguist": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/personcommands/AddFriendCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "package seedu.address.logic.commands.personcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agendazhang"
        },
        "content": " * Given two persons, add friends for each other using two displayed indexes from the address book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "agendazhang"
        },
        "content": " * Friendships must be bilateral, for example person A and B must be friends with each other."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agendazhang"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agendazhang"
        },
        "content": " * @author agendazhang"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "agendazhang"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "public class AddFriendCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addFriend\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            + \": For two persons identified by the index number used in the displayed person list, \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            + \"add friend for each other.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            + \"Parameters: INDEX,INDEX (both must be a positive integer and different from each other)\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1,2\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public static final String MESSAGE_ADD_FRIEND_SUCCESS \u003d \"Friends added: %1$s, %2$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    private final Index indexes;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public AddFriendCommand(Index indexes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        this.indexes \u003d indexes;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        if (indexes.getZeroBased() \u003e\u003d lastShownList.size()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                || indexes.getZeroBased2() \u003e\u003d lastShownList.size()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                || indexes.getZeroBased() \u003d\u003d indexes.getZeroBased2()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        Person person1 \u003d lastShownList.get(indexes.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        Person person2 \u003d lastShownList.get(indexes.getZeroBased2());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        Person newPerson1 \u003d new Person(person1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        Person newPerson2 \u003d new Person(person2);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        ArrayList\u003cPerson\u003e friendList1 \u003d newPerson1.getFriends();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        ArrayList\u003cPerson\u003e friendList2 \u003d newPerson2.getFriends();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        friendList1.add(person2);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        friendList2.add(person1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        model.updatePerson(person1, newPerson1, person2, newPerson2);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ADD_FRIEND_SUCCESS, person1.getName(),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                person2.getName()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        return COMMAND_WORD + \" \" + indexes.getZeroBased() + StringUtil.COMMA + indexes.getZeroBased2();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                || (other instanceof AddFriendCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                \u0026\u0026 indexes.equals(((AddFriendCommand) other).indexes)); // state check;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agendazhang": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/personcommands/AddUserCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.personcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INTEREST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMETABLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "public class AddUserCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addUser\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the event organiser. \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            + PREFIX_TIMETABLE + \"TIMETABLE \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            + \"[\" + PREFIX_INTEREST + \"INTEREST] \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            + PREFIX_TIMETABLE + \"http://modsn.us/H4v8s \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            + PREFIX_INTEREST + \"study \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            + PREFIX_INTEREST + \"play \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the event organiser\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * Creates an AddUserCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public AddUserCommand(Person person) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        return toAdd.toString();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                || (other instanceof AddUserCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddUserCommand) other).toAdd));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agendazhang": 18,
      "-": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/personcommands/ClearUserCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.personcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "public class ClearUserCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clearUser\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        model.resetData(new AddressBook());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agendazhang": 2,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/personcommands/DeleteUserCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.personcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "public class DeleteUserCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteUser\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public DeleteUserCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                || (other instanceof DeleteUserCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteUserCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agendazhang": 5,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/personcommands/EditUserCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.personcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INTEREST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMETABLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.model.interest.Interest;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import seedu.address.model.person.Schedule;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "public class EditUserCommand extends Command {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editUser\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        + \"[\" + PREFIX_TIMETABLE + \"TIMETABLE] \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        + \"[\" + PREFIX_INTEREST + \"INTEREST] \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        + PREFIX_EMAIL + \"johndoe@example.com \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        + PREFIX_TIMETABLE + \"http://modsn.us/H4v8s\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index                of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public EditUserCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        //personToEdit.editPerson(editedPerson);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        Set\u003cInterest\u003e updatedInterests \u003d editPersonDescriptor.getInterests().orElse(personToEdit.getInterests());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        Schedule updatedSchedule \u003d editPersonDescriptor.getSchedule().orElse(personToEdit.getSchedule());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        editPersonDescriptor.getUpdateSchedule().ifPresent((x)-\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            updatedSchedule.xor(x);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        });"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedInterests, updatedTags,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                updatedSchedule);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        return editPersonDescriptor.toString();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        if (!(other instanceof EditUserCommand)) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        EditUserCommand e \u003d (EditUserCommand) other;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        private Schedule schedule;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        private Set\u003cInterest\u003e interests;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        private Schedule updateSchedule;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        public EditPersonDescriptor() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            setInterests(toCopy.interests);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            setSchedule(toCopy.schedule);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            setUpdateSchedule(toCopy.updateSchedule);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags, schedule, updateSchedule);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        public void setSchedule(Schedule schedule) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            this.schedule \u003d schedule;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        public void setUpdateSchedule(Schedule schedule) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            this.updateSchedule \u003d schedule;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        public Optional\u003cSchedule\u003e getUpdateSchedule() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            return Optional.ofNullable(this.updateSchedule);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        public Optional\u003cSchedule\u003e getSchedule() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            return Optional.ofNullable(schedule);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "         * Sets {@code interests} to this object\u0027s {@code interests}."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "         * A defensive copy of {@code interests} is used internally."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        public void setInterests(Set\u003cInterest\u003e interests) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            this.interests \u003d (interests !\u003d null) ? new HashSet\u003c\u003e(interests) : null;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "         * Returns an unmodifiable interest set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code interests} is null."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        public Optional\u003cSet\u003cInterest\u003e\u003e getInterests() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            return (interests !\u003d null) ? Optional.of(Collections.unmodifiableSet(interests)) : Optional.empty();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                \u0026\u0026 getInterests().equals(e.getInterests())"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "adjscent": 32,
      "agendazhang": 33,
      "-": 226
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/personcommands/FindByPhoneCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "package seedu.address.logic.commands.personcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import seedu.address.model.person.PhoneContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yao-feng"
        },
        "content": " * Finds and lists all persons in address book whose phone number matches the given number."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yao-feng"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "public class FindByPhoneCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findbyphone\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"fbp\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose phone number matches \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "            + \"the given number and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "            + \"Parameters: PHONE_NUMBER \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 98765432 \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    private final PhoneContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    public FindByPhoneCommand(PhoneContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "                || (other instanceof FindByPhoneCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindByPhoneCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yao-feng": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/personcommands/FindUserCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.personcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "public class FindUserCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findUser\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public FindUserCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                || (other instanceof FindUserCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindUserCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agendazhang": 5,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/personcommands/ListUserCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.personcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "public class ListUserCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listUser\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agendazhang": 2,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/personcommands/SelectUserCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.personcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Selects a person identified using its displayed index from the address book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "public class SelectUserCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"selectUser\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Selects the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Person: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public SelectUserCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e filteredPersonList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredPersonList.size()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        //to be changed to login feature"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getPerson(targetIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setCurrentUser(person);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                || (other instanceof SelectUserCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((SelectUserCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agendazhang": 5,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddFriendCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.logic.commands.personcommands.AddFriendCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "agendazhang"
        },
        "content": " * Parses input arguments and creates a new AddFriendCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "agendazhang"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "agendazhang"
        },
        "content": " * @author agendazhang"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "agendazhang"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "public class AddFriendCommandParser implements Parser\u003cAddFriendCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteUserCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * and returns an DeleteUserCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public AddFriendCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            Index indexes \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            return new AddFriendCommand(indexes);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddFriendCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agendazhang": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddUserCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INTEREST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMETABLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.TimeTableUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.personcommands.AddUserCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.model.interest.Interest;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Schedule;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.TimeTable;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "agendazhang"
        },
        "content": " * Parses input arguments and creates a new AddUserCommand object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "public class AddUserCommandParser implements Parser\u003cAddUserCommand\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddUserCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * and returns an AddUserCommand object for execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public AddUserCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                        PREFIX_INTEREST, PREFIX_TAG, PREFIX_TIMETABLE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddUserCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        Set\u003cInterest\u003e interestList \u003d ParserUtil.parseInterests(argMultimap.getAllValues(PREFIX_INTEREST));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Schedule schedule \u003d null;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TIMETABLE).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            String link \u003d argMultimap.getValue(PREFIX_TIMETABLE).get();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                TimeTable tt \u003d TimeTableUtil.parseUrl(link);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                schedule \u003d ParserUtil.parseSchedule(tt.convertToSchedule().valueToString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            schedule \u003d new Schedule();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        Person person \u003d new Person(name, phone, email, address, interestList, tagList, schedule);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        return new AddUserCommand(person);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agendazhang": 13,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import seedu.address.logic.commands.LoginCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.MaxScheduleCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.eventcommands.AddEventCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.eventcommands.AddPollCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.eventcommands.AddPollOptionCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.eventcommands.DeleteEventCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.eventcommands.DisplayPollCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.eventcommands.FindEventByTimeCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.eventcommands.FindEventCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.eventcommands.JoinEventCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.eventcommands.SelectEventCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.eventcommands.SetDateCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.eventcommands.SetTimeCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.eventcommands.VoteCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.logic.commands.personcommands.AddFriendCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.personcommands.AddUserCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.logic.commands.personcommands.ClearUserCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.logic.commands.personcommands.DeleteUserCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.logic.commands.personcommands.EditUserCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import seedu.address.logic.commands.personcommands.FindByPhoneCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.logic.commands.personcommands.FindUserCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.logic.commands.personcommands.ListUserCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.logic.commands.personcommands.SelectUserCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.eventparsers.AddEventCommandParser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.eventparsers.AddPollCommandParser;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.eventparsers.AddPollOptionCommandParser;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.eventparsers.DeleteEventCommandParser;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.eventparsers.DisplayPollCommandParser;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.eventparsers.FindEventByTimeCommandParser;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.eventparsers.FindEventCommandParser;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.eventparsers.JoinEventCommandParser;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.eventparsers.SelectEventCommandParser;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.eventparsers.SetDateCommandParser;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.eventparsers.SetTimeCommandParser;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.eventparsers.VoteCommandParser;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        case LoginCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        case LoginCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "            return new LoginCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddEventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        case AddUserCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            return new AddUserCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        case AddFriendCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            return new AddFriendCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteEventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectEventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        case SetDateCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SetDateCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        case SetTimeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SetTimeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        case JoinEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            return new JoinEventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddPollCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddPollCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddPollOptionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddPollOptionCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        case DisplayPollCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DisplayPollCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        case VoteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            return new VoteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindEventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindEventByTimeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindEventByTimeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        case EditUserCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            return new EditUserCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        case SelectUserCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            return new SelectUserCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        case DeleteUserCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            return new DeleteUserCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        case ClearUserCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            return new ClearUserCommand();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        case FindUserCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            return new FindUserCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        case FindByPhoneCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        case FindByPhoneCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "            return new FindByPhoneCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        case ListUserCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            return new ListUserCommand();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        case MaxScheduleCommand"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            .COMMAND_WORD:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            return new MaxScheduleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yao-feng": 9,
      "agendazhang": 23,
      "-": 138
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public static final Prefix PREFIX_INTEREST \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EVENT_NAME \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TIME_START \u003d new Prefix(\"t1/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TIME_END \u003d new Prefix(\"t2/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    public static final Prefix PREFIX_TIMETABLE \u003d new Prefix(\"tt/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    public static final Prefix PREFIX_SCHEDULE_UPDATE \u003d new Prefix(\"su/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    public static final Prefix PREFIX_SCHEDULE \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_INDEX \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_POLL_OPTION \u003d new Prefix(\"o/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PARTICIPANT_NAME \u003d new Prefix(\"pn/\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ORGANISER_NAME \u003d new Prefix(\"on/\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "adjscent": 3,
      "agendazhang": 1,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteUserCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.logic.commands.personcommands.DeleteUserCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "agendazhang"
        },
        "content": " * Parses input arguments and creates a new DeleteUserCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "public class DeleteUserCommandParser implements Parser\u003cDeleteUserCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteUserCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * and returns an DeleteUserCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public DeleteUserCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            return new DeleteUserCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteUserCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agendazhang": 8,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditUserCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INTEREST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SCHEDULE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SCHEDULE_UPDATE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMETABLE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import seedu.address.commons.util.TimeTableUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.logic.commands.personcommands.EditUserCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.logic.commands.personcommands.EditUserCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.model.interest.Interest;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import seedu.address.model.person.Schedule;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import seedu.address.model.person.TimeTable;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "agendazhang"
        },
        "content": " * Parses input arguments and creates a new EditUserCommand object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "public class EditUserCommandParser implements Parser\u003cEditUserCommand\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditUserCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * and returns an EditUserCommand object for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * @throws ParseException should the user input does not conform the expected format"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public EditUserCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "adjscent"
        },
        "content": "                PREFIX_ADDRESS, PREFIX_INTEREST, PREFIX_TAG, PREFIX_TIMETABLE, PREFIX_SCHEDULE_UPDATE, PREFIX_SCHEDULE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditUserCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TIMETABLE).isPresent()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            String link \u003d argMultimap.getValue(PREFIX_TIMETABLE).get();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            TimeTable tt \u003d TimeTableUtil.parseUrl(link);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            editPersonDescriptor.setSchedule(ParserUtil.parseSchedule(tt.convertToSchedule().valueToString()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        if (argMultimap.getValue(PREFIX_SCHEDULE).isPresent()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            String scheduleString \u003d argMultimap.getValue(PREFIX_SCHEDULE).get();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            editPersonDescriptor.setSchedule(ParserUtil.parseSchedule(scheduleString));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        if (argMultimap.getValue(PREFIX_SCHEDULE_UPDATE).isPresent()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            String link \u003d argMultimap.getValue(PREFIX_SCHEDULE_UPDATE).get();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            Schedule s \u003d new Schedule();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            String[] parms \u003d link.split(\" \");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            s.setTimeDay(parms[0].trim(), parms[1].trim(), true);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            editPersonDescriptor.setUpdateSchedule(s);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        // This one is for schedule to schedule"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        //editPersonDescriptor.setSchedule(ParserUtil.parseSchedule(argMultimap.getValue(PREFIX_TIMETABLE).get()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        parseInterestsForEdit(argMultimap.getAllValues(PREFIX_INTEREST)).ifPresent(editPersonDescriptor::setInterests);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            throw new ParseException(EditUserCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        return new EditUserCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e interests} into a {@code Set\u003cInterests\u003e} if {@code interests} is non-empty."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * If {@code interests} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * {@code Set\u003cInterests\u003e} containing zero interests."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    private Optional\u003cSet\u003cInterest\u003e\u003e parseInterestsForEdit(Collection\u003cString\u003e interests) throws ParseException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assert interests !\u003d null;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        if (interests.isEmpty()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        Collection\u003cString\u003e interestSet \u003d interests.size() \u003d\u003d 1"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                \u0026\u0026 interests.contains(\"\") ? Collections.emptySet() : interests;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        return Optional.of(ParserUtil.parseInterests(interestSet));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "adjscent": 30,
      "agendazhang": 32,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindByPhoneCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import seedu.address.logic.commands.personcommands.FindByPhoneCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import seedu.address.model.person.PhoneContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "agendazhang"
        },
        "content": " * Parses input arguments and creates a new FindUserCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yao-feng"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "public class FindByPhoneCommandParser implements Parser\u003cFindByPhoneCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "     * Parses the given {@code Phone number} in the context of the FindByPhoneCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "     * and returns an FindByPhoneCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    public FindByPhoneCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindByPhoneCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        String[] phoneKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        return new FindByPhoneCommand(new PhoneContainsKeywordsPredicate(Arrays.asList(phoneKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yao-feng": 32,
      "agendazhang": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindUserCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.logic.commands.personcommands.FindUserCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "agendazhang"
        },
        "content": " * Parses input arguments and creates a new FindUserCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "public class FindUserCommandParser implements Parser\u003cFindUserCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindUserCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * and returns an FindUserCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public FindUserCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindUserCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        return new FindUserCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agendazhang": 8,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/LoginCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INTEREST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import seedu.address.logic.commands.LoginCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.model.interest.Interest;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yao-feng"
        },
        "content": " * Parses input arguments and creates a new LoginCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "public class LoginCommandParser implements Parser\u003cLoginCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the LoginCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "     * and returns an LoginCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    public LoginCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                        PREFIX_ADDRESS, PREFIX_INTEREST, PREFIX_TAG);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, LoginCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        Set\u003cInterest\u003e interestList \u003d ParserUtil.parseInterests(argMultimap.getAllValues(PREFIX_INTEREST));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        Person person \u003d new Person(name, phone, email, address, interestList, tagList);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        return new LoginCommand(person);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yao-feng": 9,
      "agendazhang": 6,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.model.interest.Interest;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import seedu.address.model.person.Schedule;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        if (trimmedIndex.contains(StringUtil.COMMA)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            ArrayList\u003cInteger\u003e indexes \u003d StringUtil.splitIntegersWithComma(trimmedIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            return Index.fromOneBased(indexes.get(0), indexes.get(1));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String date} into an {@code Date}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code date} is invalid."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public static LocalDate parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            LocalDate newDate \u003d LocalDate.parse(trimmedDate, DateTimeFormatter.ofPattern(\"dd-MM-yyyy\"));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            return newDate;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_WRONG_DATE_FORMAT);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String date} into an {@code Date}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code date} is invalid."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public static LocalTime parseTime(String time) throws ParseException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTime \u003d time.trim();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            LocalTime newTime \u003d LocalTime.parse(trimmedTime, DateTimeFormatter.ofPattern(\"HH:mm\"));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return newTime;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_WRONG_TIME_FORMAT);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * Parses a {@code String interest} into a {@code Interest}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * @throws ParseException if the given {@code interest} is invalid."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public static Interest parseInterest(String interest) throws ParseException {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        requireNonNull(interest);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        String trimmedInterest \u003d interest.trim();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        if (!Interest.isValidInterestName(trimmedInterest)) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            throw new ParseException(Interest.MESSAGE_INTEREST_CONSTRAINTS);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        return new Interest(trimmedInterest);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * Parses a {@code String schedule} into a {@code Schedule}."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * @param schedule"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    public static Schedule parseSchedule(String schedule) throws ParseException {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        requireNonNull(schedule);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        String trimmedSchedule \u003d schedule.trim();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        if (!Schedule.isValidSchedule(trimmedSchedule)) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            throw new ParseException(Schedule.MESSAGE_SCHEDULE_CONSTRAINTS);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        return new Schedule(schedule);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e interests} into a {@code Set\u003cInterest\u003e}."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public static Set\u003cInterest\u003e parseInterests(Collection\u003cString\u003e interests) throws ParseException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        requireNonNull(interests);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        final Set\u003cInterest\u003e interestSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        for (String interestName : interests) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            interestSet.add(parseInterest(interestName));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        return interestSet;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "adjscent": 21,
      "agendazhang": 32,
      "-": 164
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SelectUserCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.logic.commands.personcommands.SelectUserCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "agendazhang"
        },
        "content": " * Parses input arguments and creates a new SelectUserCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "public class SelectUserCommandParser implements Parser\u003cSelectUserCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SelectUserCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * and returns an SelectUserCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public SelectUserCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            return new SelectUserCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectUserCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agendazhang": 8,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/eventparsers/AddPollCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "//@@author theJrLinguist"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "package seedu.address.logic.parser.eventparsers;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.commands.eventcommands.AddPollCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": " * Parses inputs arguments and creates a new AddPollCommand object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "public class AddPollCommandParser implements Parser\u003cAddPollCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddPollCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * and returns an AddPollCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public AddPollCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_NAME).isPresent()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPollCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        String pollName \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()).toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        return new AddPollCommand(pollName);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theJrLinguist": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/eventparsers/AddPollOptionCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "//@@author theJrLinguist"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "package seedu.address.logic.parser.eventparsers;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_POLL_OPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.commands.eventcommands.AddPollOptionCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": " * Parses inputs arguments and creates a new AddPollOptionCommand object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "public class AddPollOptionCommandParser implements Parser\u003cAddPollOptionCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddPollOptionCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * and returns an AddPollOptionCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public AddPollOptionCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_INDEX, PREFIX_POLL_OPTION);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_INDEX).isPresent() || !argMultimap.getValue(PREFIX_POLL_OPTION).isPresent()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPollOptionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Index index \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_INDEX).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        String name \u003d argMultimap.getValue(PREFIX_POLL_OPTION).get();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        return new AddPollOptionCommand(index, name);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theJrLinguist": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/eventparsers/DeleteEventCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "//@@author theJrLinguist"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "package seedu.address.logic.parser.eventparsers;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.commands.eventcommands.DeleteEventCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": " * Parses input arguments and creates a new DeleteEventCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "public class DeleteEventCommandParser implements Parser\u003cDeleteEventCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteUserCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * and returns an DeleteUserCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public DeleteEventCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            return new DeleteEventCommand(index);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteEventCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theJrLinguist": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/eventparsers/DisplayPollCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "//@@author theJrLinguist"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "package seedu.address.logic.parser.eventparsers;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.commands.eventcommands.DisplayPollCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": " * Parses inputs arguments and creates a new DisplayPollCommand object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "public class DisplayPollCommandParser implements Parser\u003cDisplayPollCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * and returns an DeleteUserCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public DisplayPollCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            return new DisplayPollCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DisplayPollCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theJrLinguist": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/eventparsers/FindEventCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "//@@theJrLinguist"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser.eventparsers;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ORGANISER_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PARTICIPANT_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME_START;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.eventcommands.FindEventCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.event.EventAttributesPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindEventCommandParser implements Parser\u003cFindEventCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditUserCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * and returns an EditUserCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindEventCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_EVENT_NAME, PREFIX_ADDRESS, PREFIX_TAG,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                        PREFIX_DATE, PREFIX_TIME_START, PREFIX_ORGANISER_NAME, PREFIX_PARTICIPANT_NAME);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        EventAttributesPredicate predicate \u003d new EventAttributesPredicate();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EVENT_NAME).isPresent()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            predicate.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_EVENT_NAME).get()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            predicate.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TIME_START).isPresent()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            predicate.setStartTime(ParserUtil.parseTime(argMultimap.getValue(PREFIX_TIME_START).get()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            predicate.setDate(ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ORGANISER_NAME).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            predicate.setParticipant(ParserUtil.parseName(argMultimap.getValue(PREFIX_ORGANISER_NAME).get()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PARTICIPANT_NAME).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            predicate.setParticipant(ParserUtil.parseName(argMultimap.getValue(PREFIX_PARTICIPANT_NAME).get()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindEventCommand(predicate);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agendazhang": 2,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/eventparsers/JoinEventCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "//@@author theJrLinguist"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "package seedu.address.logic.parser.eventparsers;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.commands.eventcommands.JoinEventCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": " * Parses input arguments and returns a new JoinEventCommand."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "public class JoinEventCommandParser implements Parser\u003cJoinEventCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the JoinEventCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * and returns an JoinEventCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public JoinEventCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            return new JoinEventCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, JoinEventCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theJrLinguist": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/eventparsers/SelectEventCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "//@@author theJrLinguist"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "package seedu.address.logic.parser.eventparsers;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.commands.eventcommands.SelectEventCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": " * Parses input arguments and creates a new SelectUserCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "public class SelectEventCommandParser implements Parser\u003cSelectEventCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SelectUserCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * and returns an SelectUserCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public SelectEventCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            return new SelectEventCommand(index);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectEventCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theJrLinguist": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/eventparsers/SetDateCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "//@@author theJrLinguist"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "package seedu.address.logic.parser.eventparsers;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.commands.eventcommands.SetDateCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": " * Parses inputs arguments and creates a new SetDateCommand object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "public class SetDateCommandParser implements Parser\u003cSetDateCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SetDateCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * and returns an SetDateCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public SetDateCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DATE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_DATE).isPresent()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SetDateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        LocalDate date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        return new SetDateCommand(date);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theJrLinguist": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/eventparsers/SetTimeCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "//@@author theJrLinguist"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "package seedu.address.logic.parser.eventparsers;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME_END;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME_START;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.commands.eventcommands.SetTimeCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": " * Parses inputs arguments and creates a new SetTimeCommand object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "public class SetTimeCommandParser implements Parser\u003cSetTimeCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SetDateCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * and returns an SetDateCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public SetTimeCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TIME_START, PREFIX_TIME_END);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_TIME_START).isPresent()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                || !argMultimap.getValue(PREFIX_TIME_END).isPresent() || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SetTimeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        LocalTime startTime \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_TIME_START).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        LocalTime endTime \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_TIME_END).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        return new SetTimeCommand(startTime, endTime);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theJrLinguist": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/eventparsers/VoteCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "//@@author theJrLinguist"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "package seedu.address.logic.parser.eventparsers;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_POLL_OPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.commands.eventcommands.VoteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": " * Parses input arguments and returns a vote command object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "public class VoteCommandParser implements Parser\u003cVoteCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * and returns an VoteCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public VoteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_INDEX, PREFIX_POLL_OPTION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_INDEX).isPresent() || !argMultimap.getValue(PREFIX_POLL_OPTION).isPresent()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, VoteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Index index \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_INDEX).get());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        String name \u003d argMultimap.getValue(PREFIX_POLL_OPTION).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        return new VoteCommand(index, name);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theJrLinguist": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.event.UniqueEventList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniqueEventList events;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        events \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setEvents(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.events.setEvents(events);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        setEvents(newData.getEventList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "     * Returns true if a event with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return events.contains(event);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * Replaces 2 given persons {@code target1}, {@code target2} with {@code editedPerson1}, {@code editedPerson2}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * {@code target1} and {@code target2} must exist in the address book."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * The persons identity of {@code editedPerson1} and {@code editedPerson2} must not be the same as"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * another existing person in the address book."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public void updatePerson(Person target1, Person editedPerson1, Person target2, Person editedPerson2) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        requireAllNonNull(editedPerson1, editedPerson2);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        persons.setPerson(target1, editedPerson1, target2, editedPerson2);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addEvent(Event p) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        events.add(p);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given event {@code target} in the list with {@code editedEvent}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * The identity of {@code editedEvent} must not be the same as another existing event in the address book."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateEvent(Event target, Event editedEvent) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedEvent);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        events.setEvent(target, editedEvent);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given event at the given {@code index} in the list with {@code editedEvent}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * The identity of {@code editedEvent} must not be the same as another existing event in the address book."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateEvent(int index, Event editedEvent) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedEvent);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        events.setEvent(index, editedEvent);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeEvent(Event key) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        events.remove(key);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cEvent\u003e getEventList() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        return events.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yao-feng": 2,
      "agendazhang": 13,
      "-": 175
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.NoEventSelectedException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import seedu.address.logic.commands.exceptions.NoUserLoggedInException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.event.Poll;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.event.exceptions.NotEventOrganiserException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.event.exceptions.UserNotJoinedEventException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cEvent\u003e PREDICATE_SHOW_ALL_EVENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Clears existing backing model and replaces with the provided new data. */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    void resetData(ReadOnlyAddressBook newData);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasEvent(Event event);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    void updatePerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * Replaces 2 given persons {@code target1}, {@code target2} with {@code editedPerson1}, {@code editedPerson2}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * {@code target1} and {@code target2} must exist in the address book."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * The persons identity of {@code editedPerson1} and {@code editedPerson2} must not be the same as"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * another existing person in the address book."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    void updatePerson(Person target1, Person editedPerson1, Person target2, Person editedPerson2);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateEvent(Event target, Event editedEvent);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateEvent(int index, Event event);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cEvent\u003e getFilteredEventList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered event list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredEventList(Predicate\u003cEvent\u003e predicate);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has previous address book states to restore."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canUndoAddressBook();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has undone address book states to restore."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canRedoAddressBook();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previous state."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    void undoAddressBook();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    void redoAddressBook();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current address book state for undo/redo."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    void commitAddressBook();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "     * adds an event to the address book."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "     * @param toAdd the event to be added."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    void addEvent(Event toAdd) throws NoUserLoggedInException;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "     * deletes an event from the address book."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "     * @param target the event to be deleted"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    void deleteEvent(Event target);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "     * Gets the event in the address book."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "     * @param targetIndex Index of the event."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    Event getEvent(Index targetIndex);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a poll to the pre-selected event with the given name."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param pollName the poll name."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NoEventSelectedException"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NoUserLoggedInException"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NotEventOrganiserException"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    Poll addPoll(String pollName) throws NoEventSelectedException, NoUserLoggedInException, NotEventOrganiserException;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a poll option to the poll at the given index of the pre-selected event."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index the index of the poll in the list of polls."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param optionName the name of the option."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NoEventSelectedException"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    Poll addPollOption(Index index, String optionName) throws NoEventSelectedException;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the current user as a voter for a given option."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param pollIndex the index of the poll in the list of polls."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param optionName the name of the option."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NoUserLoggedInException"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NoEventSelectedException"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws UserNotJoinedEventException"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    Poll voteOption(Index pollIndex, String optionName) throws NoUserLoggedInException, NoEventSelectedException,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            UserNotJoinedEventException;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "     * Sets the current user of the address book."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "     * @param currentUser"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    void setCurrentUser(Person currentUser);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "     * Gets the current user of the address book."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    Person getCurrentUser() throws NoUserLoggedInException;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "     * Gets the person in the address book"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "     * @param targetIndex Index of the person."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    Person getPerson(Index targetIndex);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the selected event."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    void setSelectedEvent(Event currentEvent);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets the selected event."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    Event getSelectedEvent() throws NoEventSelectedException;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yao-feng": 30,
      "agendazhang": 8,
      "-": 143
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.NoEventSelectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import seedu.address.logic.commands.exceptions.NoUserLoggedInException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.event.Poll;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.event.exceptions.NotEventOrganiserException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.event.exceptions.UserNotJoinedEventException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager extends ComponentManager implements Model {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final VersionedAddressBook versionedAddressBook;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cEvent\u003e filteredEvents;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    private Person currentUser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Event currentEvent;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook \u003d new VersionedAddressBook(addressBook);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(versionedAddressBook.getPersonList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredEvents \u003d new FilteredList\u003c\u003e(versionedAddressBook.getEventList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        currentUser \u003d null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    public void setCurrentUser(Person currentUser) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        this.currentUser \u003d currentUser;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    public boolean hasSetCurrentUser() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        return (currentUser !\u003d null);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    public Person getCurrentUser() throws NoUserLoggedInException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        if (currentUser \u003d\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "            throw new NoUserLoggedInException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        return currentUser;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setSelectedEvent(Event currentEvent) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.currentEvent \u003d currentEvent;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public Event getSelectedEvent() throws NoEventSelectedException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (currentEvent \u003d\u003d null) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoEventSelectedException();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return currentEvent;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.resetData(newData);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Raises an event to indicate the model has changed */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void indicateAddressBookChanged() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new AddressBookChangedEvent(versionedAddressBook));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.hasPerson(person);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        if (target.equals(currentUser)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            currentUser \u003d null;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.removePerson(target);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.addPerson(person);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@theJrLinguist"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.updatePerson(target, editedPerson);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Event event : filteredEvents) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean changed \u003d event.updatePerson(target, editedPerson);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            if (changed) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                versionedAddressBook.updateEvent(event, event);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public void updatePerson(Person target1, Person editedPerson1, Person target2, Person editedPerson2) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        requireAllNonNull(target1, editedPerson1, target2, editedPerson2);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        versionedAddressBook.updatePerson(target1, editedPerson1, target2, editedPerson2);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person getPerson(Index targetIndex) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dEvents \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addEvent(Event event) throws NoUserLoggedInException {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        if (currentUser \u003d\u003d null) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoUserLoggedInException();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        event.setOrganiser(currentUser);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        event.addPerson(currentUser);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.addEvent(event);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteEvent(Event target) throws NotEventOrganiserException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        if (target.equals(currentEvent)) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            currentEvent \u003d null;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.getOrganiser().equals(currentUser)) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NotEventOrganiserException();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.removeEvent(target);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * Check if an event already exists in a versionedAddressBook"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param event"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return true if versionAddressBook already has this event."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.hasEvent(event);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public Event getEvent(Index targetIndex) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredEvents.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public Poll addPoll(String pollName) throws NoUserLoggedInException, NoEventSelectedException,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            NotEventOrganiserException {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        if (currentUser \u003d\u003d null) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoUserLoggedInException();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        if (currentEvent \u003d\u003d null) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoEventSelectedException();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!currentUser.equals(currentEvent.getOrganiser())) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NotEventOrganiserException();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        Poll poll \u003d currentEvent.addPoll(pollName);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        updateEvent(currentEvent, currentEvent);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        return poll;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    public Poll addPollOption(Index index, String option) throws NoEventSelectedException {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        if (currentEvent \u003d\u003d null) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoEventSelectedException();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        Poll poll \u003d currentEvent.addOptionToPoll(index, option);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        updateEvent(currentEvent, currentEvent);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        return poll;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    public Poll voteOption(Index index, String optionName) throws NoEventSelectedException, NoUserLoggedInException,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            UserNotJoinedEventException {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        if (currentUser \u003d\u003d null) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoUserLoggedInException();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        if (currentEvent \u003d\u003d null) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoEventSelectedException();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        Poll poll \u003d currentEvent.addVoteToPoll(index, currentUser, optionName);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        updateEvent(currentEvent, currentEvent);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        return poll;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateEvent(Event target, Event editedPerson) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.updateEvent(target, editedPerson);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateEvent(int index, Event editedPerson) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, editedPerson);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.updateEvent(index, editedPerson);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredPersons);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cEvent\u003e getFilteredEventList() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredEvents);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredEventList(Predicate\u003cEvent\u003e predicate) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredEvents.setPredicate(predicate);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canUndo();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canRedo();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undoAddressBook() {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redoAddressBook() {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commitAddressBook() {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.equals(other.versionedAddressBook)"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons)"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredEvents.equals(other.filteredEvents);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yao-feng": 18,
      "agendazhang": 4,
      "-": 295
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/Event.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.event.exceptions.UserNotJoinedEventException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Event in the event organiser."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class Event {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address location;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private LocalTime startTime;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private LocalTime endTime;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Person organiser;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ArrayList\u003cPoll\u003e polls;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList personList;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Event(Name name, Address address, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(name, address, tags);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.location \u003d address;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        polls \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        personList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getLocation() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return location;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person getOrganiser() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return organiser;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setOrganiser(Person person) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        organiser \u003d person;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setDate(LocalDate date) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the date has been set."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isDateSet() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return (date !\u003d null);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the start and end times are set."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isTimeSet() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return (startTime !\u003d null \u0026\u0026 endTime !\u003d null);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the date as a string."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getDateString() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        if (date !\u003d null) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            DateTimeFormatter dateFormat \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            return date.format(dateFormat);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the start and end time as a string."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTimeString() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (startTime !\u003d null) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            DateTimeFormatter timeFormat \u003d DateTimeFormatter.ofPattern(\"HH:mm\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            result +\u003d startTime.format(timeFormat) + \" - \";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (endTime !\u003d null) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            DateTimeFormatter timeFormat \u003d DateTimeFormatter.ofPattern(\"HH:mm\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            result +\u003d endTime.format(timeFormat);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public LocalTime getStartTime() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return startTime;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the start and end time."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTime(LocalTime startTime, LocalTime endTime) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        if (endTime.isBefore(startTime)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public LocalTime getEndTime() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        return endTime;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a new person to the event."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            personList.add(person);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DuplicatePersonException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public UniquePersonList getPersonList() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        return personList;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the person list of the event."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersonList(UniquePersonList personList) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        this.personList.setPersons(personList);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds list of persons into the person list."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersonList(ArrayList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        this.personList.setPersons(personList);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the name list of the people attending as a string."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getNameList() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        return personList.getNameList();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a new poll to the event and returns the poll."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public Poll addPoll(String pollName) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        int id \u003d polls.size() + 1;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        Poll poll \u003d new Poll(id, pollName);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        polls.add(poll);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        return poll;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets a poll at the specified index"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    public Poll getPoll(Index index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            return polls.get(index.getZeroBased());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public ArrayList\u003cPoll\u003e getPolls() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        return polls;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds polls into the poll list."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPolls(ArrayList\u003cPoll\u003e polls) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Poll poll : polls) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            this.polls.add(poll);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds an option to the poll at the given index."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    public Poll addOptionToPoll(Index index, String option) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        Poll poll \u003d polls.get(index.getZeroBased());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        poll.addOption(option);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        return poll;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to an option of the poll at the specified index, only if person has joined the event."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    public Poll addVoteToPoll(Index pollIndex, Person person, String option)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            throws UserNotJoinedEventException, DuplicatePersonException {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personList.contains(person)) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new UserNotJoinedEventException();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d pollIndex.getZeroBased();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        Poll poll \u003d polls.get(index);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        poll.addVote(option, person);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        return poll;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays the poll at the given index."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    public String displayPoll(Index pollIndex) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        return polls.get(pollIndex.getZeroBased()).displayPoll();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the person in the event participant list, organiser, and polls."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean changed \u003d false;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        if (organiser.equals(target)) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "            setOrganiser(editedPerson);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            changed \u003d true;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        if (personList.contains(target)) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            personList.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "            changed \u003d true;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Poll poll : polls) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            poll.updatePerson(target, editedPerson);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        return changed;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the target person is the event organiser is or is an event participant."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean containsPerson(Name personName) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean contains \u003d false;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        if (organiser.getName().equals(personName)) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "            contains \u003d true;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : personList) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "            if (person.getName().equals(personName)) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "                contains \u003d true;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        return contains;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both events of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two events."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSameEvent(Event otherEvent) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherEvent \u003d\u003d this) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherEvent !\u003d null"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "                \u0026\u0026 otherEvent.getName().equals(getName());"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both events have the same identity and data fields."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two events."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Event)) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "        Event otherEvent \u003d (Event) other;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherEvent.getName().equals(getName())"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherEvent.getLocation().equals(getLocation())"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherEvent.getTags().equals(getTags())"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherEvent.getDate().equals(getDate())"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherEvent.getStartTime().equals(getStartTime())"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherEvent.getEndTime().equals(getEndTime())"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherEvent.getPersonList().equals(getPersonList())"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherEvent.getOrganiser().equals(getOrganiser())"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherEvent.getPolls().equals(getPolls());"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(name, location, tags);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getInfo() {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e pollList \u003d polls.stream()"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(p -\u003e p.getPollName())"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "        String personNameList \u003d personList.getNameList();"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(\"People attending: \" + \u0027\\n\u0027)"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(personNameList + \u0027\\n\u0027)"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\"Polls: \" + \u0027\\n\u0027);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "        Integer index \u003d 1;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String poll : pollList) {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(index.toString() + \": \" + poll + \u0027\\n\u0027);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "            index +\u003d 1;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Location: \")"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getLocation())"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yao-feng": 1,
      "-": 359
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/EventNameContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "//@@author theJrLinguist"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": " * Tests that a {@code Event}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "public class EventNameContainsKeywordsPredicate implements Predicate\u003cEvent\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public EventNameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public boolean test(Event event) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(event.getName().fullName, keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                || (other instanceof EventNameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                \u0026\u0026 keywords.equals(((EventNameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theJrLinguist": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/Poll.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "//@@author theJrLinguist"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": " * Represents a poll associated with an event."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "public class Poll {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private int id;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private String pollName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private HashMap\u003cString, UniquePersonList\u003e pollData;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * Creates a new Poll object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * @param pollName The name of the poll"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public Poll(int id, String pollName) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        this.pollName \u003d pollName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        pollData \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * Creates a new poll object with the poll data."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public Poll(int id, String pollName, HashMap\u003cString, UniquePersonList\u003e pollData) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        this.pollName \u003d pollName;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        this.pollData \u003d pollData;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public int getId() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public String getPollName() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        return pollName;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public HashMap\u003cString, UniquePersonList\u003e getPollData() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        return pollData;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * Add an option into the poll"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * @param option The string representing the option to be added"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void addOption(String option) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        UniquePersonList personList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        pollData.put(option, personList);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * Adds the vote of a user into an option"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void addVote(String option, Person person) throws IllegalArgumentException, DuplicatePersonException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        if (!pollData.containsKey(option)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        pollData.get(option).add(person);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * Updates the person in the poll votes."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        pollData.forEach((k, v) -\u003e v.setPerson(target, editedPerson));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * Retrieves most popular options by number of votes."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public LinkedList\u003cString\u003e getPopularOptions() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        TreeMap\u003cInteger, LinkedList\u003cString\u003e\u003e frequency \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        pollData.forEach((k, v) -\u003e {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            if (!frequency.containsKey(v.size())) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                LinkedList\u003cString\u003e options \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                options.add(k);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                frequency.put(v.size(), options);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                frequency.get(v.size()).add(k);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        });"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        return frequency.lastEntry().getValue();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * Returns a string representation of the poll"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public String displayPoll() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        String title \u003d String.format(\"Poll %1$s: %2$s\", Integer.toString(id), pollName);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        String mostPopularEntries \u003d \"\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        if (!pollData.isEmpty()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            mostPopularEntries \u003d \"Most popular options:\\n\" + getPopularOptions().toString();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        String data \u003d displayPollData();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        return title + \"\\n\" + mostPopularEntries + \"\\n\\n\" + data;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * Returns the poll data as a string identifying people by their names."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public String displayPollData() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        HashMap\u003cString, List\u003cString\u003e\u003e displayData \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        pollData.forEach((k, v) -\u003e {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            List\u003cString\u003e nameList \u003d v.asUnmodifiableObservableList()"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                    .stream()"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                    .map(person -\u003e person.getName().toString())"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                    .collect(Collectors.toList());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            displayData.put(k, nameList);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        });"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        for (Map.Entry\u003cString, List\u003cString\u003e\u003e entry : displayData.entrySet()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            result +\u003d entry.getKey() + \":\\n\" + entry.getValue().toString() + \"\\n\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theJrLinguist": 128
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/exceptions/DuplicateEventException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "//@@author theJrLinguist"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "package seedu.address.model.event.exceptions;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": " * Signals that the operation will result in duplicate Events (Events are considered duplicates if they have the same"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "public class DuplicateEventException extends RuntimeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public DuplicateEventException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        super(\"Operation would result in duplicate events\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theJrLinguist": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/exceptions/EventNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "//@@author theJrLinguist"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "package seedu.address.model.event.exceptions;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": " * Signals that the operation is unable to find the specified event."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "public class EventNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "theJrLinguist": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/interest/Interest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "package seedu.address.model.interest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "agendazhang"
        },
        "content": " * Represents an Interest in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "agendazhang"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidInterestName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "agendazhang"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "agendazhang"
        },
        "content": " * @author agendazhang"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "agendazhang"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "agendazhang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "public class Interest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public static final String MESSAGE_INTEREST_CONSTRAINTS \u003d \"Interest names should be alphanumeric\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public static final String INTEREST_VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public static final String VALID_INTEREST_STUDY \u003d \"study\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public final String interestName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * Constructs a {@code Interest}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * @param interestName A valid Interest name."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public Interest(String interestName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        requireNonNull(interestName);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        checkArgument(isValidInterestName(interestName), MESSAGE_INTEREST_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        this.interestName \u003d interestName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public Interest() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        this.interestName \u003d VALID_INTEREST_STUDY;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * Returns true if a given string is a valid interest name."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public static boolean isValidInterestName(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        return test.matches(INTEREST_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                || (other instanceof Interest // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                \u0026\u0026 interestName.equals(((Interest) other).interestName)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        return interestName.hashCode();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        return \u0027[\u0027 + interestName + \u0027]\u0027;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agendazhang": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Lesson.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "adjscent"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "adjscent"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "adjscent"
        },
        "content": " * @author adjscent"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "adjscent"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "adjscent"
        },
        "content": "public class Lesson {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    private String classNo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    private String lessonType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    private String weekText;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    private String dayText;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    private String startTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    private String endTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    private int duration;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    public Lesson(String moduleCode, String classNo, String lessonType,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "adjscent"
        },
        "content": "                  String weekText, String dayText, String startTime, String endTime) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        this.classNo \u003d classNo;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        this.lessonType \u003d lessonType;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        this.weekText \u003d weekText;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        this.dayText \u003d dayText;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        this.duration \u003d Integer.parseInt(getEndTime().substring(0, 2))"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            - Integer.parseInt(getStartTime().substring(0, 2));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    public String getClassNo() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        return classNo;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    public String getLessonType() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        return lessonType;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    public String getWeekText() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        return weekText;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    public String getDayText() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        return dayText;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    public String getStartTime() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        return startTime;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    public String getEndTime() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        return endTime;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    public int getDuration() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        return duration;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        return String.format(\"%s %s %s %s %s %s %s\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            moduleCode, classNo, lessonType, weekText, dayText, startTime, endTime);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "adjscent"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "adjscent": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.model.interest.Interest;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Schedule schedule;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    private Set\u003cInterest\u003e interests \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    private Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    private ArrayList\u003cPerson\u003e friends \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address, Set\u003cInterest\u003e interests, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        requireAllNonNull(name, phone, email, address, interests, tags);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        this.interests.addAll(interests);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        this.schedule \u003d new Schedule();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address, Set\u003cInterest\u003e interests,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                  Set\u003cTag\u003e tags, Schedule schedule) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        requireAllNonNull(name, phone, email, address, interests, tags);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        this.interests.addAll(interests);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        this.schedule \u003d schedule;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address, Set\u003cInterest\u003e interests,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                  Set\u003cTag\u003e tags, Schedule schedule, ArrayList\u003cPerson\u003e friends) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        requireAllNonNull(name, phone, email, address, interests, tags);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        this.interests.addAll(interests);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        this.schedule \u003d schedule;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        this.friends \u003d friends;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * Make a duplicate of a person"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public Person(Person other) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        this.name \u003d other.getName();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        this.phone \u003d other.getPhone();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        this.email \u003d other.getEmail();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        this.address \u003d other.getAddress();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        this.interests \u003d other.getInterests();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        this.tags \u003d other.getTags();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        this.schedule \u003d other.getSchedule();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setName(Name name) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    public Schedule getSchedule() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        return schedule;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * Returns an immutable interest set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public Set\u003cInterest\u003e getInterests() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        return Collections.unmodifiableSet(interests);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * Returns an ArrayList of Person, which represent the friends of the current person."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public ArrayList\u003cPerson\u003e getFriends() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        return friends;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Populates all attributes with that of the new person."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void editPerson(Person newPerson) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d newPerson.name;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d newPerson.address;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d newPerson.phone;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d newPerson.tags;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d newPerson.email;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        interests \u003d newPerson.interests;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        schedule \u003d newPerson.schedule;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone()) || otherPerson.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * Represents the user\u0027s friends list as a string"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public String friendsToString() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        String friendshipString \u003d \" Friends: \";"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        ArrayList\u003cString\u003e friendsList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        for (Person friend : friends) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            friendsList.add(friend.getName().toString());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        friendshipString +\u003d friendsList;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        return friendshipString;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                \u0026\u0026 otherPerson.getInterests().equals(getInterests())"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Schedule: \")"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getSchedule().valueToString())"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                .append(\" Interests: \");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        getInterests().forEach(builder::append);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        builder.append(\" Tags: \");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        builder.append(friendsToString());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "adjscent": 16,
      "agendazhang": 70,
      "-": 139
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/PhoneContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yao-feng"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Phone number} matches the phone number given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yao-feng"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "public class PhoneContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    public PhoneContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getPhone().value, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "                || (other instanceof PhoneContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "                \u0026\u0026 keywords.equals(((PhoneContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yao-feng": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Schedule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "adjscent"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "adjscent"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "adjscent"
        },
        "content": " * @author adjscent"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "adjscent"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "adjscent"
        },
        "content": "public class Schedule {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * Example"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * 0 0 0 0 0 0 0 0 1 1 0 0 1 1 1 1 1 1 0 0 0 0 0 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * 0 0 0 0 0 0 0 0 1 1 1 0 0 1 1 1 0 0 0 0 0 0 0 0"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * 0 0 0 0 0 0 0 0 1 1 0 0 1 1 1 1 1 1 0 0 0 0 0 0"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * 0 0 0 0 0 0 0 0 1 1 1 0 0 1 1 1 0 0 0 0 0 0 0 0"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    public static final String MESSAGE_SCHEDULE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        \"Schedule should be in 0 or 1s and in correct length\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    public static final String INVALID_MESSAGE_SCHEDULE \u003d \"Invalid Schedule Input\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    private static final int DAY \u003d 7;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    private static final int HOUR \u003d 48;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    private static final int TOTAL \u003d DAY * HOUR;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    // 7 days 24 hours - 48 30mins"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    private final int[][] value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    public Schedule() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        value \u003d new int[DAY][HOUR];"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    public Schedule(String schedule) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        requireNonNull(schedule);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        value \u003d new int[DAY][HOUR];"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        for (int i \u003d 0, counter \u003d 0; i \u003c value.length; i++) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            for (int j \u003d 0; j \u003c value[i].length; j++) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "adjscent"
        },
        "content": "                value[i][j] \u003d Integer.parseInt(schedule.charAt(counter) + \"\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "adjscent"
        },
        "content": "                counter +\u003d 1;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    public static boolean isValidSchedule(String trimmedSchedule) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        return trimmedSchedule.length() \u003d\u003d TOTAL;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * @param day"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * @param time"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    public boolean getTimeDay(String day, String time) throws ParseException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        // day Monday"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        // time 0800"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        int dayNum \u003d -1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        dayNum \u003d getDayNum(day);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        int hourNum \u003d Integer.parseInt(time.substring(0, 2));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        int minNum \u003d Integer.parseInt(time.substring(2, 4));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        int timeNum \u003d hourNum * 2;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        if (minNum \u003e\u003d 30) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            return value[dayNum][timeNum + 1] \u003d\u003d 1 ? true : false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            return value[dayNum][timeNum] \u003d\u003d 1 ? true : false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * @param day"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * @param time"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * @param occupied"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    public void setTimeDay(String day, String time, boolean occupied) throws ParseException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        // day Monday"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        // time 0800"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        int dayNum \u003d -1;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        dayNum \u003d getDayNum(day);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        int timeNum \u003d -1;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        timeNum \u003d Integer.parseInt(time.substring(0, 2)) * 2;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        int minNum \u003d Integer.parseInt(time.substring(2, 4));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        if (minNum \u003e\u003d 30) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            value[dayNum][timeNum + 1] \u003d occupied ? 1 : 0;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            value[dayNum][timeNum] \u003d occupied ? 1 : 0;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    private int getDayNum(String day) throws ParseException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        int dayNum \u003d -1;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        switch (day.toLowerCase()) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        case \"monday\":"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            dayNum \u003d 0;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        case \"tuesday\":"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            dayNum \u003d 1;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        case \"wednesday\":"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            dayNum \u003d 2;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        case \"thursday\":"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            dayNum \u003d 3;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        case \"friday\":"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            dayNum \u003d 4;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        case \"saturday\":"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            dayNum \u003d 5;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        case \"sunday\":"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            dayNum \u003d 6;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            throw new ParseException(INVALID_MESSAGE_SCHEDULE);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        return dayNum;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    private String getNumDay(int dayNum) throws ParseException {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        String day;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        switch (dayNum) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        case 0:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            day \u003d \"monday\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            day \u003d \"tuesday\";"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            day \u003d \"wednesday\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            day \u003d \"thursday\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        case 4:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            day \u003d \"friday\";"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        case 5:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            day \u003d \"saturday\";"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        case 6:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            day \u003d \"sunday\";"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            throw new ParseException(INVALID_MESSAGE_SCHEDULE);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        return day;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * Allow schedule array to be stored as a string"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    public String valueToString() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        for (int i \u003d 0; i \u003c value.length; i++) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            for (int j \u003d 0; j \u003c value[i].length; j++) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "adjscent"
        },
        "content": "                sb.append(value[i][j]);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * Maxs all possible schedules supplied as parameter"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     *"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param schedules"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    public static Schedule maxSchedule(Schedule... schedules) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        Schedule newSchedule \u003d new Schedule();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        // using for each loop to display contents of a"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        for (Schedule s : schedules) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            newSchedule.union(s);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        return newSchedule;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * ORs the Schedules"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     *"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * @param schedule"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    private void union(Schedule schedule) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        for (int i \u003d 0; i \u003c value.length; i++) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            for (int j \u003d 0; j \u003c value[i].length; j++) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "adjscent"
        },
        "content": "                this.value[i][j] \u003d (this.value[i][j] | schedule.value[i][j]);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * Use the updateschedule as a bit flipper"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    public void xor(Schedule updateSchedule) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        for (int i \u003d 0; i \u003c value.length; i++) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            for (int j \u003d 0; j \u003c value[i].length; j++) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "adjscent"
        },
        "content": "                this.value[i][j] ^\u003d (updateSchedule.value[i][j]);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    public ArrayList\u003cSlot\u003e getFreeSlots() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        ArrayList\u003cSlot\u003e slots \u003d new ArrayList\u003cSlot\u003e();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        for (int i \u003d 0; i \u003c value.length; i++) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            for (int j \u003d 0; j \u003c value[i].length; j++) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "adjscent"
        },
        "content": "                if (this.value[i][j] \u003d\u003d 0) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "adjscent"
        },
        "content": "                    Slot slot \u003d new Slot();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "adjscent"
        },
        "content": "                        slot.setDay(getNumDay(i));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "                    } catch (ParseException e) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "                        e.printStackTrace();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "adjscent"
        },
        "content": "                    if (j / 2 \u003e 9) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "adjscent"
        },
        "content": "                        slot.setTime(\"\" + j / 2 + ((j % 2 \u003d\u003d 1) ? \"30\" : \"00\"));"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "adjscent"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "adjscent"
        },
        "content": "                        slot.setTime(\"0\" + j / 2 + ((j % 2 \u003d\u003d 1) ? \"30\" : \"00\"));"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "adjscent"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "adjscent"
        },
        "content": "                    slots.add(slot);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "adjscent"
        },
        "content": "                }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        return slots;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    public ArrayList\u003cSlot\u003e getFreeSlotsByDay(String day) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cSlot\u003e slots \u003d getFreeSlots();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        slots.removeIf(s -\u003e !s.getDay().equalsIgnoreCase(day));"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        return slots;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    public String freeTimeToString() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        getFreeSlots().forEach((slot) -\u003e sb.append(slot.getDay() + \",\" + slot.getTime() + \";\"));"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        return sb.toString().trim();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "     * Pretty printing into table format"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    public String prettyPrint() {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\u003ctr\u003e\");"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\u003cth\u003e\u003c/th\u003e\");"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(\"\u003cth\u003e\" + getNumDay(i).substring(0, 3) + \"\u003c/th\u003e\");"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\u003c/tr\u003e\");"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        int oddatinator \u003d 0;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        int hourcounter \u003d 0;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c value[0].length; i++) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "            sb.append(\"\u003ctr\u003e\");"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "            if (oddatinator % 2 \u003d\u003d 0) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(\"\u003ctd\u003e\" + String.format(\"%02d\", hourcounter) + \"00\u003c/td\u003e\");"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "                oddatinator++;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(\"\u003ctd\u003e\" + String.format(\"%02d\", hourcounter) + \"30\u003c/td\u003e\");"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "                hourcounter++;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "                oddatinator++;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d 0; j \u003c value.length; j++) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "                if (this.value[j][i] \u003d\u003d 1) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "                    sb.append(\"\u003ctd class\u003d\u0027table-danger\u0027\u003e \u003c/td\u003e\");"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "                    sb.append(\"\u003ctd\u003e \u003c/td\u003e\");"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "            sb.append(\"\u003c/tr\u003e\");"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "adjscent"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "adjscent": 262,
      "-": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Slot.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "adjscent"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "adjscent"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "adjscent"
        },
        "content": " * @author adjscent"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "adjscent"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "adjscent"
        },
        "content": "public class Slot {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    private String day;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    private String time;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    public String getDay() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        return day;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * @param day"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    public void setDay(String day) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * @param time"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    public void setTime(String time) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "adjscent"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "adjscent": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/TimeTable.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "adjscent"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "adjscent"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "adjscent"
        },
        "content": " * @author adjscent"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "adjscent"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "adjscent"
        },
        "content": "public class TimeTable {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * Example lessonlist"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * CS2102 1 Lecture Every Week Monday 0800 1000"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * CS2102 11 Tutorial Every Week Thursday 1600 1800"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * CS2103 1 Lecture Every Week Friday 1600 1800"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * CS2103 01 Tutorial Every Week Wednesday 1000 1100"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * CS2105 1 Lecture Every Week Monday 1400 1600"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * CS2105 16 Tutorial Every Week Friday 1300 1400"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * CS2106 09 Laboratory Every Week Friday 1000 1100"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * CS2106 1 Lecture Every Week Wednesday 1400 1600"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * CS2106 09 Tutorial Every Week Friday 0900 1000"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * MA1521 1 Lecture Every Week Tuesday 1400 1600"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * MA1521 1 Lecture Every Week Friday 1400 1600"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * MA1521 4 Tutorial 3,4,5,6,7,8,9,10,11,12,13 Monday 1500 1600"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * UCV2209 01 Seminar-Style Module Class Every Week Tuesday 1200 1400"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * UCV2209 01 Seminar-Style Module Class Every Week Thursday 1200 1400"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    private ArrayList\u003cLesson\u003e lessonList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * @param lessonList"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    public TimeTable(ArrayList\u003cLesson\u003e lessonList) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        requireNonNull(lessonList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        this.lessonList \u003d lessonList;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    public Schedule convertToSchedule() throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        Schedule schedule \u003d new Schedule();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        for (Lesson lesson : lessonList) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            int start \u003d Integer.parseInt(lesson.getStartTime().substring(0, 2));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            int duration \u003d lesson.getDuration();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            while (duration \u003e 0) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "adjscent"
        },
        "content": "                String startime1;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "adjscent"
        },
        "content": "                String startime2;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "adjscent"
        },
        "content": "                if (start \u003e 9) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "adjscent"
        },
        "content": "                    startime1 \u003d start + \"00\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "adjscent"
        },
        "content": "                    startime2 \u003d start + \"30\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "adjscent"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "adjscent"
        },
        "content": "                    startime1 \u003d \"0\" + start + \"00\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "adjscent"
        },
        "content": "                    startime2 \u003d \"0\" + start + \"30\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "adjscent"
        },
        "content": "                }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "adjscent"
        },
        "content": "                schedule.setTimeDay(lesson.getDayText(), startime1, true);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "adjscent"
        },
        "content": "                schedule.setTimeDay(lesson.getDayText(), startime2, true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "adjscent"
        },
        "content": "                start++;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "adjscent"
        },
        "content": "                duration--;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        return schedule;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    public ArrayList\u003cLesson\u003e getLessonList() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        return lessonList;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    public void setLessonList(ArrayList\u003cLesson\u003e lessonList) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        this.lessonList \u003d lessonList;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "adjscent"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "adjscent": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniquePersonList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Person toCheck) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * Replaces 2 given persons {@code target1}, {@code target2} with {@code editedPerson1}, {@code editedPerson2}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * {@code target1} and {@code target2} must exist in the address book."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * The persons identity of {@code editedPerson1} and {@code editedPerson2} must not be the same as"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * another existing person in the address book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public void setPerson(Person target1, Person editedPerson1, Person target2, Person editedPerson2) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        requireAllNonNull(target1, editedPerson1, target2, editedPerson2);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        int index1 \u003d internalList.indexOf(target1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        if (index1 \u003d\u003d -1) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        if (!target1.isSamePerson(editedPerson1) \u0026\u0026 contains(editedPerson1)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        internalList.set(index1, editedPerson1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        int index2 \u003d internalList.indexOf(target2);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        if (index2 \u003d\u003d -1) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        if (!target2.isSamePerson(editedPerson2) \u0026\u0026 contains(editedPerson2)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        internalList.set(index2, editedPerson2);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Person toRemove) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(UniquePersonList replacement) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean personsAreUnique(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the list of names of people who joined the event in a string."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getNameList() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e names \u003d internalList.stream()"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(p -\u003e p.getName().toString())"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        return names.toString();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.size();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agendazhang": 32,
      "-": 153
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.model.interest.Interest;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"), getInterestSet(\"study\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), getInterestSet(\"play\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), getInterestSet(\"study\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), getInterestSet(\"play\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"family\")),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"), getInterestSet(\"study\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"), getInterestSet(\"play\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * Returns a interest set containing the list of strings given."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public static Set\u003cInterest\u003e getInterestSet(String... strings) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                .map(Interest::new)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agendazhang": 16,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedInterest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import javax.xml.bind.annotation.XmlValue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.model.interest.Interest;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "agendazhang"
        },
        "content": " * JAXB-friendly adapted version of the Interest."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "agendazhang"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "agendazhang"
        },
        "content": " * @author agendazhang"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "agendazhang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "public class XmlAdaptedInterest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    @XmlValue"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    private String interestName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * Constructs an XmlAdaptedInterest."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public XmlAdaptedInterest() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * Constructs a {@code XmlAdaptedInterest} with the given {@code interestName}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public XmlAdaptedInterest(String interestName) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        this.interestName \u003d interestName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * Converts a given Interest into this class for JAXB use."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public XmlAdaptedInterest(Interest source) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        interestName \u003d source.interestName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * Converts this jaxb-friendly adapted interest object into the model\u0027s Interest object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public Interest toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        if (!Interest.isValidInterestName(interestName)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            throw new IllegalValueException(Interest.MESSAGE_INTEREST_CONSTRAINTS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        return new Interest(interestName);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        if (!(other instanceof XmlAdaptedInterest)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        return interestName.equals(((XmlAdaptedInterest) other).interestName);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agendazhang": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedPerson.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.model.interest.Interest;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import seedu.address.model.person.Schedule;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly version of the Person."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedPerson {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private String phone;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private String email;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private String address;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    private String schedule;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    private List\u003cXmlAdaptedInterest\u003e interests \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    private List\u003cXmlAdaptedPerson\u003e friends \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an XmlAdaptedPerson."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    public XmlAdaptedPerson() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code XmlAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public XmlAdaptedPerson(String name, String phone, String email, String address,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                            List\u003cXmlAdaptedInterest\u003e interests, List\u003cXmlAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        if (interests !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            this.interests \u003d new ArrayList\u003c\u003e(interests);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            Interest interest \u003d new Interest();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            this.interests.add(new XmlAdaptedInterest(interest));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given Person into this class for JAXB use."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedPerson"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        schedule \u003d source.getSchedule().valueToString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        interests \u003d source.getInterests().stream()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                .map(XmlAdaptedInterest::new)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged \u003d source.getTags().stream()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        final List\u003cInterest\u003e personInterests \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        final ArrayList\u003cPerson\u003e personFriends \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        for (XmlAdaptedInterest interest : interests) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            personInterests.add(interest.toModelType());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        for (XmlAdaptedPerson friend : friends) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            personFriends.add(friend.toModelType());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        final Schedule modelSchedule;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        if (schedule \u003d\u003d null) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            modelSchedule \u003d new Schedule();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            modelSchedule \u003d new Schedule(schedule);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        final Set\u003cInterest\u003e modelInterests;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        if (interests \u003d\u003d null) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            modelInterests \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            modelInterests.add(new Interest());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            modelInterests \u003d new HashSet\u003c\u003e(personInterests);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelInterests, modelTags, modelSchedule,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                personFriends);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public String getPhone() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public String getEmail() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public String getAddress() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public String getSchedule() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        return schedule;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public List\u003cXmlAdaptedInterest\u003e getInterests() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        return interests;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public List\u003cXmlAdaptedTag\u003e getTagged() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        return tagged;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public List\u003cXmlAdaptedPerson\u003e getFriends() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        return friends;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlAdaptedPerson)) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson otherPerson \u003d (XmlAdaptedPerson) other;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(name, otherPerson.name)"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 Objects.equals(phone, otherPerson.phone)"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 Objects.equals(email, otherPerson.email)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 Objects.equals(address, otherPerson.address)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            \u0026\u0026 interests.equals(otherPerson.interests)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            \u0026\u0026 tagged.equals(otherPerson.tagged)"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            \u0026\u0026 friends.equals(otherPerson.friends);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "adjscent": 13,
      "agendazhang": 67,
      "-": 136
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedPoll.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "//@@author theJrLinguist"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.event.Poll;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": " * JAXB-friendly version of the Poll."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "public class XmlAdaptedPoll {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Poll\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private String id;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @XmlElement(required \u003d false)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private List\u003cXmlAdaptedPollEntry\u003e options \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * Constructs an XmlAdaptedPerson."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public XmlAdaptedPoll() {}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * Constructs an {@code XmlAdaptedPoll} with the given poll details."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public XmlAdaptedPoll(String id, String name, List\u003cXmlAdaptedPollEntry\u003e options) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        if (options !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            this.options \u003d new ArrayList\u003c\u003e(options);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * Converts a given Poll into this class for JAXB use."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedPerson"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public XmlAdaptedPoll(Poll source) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        id \u003d Integer.toString(source.getId());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        name \u003d source.getPollName();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        options \u003d source.getPollData()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                .entrySet()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                .map(e -\u003e new XmlAdaptedPollEntry(e.getKey(), e.getValue()))"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * Converts this jaxb-friendly adapted event object into the model\u0027s Poll object."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted data"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public Poll toModelType(ObservableList\u003cPerson\u003e personList) throws IllegalValueException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        //need to check for illegal arguments"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        HashMap\u003cString, UniquePersonList\u003e pollData \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        for (XmlAdaptedPollEntry entry : options) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                pollData.put(entry.getOptionName(), entry.getPersonList(personList));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                throw e;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Poll poll \u003d new Poll(Integer.valueOf(id), name, pollData);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        return poll;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        if (!(other instanceof XmlAdaptedPoll)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        XmlAdaptedPoll otherPoll \u003d (XmlAdaptedPoll) other;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        return Objects.equals(name, otherPoll.name)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                \u0026\u0026 Objects.equals(id, otherPoll.id)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                \u0026\u0026 options.equals(otherPoll.options);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theJrLinguist": 98
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedPollEntry.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "//@@author theJrLinguist"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": " * JAXB-friendly version of a single poll entry."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "public class XmlAdaptedPollEntry {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Poll option\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private static ObservableList\u003cPerson\u003e personList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @XmlElement(required \u003d false)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private List\u003cXmlPersonIndex\u003e voterList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * Constructs an XmlAdaptedPollEntry."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public XmlAdaptedPollEntry() {}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * Constructs an {@code XmlAdaptedPollEntry} with the given poll entry details."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public XmlAdaptedPollEntry(String name, UniquePersonList voterList) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        if (voterList !\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            this.voterList \u003d voterList.asUnmodifiableObservableList()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                    .stream()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                    .map(person -\u003e String.valueOf(personList.indexOf(person)))"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                    .map(XmlPersonIndex::new)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                    .collect(Collectors.toList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * Provides reference to the person list of the event organiser."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public static void setPersonList(ObservableList\u003cPerson\u003e organiserPersonList) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        personList \u003d organiserPersonList;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public String getOptionName() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public UniquePersonList getPersonList(ObservableList\u003cPerson\u003e personList) throws IllegalValueException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        UniquePersonList persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        for (XmlPersonIndex personIndex : voterList) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                Person modelPerson \u003d personIndex.toModelType();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                persons.add(modelPerson);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                throw e;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        return persons;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        if (!(other instanceof XmlAdaptedPollEntry)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        XmlAdaptedPollEntry otherPollEntry \u003d (XmlAdaptedPollEntry) other;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        return Objects.equals(name, otherPollEntry.name)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                \u0026\u0026 voterList.equals(otherPollEntry.voterList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theJrLinguist": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlSerializableAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to XML format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@XmlRootElement(name \u003d \"addressbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlSerializableAddressBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedPerson\u003e persons;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedEvent\u003e events;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an empty XmlSerializableAddressBook."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * This empty constructor is required for marshalling."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlSerializableAddressBook() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        events \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Conversion"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlSerializableAddressBook(ReadOnlyAddressBook src) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.addAll(src.getPersonList().stream().map(XmlAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedEvent.setPersonList(src.getPersonList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        events.addAll(src.getEventList().stream().map(XmlAdaptedEvent::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this addressbook into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code XmlAdaptedPerson}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedPerson p : persons) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Person person \u003d p.toModelType();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            if (addressBook.hasPerson(person)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.addPerson(person);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedEvent.setPersonList(addressBook.getPersonList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedEvent p : events) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            Event event \u003d p.toModelType();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            if (addressBook.hasEvent(event)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.addEvent(event);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlSerializableAddressBook)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        return persons.equals(((XmlSerializableAddressBook) other).persons)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "                \u0026\u0026 events.equals(((XmlSerializableAddressBook) other).events);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yao-feng": 2,
      "-": 88
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PollDisplayPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "//@@author theJrLinguist"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.commons.events.ui.DisplayPollEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": " * Panel displaying the poll."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "public class PollDisplayPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ResultDisplay.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private static final String FXML \u003d \"PollDisplayPanel.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private final StringProperty displayed \u003d new SimpleStringProperty(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private TextArea pollDisplay;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public PollDisplayPanel() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        pollDisplay.textProperty().bind(displayed);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private void handleNewResultAvailableEvent(DisplayPollEvent event) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Platform.runLater(() -\u003e displayed.setValue(event.message));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theJrLinguist": 40
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "         minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "adjscent"
        },
        "content": "          \u003cVBox fx:id\u003d\"personList\" minWidth\u003d\"170\" prefWidth\u003d\"170\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "adjscent"
        },
        "content": "          \u003cVBox fx:id\u003d\"eventList\" minWidth\u003d\"170\" prefWidth\u003d\"170\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cStackPane fx:id\u003d\"eventListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cVBox fx:id\u003d\"pollDisplay\" minWidth\u003d\"170\" prefWidth\u003d\"170\" SplitPane.resizableWithParent\u003d\"false\" \u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cStackPane fx:id\u003d\"pollDisplayPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cStackPane fx:id\u003d\"browserPlaceholder\" prefWidth\u003d\"340\" \u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "adjscent": 2,
      "-": 80
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/duplicatePersonAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ealice@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e123, Jurong West Ave 6, #08-111\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        \u003cinterests\u003estudy\u003c/interests\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Person with same identity as Alice Pauline --\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003epauline@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        \u003cinterests\u003estudy\u003c/interests\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "agendazhang": 2,
      "-": 20
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/invalidPersonAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Person with invalid email field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@exam!32ple\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        \u003cinterests\u003estudy\u003c/interests\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "agendazhang": 1,
      "-": 10
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/typicalPersonsAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- AddressBook save file which contains the same Person values as in TypicalPersons#getTypicalAddressBook() --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ealice@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e123, Jurong West Ave 6, #08-111\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        \u003cinterests\u003estudy\u003c/interests\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eBenson Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e98765432\u003c/phone\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ejohnd@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e311, Clementi Ave 2, #02-25\u003c/address\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        \u003cinterests\u003estudy\u003c/interests\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003eowesMoney\u003c/tagged\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eCarl Kurz\u003c/name\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e95352563\u003c/phone\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003eheinz@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003ewall street\u003c/address\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        \u003cinterests\u003estudy\u003c/interests\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eDaniel Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e87652533\u003c/phone\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ecornelia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e10th street\u003c/address\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        \u003cinterests\u003estudy\u003c/interests\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eElle Meyer\u003c/name\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482224\u003c/phone\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ewerner@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003emichegan ave\u003c/address\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        \u003cinterests\u003estudy\u003c/interests\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eFiona Kunz\u003c/name\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482427\u003c/phone\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003elydia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003elittle tokyo\u003c/address\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        \u003cinterests\u003estudy\u003c/interests\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eGeorge Best\u003c/name\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482442\u003c/phone\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003eanna@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        \u003cinterests\u003estudy\u003c/interests\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "agendazhang": 7,
      "-": 50
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/invalidPersonField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- Person with an invalid phone field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cperson\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482asf424\u003c/phone\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    \u003cinterests\u003estudy\u003c/interests\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/person\u003e"
      }
    ],
    "authorContributionMap": {
      "agendazhang": 1,
      "-": 9
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/missingPersonField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- Person with missing name field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cperson\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    \u003cinterests\u003estudy\u003c/interests\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/person\u003e"
      }
    ],
    "authorContributionMap": {
      "agendazhang": 1,
      "-": 8
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validPerson.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cperson\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    \u003cinterests\u003estudy\u003c/interests\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/person\u003e"
      }
    ],
    "authorContributionMap": {
      "agendazhang": 1,
      "-": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/index/IndexTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateOneBasedFailure(0);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5, 8).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertEquals(8, Index.fromOneBased(5, 8).getOneBased2());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5, 8).getZeroBased());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertEquals(7, Index.fromOneBased(5, 8).getZeroBased2());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateZeroBasedFailure(-1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5, 8).getZeroBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertEquals(8, Index.fromZeroBased(5, 8).getZeroBased2());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5, 8).getOneBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertEquals(9, Index.fromZeroBased(5, 8).getOneBased2());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code Index#fromZeroBased(int)} with {@code invalidZeroBasedIndex}, confirms that an"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateZeroBasedFailure(int invalidZeroBasedIndex) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateFailure(invalidZeroBasedIndex, true);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code Index#fromOneBased(int)} with {@code invalidOneBasedIndex}, confirms that an"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateOneBasedFailure(int invalidOneBasedIndex) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateFailure(invalidOneBasedIndex, false);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes either {@code Index#fromZeroBased(int)} (if it is zero based), or {@code Index#fromOneBased(int)}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * (if it is one based), and confirms that an {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateFailure(int invalidIndex, boolean isZeroBased) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            if (isZeroBased) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                Index.fromZeroBased(invalidIndex);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                Index.fromOneBased(invalidIndex);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected IndexOutOfBoundsException was not thrown.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected behaviour"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        final Index fifthPersonIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(5.0f));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agendazhang": 8,
      "-": 92
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/StringUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.hamcrest.CoreMatchers.containsString;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.hamcrest.MatcherAssert.assertThat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isUnsignedPositiveInteger --------------------------------------"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isUnsignedPositiveInteger() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        // EP: 2 valid numbers with comma in between, should return true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1,2\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10,20\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        // EP: 2 valid numbers with comma in between, should return true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1,2\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10,20\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        // EP: 2 numbers(1 invalid) with comma in between, should return false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0,2\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        // EP: 2 numbers with comma in between and white space, should return false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 0,2 \"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(NullPointerException.class, \"typical sentence\", null, Optional.empty());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExceptionThrown(Class\u003c? extends Throwable\u003e exceptionClass, String sentence, String word,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cString\u003e errorMessage) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(exceptionClass);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        errorMessage.ifPresent(message -\u003e thrown.expectMessage(message));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        StringUtil.containsWordIgnoreCase(sentence, word);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(IllegalArgumentException.class, \"typical sentence\", \"  \","
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                Optional.of(\"Word parameter cannot be empty\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(IllegalArgumentException.class, \"typical sentence\", \"aaa BBB\","
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                Optional.of(\"Word parameter should be a single word\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(NullPointerException.class, null, \"abc\", Optional.empty());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThat(StringUtil.getDetails(new FileNotFoundException(\"file not found\")),"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                   containsString(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        StringUtil.getDetails(null);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agendazhang": 14,
      "-": 159
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/TimeTableUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "adjscent"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "adjscent"
        },
        "content": "public class TimeTableUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * Test Line"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * edit 1 tt/ http://modsn.us/H4v8s"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private String shortlink \u003d \"http://modsn.us/H4v8s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private String actuallonglink \u003d \"https://nusmods.com/timetable/sem-1/\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"share?CS2102\u003dLEC:1,TUT:11\u0026CS2103\u003dLEC:1,TUT:01\u0026CS2105\u003dLEC:1,TUT:16\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\u0026CS2106\u003dLAB:09,LEC:1,TUT:09\u0026MA1521\u003dLEC:1,TUT:4\u0026UCV2209\u003dSEM:01\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private String scheduleString \u003d \"0000000000000000111100000000111100000000000\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"00000000000000000000000000000111111110000000000000000000000000000000000001100000\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"0111100000000000000000000000000000000000000001111000011\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"11000000000000000000000000000000111100\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"001111111111000000000000000000000000000000000000000\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"000000000000000000000000000000000000000000000000000000000000000000000\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseShortUrl() throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        assert actuallonglink.equals(TimeTableUtil.parseShortUrl(shortlink));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            TimeTableUtil.parseShortUrl(\"http://mo.us/4v8s\"); });"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            TimeTableUtil.parseShortUrl(\"http://modsn.us/2322111\"); });"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            TimeTableUtil.parseShortUrl(\"htt://modsn.us/\"); });"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            TimeTableUtil.parseShortUrl(\"http://odsn.us/\"); });"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            TimeTableUtil.parseShortUrl(\"http://modsn.us/\"); });"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    public void convertToSchedule() throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assert TimeTableUtil.parseUrl(shortlink).convertToSchedule()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "               .valueToString().equals(scheduleString);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    public void parseUrl() throws ParseException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        // This is just a wrapper method call"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        assert TimeTableUtil.parseUrl(shortlink).convertToSchedule()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            .valueToString().equals(scheduleString);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    public void parseLongUrl() throws ParseException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        assert TimeTableUtil.parseLongUrl(actuallonglink).convertToSchedule()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            .valueToString().equals(scheduleString);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    public void parseModule() throws ParseException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        assert TimeTableUtil.parseModule(\"CS2103\u003dLEC:1,TUT:01\", \"sem-1\").size() \u003d\u003d 2;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    public void obtainModuleInfoFromApi() throws ParseException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        assert TimeTableUtil.obtainModuleInfoFromApi(\"CS2103\", 1).size() \u003d\u003d 6;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            TimeTableUtil.obtainModuleInfoFromApi(\"123123\", 1); });"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            TimeTableUtil.obtainModuleInfoFromApi(\"\", 0); });"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            TimeTableUtil.obtainModuleInfoFromApi(\"\", 2); });"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "adjscent"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "adjscent": 59,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/XmlUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.storage.XmlAdaptedInterest;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAdaptedPerson;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAdaptedTag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlUtilTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlUtilTest\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path EMPTY_FILE \u003d TEST_DATA_FOLDER.resolve(\"empty.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path MISSING_FILE \u003d TEST_DATA_FOLDER.resolve(\"missing.xml\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path VALID_FILE \u003d TEST_DATA_FOLDER.resolve(\"validAddressBook.xml\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path MISSING_PERSON_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"missingPersonField.xml\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonField.xml\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path VALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"validPerson.xml\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEMP_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"tempAddressBook.xml\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"9482asf424\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Hans Muster\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"9482424\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"hans@example\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"4th street\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    private static final List\u003cXmlAdaptedInterest\u003e VALID_INTERESTS \u003d Collections.singletonList("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            new XmlAdaptedInterest(\"study\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"friends\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(null, AddressBook.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(MISSING_FILE, AddressBook.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(JAXBException.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(EMPTY_FILE, AddressBook.class);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_validFile_validResult() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableAddressBook.class).toModelType();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(9, dataFromFile.getPersonList().size());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithMissingPersonField_validResult() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                MISSING_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_INTERESTS, VALID_TAGS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertEqualXmlAdaptedPerson(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithInvalidPersonField_validResult() throws Exception {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                INVALID_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_INTERESTS, VALID_TAGS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertEqualXmlAdaptedPerson(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithValidPerson_validResult() throws Exception {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                VALID_PERSON_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_INTERESTS, VALID_TAGS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertEqualXmlAdaptedPerson(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(null, new AddressBook());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(MISSING_FILE, new AddressBook());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_validFile_dataSaved() throws Exception {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createFile(TEMP_FILE);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataToWrite \u003d new XmlSerializableAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookBuilder builder \u003d new AddressBookBuilder(new AddressBook());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        dataToWrite \u003d new XmlSerializableAddressBook("
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                builder.withPerson(new PersonBuilder().build()).build());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * Asserts that the expected {@code XmlAdaptedPerson} equals the actual {@code XmlAdaptedPerson}."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * @author agendazhang"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    private void assertEqualXmlAdaptedPerson (XmlAdaptedPerson expectedPerson, XmlAdaptedPerson actualPerson) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertEquals(expectedPerson.getName(), actualPerson.getName());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertEquals(expectedPerson.getPhone(), actualPerson.getPhone());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertEquals(expectedPerson.getEmail(), actualPerson.getEmail());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertEquals(expectedPerson.getAddress(), actualPerson.getAddress());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertEquals(expectedPerson.getSchedule(), actualPerson.getSchedule());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertEquals(expectedPerson.getInterests(), actualPerson.getInterests());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertEquals(expectedPerson.getTagged(), actualPerson.getTagged());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedPerson}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * objects."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlRootElement(name \u003d \"person\")"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class XmlAdaptedPersonWithRootElement extends XmlAdaptedPerson {}"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agendazhang": 23,
      "-": 141
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.logic.commands.personcommands.ListUserCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        String deleteCommand \u003d \"deleteUser 9\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(deleteCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        String listCommand \u003d ListUserCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertCommandSuccess(listCommand, ListUserCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(listCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.getFilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - {@code expectedModel}\u0027s address book was saved to the storage file."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                                           String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agendazhang": 4,
      "-": 120
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INTEREST;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ORGANISER_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PARTICIPANT_NAME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME_START;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.logic.commands.personcommands.EditUserCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.event.EventNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    public static final String VALID_NAME_ZOEY \u003d \"Zoey Tan\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_MEETING \u003d \"Meeting\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    public static final String VALID_PHONE_ZOEY \u003d \"99999999\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    public static final String VALID_EMAIL_ZOEY \u003d \"zoey@example.com\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public static final String VALID_INTEREST_STUDY \u003d \"study\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public static final String VALID_INTEREST_PLAY \u003d \"play\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    public static final String VALID_TIMETABLE \u003d \"http://modsn.us/H4v8s\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    public static final String VALID_SCHEDULE_UPDATE_DAY \u003d \"monday\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    public static final String VALID_SCHEDULE_UPDATE_TIME \u003d \"0100\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TIME \u003d \"12:30\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_DATE \u003d \"12-12-2018\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    public static final String VALID_SCHEDULE \u003d \"00000000000000000000000000000000000000\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        +"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        \"000000000000000000000000000000000000000000000000000000000000000000000000000000\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        +"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        \"000000000000000000000000000000000000000000000000000000000000000000000000000000\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        +"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        \"000000000000000000000000000000000000000000000000000000000000000000000000000000\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        +"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        \"0000000000000000000000000000000000000000000000000000000000000000\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    public static final String NAME_DESC_ZOEY \u003d \" \" + PREFIX_NAME + VALID_NAME_ZOEY;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_MEETING \u003d \" \" + PREFIX_EVENT_NAME + VALID_NAME_MEETING;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    public static final String PHONE_DESC_ZOEY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_ZOEY;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    public static final String EMAIL_DESC_ZOEY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_ZOEY;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    public static final String TIMETABLE_AMY \u003d \"http://modsn.us/H4v8s\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    public static final String SCHEDULE_AMY \u003d \"100000000000000011110000000011110000000000\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        +"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        \"0000000000000000000000000000001111111100000000000000000000000000000000000011\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        +"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        \"000000111100000000000000000000000000000000000000001111000011110000000000000000\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        +"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        \"0000000000000011110000111111111100000000000000000000000000000000000000000000000\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        +"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        \"0000000000000000000000000000000000000000000000000000000000000\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public static final String INTEREST_DESC_STUDY \u003d \" \" + PREFIX_INTEREST + VALID_INTEREST_STUDY;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public static final String INTEREST_DESC_PLAY \u003d \" \" + PREFIX_INTEREST + VALID_INTEREST_PLAY;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DATE_DESC \u003d \" \" + PREFIX_DATE + VALID_DATE;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String START_TIME_DESC \u003d \" \" + PREFIX_TIME_START + VALID_TIME;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ORGANISER_NAME_DESC \u003d \" \" + PREFIX_ORGANISER_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PARTICIPANT_NAME_DESC \u003d \" \" + PREFIX_PARTICIPANT_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public static final String INVALID_INTEREST_DESC \u003d \" \" + PREFIX_INTEREST + \"study*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EVENT_NAME_DESC \u003d \" \" + PREFIX_EVENT_NAME + \"Meeting\u0026\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public static final EditUserCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public static final EditUserCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public static final EditUserCommand.EditPersonDescriptor DESC_ZOEY;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        DESC_ZOEY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_ZOEY)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "                .withPhone(VALID_PHONE_ZOEY).withEmail(VALID_EMAIL_ZOEY).build();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the result message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book and the filtered person list in the {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void deleteFirstPerson(Model model) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(0);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(firstPerson);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the event at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showEventAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredEventList().size());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        Event event \u003d model.getFilteredEventList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d event.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredEventList(new EventNameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredEventList().size());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yao-feng": 8,
      "adjscent": 22,
      "agendazhang": 10,
      "-": 168
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/LoginCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "public class LoginCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        new LoginCommand(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    public void execute_validPersonLogin_loginSuccessful() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        Person validPerson \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        ModelStubAcceptingPersonLogin modelStub \u003d new ModelStubAcceptingPersonLogin(validPerson);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        CommandResult commandResult \u003d new LoginCommand(validPerson).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertEquals(String.format(LoginCommand.MESSAGE_SUCCESS, validPerson.getName()), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    public void execute_invalidPersonLogin_loginUnsuccessful() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        Person invalidPerson \u003d new PersonBuilder(BOB).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        ModelStubAcceptingPersonLogin modelStub \u003d new ModelStubAcceptingPersonLogin(null);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        Assert.assertThrows(CommandException.class, () -\u003e new LoginCommand(invalidPerson)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "            .execute(modelStub, commandHistory));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        LoginCommand loginAliceCommand \u003d new LoginCommand(alice);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        LoginCommand loginBobCommand \u003d new LoginCommand(bob);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertTrue(loginAliceCommand.equals(loginAliceCommand));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        LoginCommand loginAliceCommandCopy \u003d new LoginCommand(alice);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertTrue(loginAliceCommand.equals(loginAliceCommandCopy));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertFalse(loginAliceCommand.equals(1));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertFalse(loginAliceCommand \u003d\u003d null);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertFalse(loginAliceCommand.equals(loginBobCommand));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "     * A Model stub that always allows a person to Login."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    private class ModelStubAcceptingPersonLogin extends ModelStub {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        private Person currentUser;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        public ModelStubAcceptingPersonLogin(Person currentUser) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "            List\u003cPerson\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "            list.add(currentUser);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "            ObservableList\u003cPerson\u003e observableList \u003d FXCollections.observableList(list);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "            filteredPersons \u003d observableList.filtered(x -\u003e true);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "            return filteredPersons.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "            return FXCollections.unmodifiableObservableList(filteredPersons);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        public void setCurrentUser(Person currentUser) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "            this.currentUser \u003d currentUser;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yao-feng": 109
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/MaxScheduleCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "adjscent"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import seedu.address.model.person.Schedule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "adjscent"
        },
        "content": "public class MaxScheduleCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        new MaxScheduleCommand(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    public void executeValidIndexUnfilteredList_success() throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        Person personToFind1 \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        Person personToFind2 \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        Index[] index \u003d {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            INDEX_FIRST, INDEX_SECOND"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        };"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        MaxScheduleCommand maxScheduleCommand \u003d new MaxScheduleCommand(index);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        Schedule newSchedule \u003d personToFind1.getSchedule().maxSchedule(personToFind2.getSchedule());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        String expectedMessage \u003d String.format(MaxScheduleCommand.MESSAGE_SUCCESS, newSchedule.freeTimeToString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        // no change in model"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        assertCommandSuccess(maxScheduleCommand, model, commandHistory, expectedMessage, model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    public void executeInvalidIndexUnfilteredList_success() throws ParseException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        Index invalidIndex \u003d Index.fromZeroBased(20);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        Index[] index \u003d {INDEX_FIRST, INDEX_SECOND, invalidIndex};"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        MaxScheduleCommand maxScheduleCommand \u003d new MaxScheduleCommand(index);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        String expectedMessage \u003d String.format(MaxScheduleCommand.MESSAGE_PERSON_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        // no change in model"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        assertCommandFailure(maxScheduleCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "adjscent"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "adjscent": 69
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ModelStub.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.NoEventSelectedException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.NoUserLoggedInException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.event.Poll;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelStub implements Model {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person getPerson(Index index) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public void updatePerson(Person target1, Person editedPerson1, Person target2, Person editedPerson2) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cEvent\u003e getFilteredEventList() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredEventList(Predicate\u003cEvent\u003e predicate) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undoAddressBook() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redoAddressBook() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commitAddressBook() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addEvent(Event toAdd) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public Event getEvent(Index targetIndex) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteEvent(Event event) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateEvent(Event event, Event editedEvent) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateEvent(int index, Event editedEvent) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setCurrentUser(Person person) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person getCurrentUser() throws NoUserLoggedInException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setSelectedEvent(Event event) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public Event getSelectedEvent() throws NoEventSelectedException {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public Poll addPoll(String pollName) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public Poll addPollOption(Index index, String optionName) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public Poll voteOption(Index pollIndex, String optionName) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agendazhang": 2,
      "-": 167
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/eventcommands/AddEventCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "//@@author theJrLinguist"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "package seedu.address.logic.commands.eventcommands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.getEmptyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.commands.ModelStub;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.commands.exceptions.NoEventSelectedException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.commands.exceptions.NoUserLoggedInException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.testutil.EventBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "public class AddEventCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void constructor_nullEvent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        new AddEventCommand(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void execute_eventAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        AddEventCommandTest.ModelStubAcceptingEventAdded modelStub \u003d new"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                AddEventCommandTest.ModelStubAcceptingEventAdded();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Event validEvent \u003d new EventBuilder().build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        modelStub.setCurrentUser(new PersonBuilder().build());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        CommandResult commandResult \u003d new AddEventCommand(validEvent).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertEquals(String.format(AddEventCommand.MESSAGE_SUCCESS, validEvent), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertEquals(Arrays.asList(validEvent), modelStub.eventsAdded);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void execute_duplicateEvent_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Event validEvent \u003d new EventBuilder().build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        AddEventCommand addEventCommand \u003d new AddEventCommand(validEvent);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        ModelStub modelStub \u003d new AddEventCommandTest.ModelStubWithEvent(validEvent);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        thrown.expectMessage(AddEventCommand.MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        addEventCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void execute_noUser_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Model model \u003d new ModelManager(getEmptyAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Event validEvent \u003d new EventBuilder().build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        thrown.expectMessage(Messages.MESSAGE_NO_USER_LOGGED_IN);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        new AddEventCommand(validEvent).execute(model, commandHistory);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Event tutorial \u003d new EventBuilder().withName(\"Tutorial\").build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Event meeting \u003d new EventBuilder().withName(\"Meeting\").build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        AddEventCommand addTutorialCommand \u003d new AddEventCommand(tutorial);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        AddEventCommand addMeetingCommand \u003d new AddEventCommand(meeting);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertTrue(addTutorialCommand.equals(addTutorialCommand));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        AddEventCommand addTutorialCommandCopy \u003d new AddEventCommand(tutorial);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertTrue(addTutorialCommand.equals(addTutorialCommandCopy));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertFalse(addTutorialCommand.equals(1));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertFalse(addTutorialCommand.equals(null));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertFalse(addTutorialCommand.equals(addMeetingCommand));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * A Model stub that contains a single event."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private class ModelStubWithEvent extends ModelStub {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        private final Event event;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        ModelStubWithEvent(Event event) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            requireNonNull(event);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            this.event \u003d event;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            requireNonNull(event);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            return this.event.isSameEvent(event);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * A Model stub that always accept the event being added."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private class ModelStubAcceptingEventAdded extends ModelStub {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        final ArrayList\u003cEvent\u003e eventsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        private Person currentUser \u003d null;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        private Event currentEvent;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            requireNonNull(event);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            return eventsAdded.stream().anyMatch(event::isSameEvent);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        public void addEvent(Event event) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            requireNonNull(event);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            eventsAdded.add(event);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        public void setCurrentUser(Person person) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            currentUser \u003d person;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        public Person getCurrentUser() throws NoUserLoggedInException {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            if (currentUser \u003d\u003d null) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                throw new NoUserLoggedInException();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            return currentUser;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        public void setSelectedEvent(Event currentEvent) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            this.currentEvent \u003d currentEvent;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        public Event getSelectedEvent() throws NoEventSelectedException {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            if (currentEvent \u003d\u003d null) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                throw new NoEventSelectedException();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            return currentEvent;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theJrLinguist": 180
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/eventcommands/AddPollCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "//@@author theJrLinguist"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "package seedu.address.logic.commands.eventcommands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.testutil.EventBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "public class AddPollCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private static final String POLLNAME \u003d EventBuilder.DEFAULT_POLL;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void execute_acceptedAddPoll() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        AddPollCommand command \u003d new AddPollCommand(POLLNAME);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Person user \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        model.setCurrentUser(user);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Event event \u003d model.getFilteredEventList().get(0);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        model.setSelectedEvent(event);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        String expectedMessage \u003d String.format(command.MESSAGE_SUCCESS, POLLNAME, event);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        expectedModel.updateEvent(event, event);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void execute_noUserAddPoll() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        AddPollCommand command \u003d new AddPollCommand(POLLNAME);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Event event \u003d new EventBuilder().build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        model.setSelectedEvent(event);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_NO_USER_LOGGED_IN);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertCommandFailure(command, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void execute_noEventAddPoll() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Person user \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        model.setCurrentUser(user);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        AddPollCommand command \u003d new AddPollCommand(POLLNAME);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_NO_EVENT_SELECTED);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertCommandFailure(command, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void execute_notEventOrganiserAddPoll() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        AddPollCommand command \u003d new AddPollCommand(POLLNAME);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Person user \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        model.setCurrentUser(user);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Person anotherUser \u003d new PersonBuilder(user).withName(\"Bob\").build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        EventBuilder eventBuilder \u003d new EventBuilder();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        eventBuilder.withOrganiser(anotherUser);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Event event \u003d eventBuilder.build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        model.setSelectedEvent(event);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_NOT_EVENT_ORGANISER);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertCommandFailure(command, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theJrLinguist": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/eventcommands/AddPollOptionCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "//@@author theJrLinguist"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "package seedu.address.logic.commands.eventcommands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.testutil.EventBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "public class AddPollOptionCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private static final String OPTION_NAME \u003d \"Generic option\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void execute_acceptedAddPollOption() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Index index \u003d TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        AddPollOptionCommand command \u003d new AddPollOptionCommand(index, OPTION_NAME);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Event event \u003d model.getFilteredEventList().get(0);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        event.addPoll(\"Generic poll\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Person user \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        model.setCurrentUser(user);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        model.setSelectedEvent(event);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        String expectedMessage \u003d String.format(command.MESSAGE_SUCCESS, OPTION_NAME, index.getOneBased());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        expectedModel.updateEvent(event, event);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void execute_noEventAddPollOption() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Person user \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        model.setCurrentUser(user);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        VoteCommand command \u003d new VoteCommand(TypicalIndexes.INDEX_FIRST, OPTION_NAME);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_NO_EVENT_SELECTED);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertCommandFailure(command, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void execute_noPollAddPollOption() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        AddPollOptionCommand command \u003d new AddPollOptionCommand(TypicalIndexes.INDEX_FIRST, OPTION_NAME);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        EventBuilder eventBuilder \u003d new EventBuilder();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Event event \u003d eventBuilder.build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Person user \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        model.setCurrentUser(user);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        model.setSelectedEvent(event);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_NO_POLL_AT_INDEX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertCommandFailure(command, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theJrLinguist": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/eventcommands/DeleteEventCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "//@@author theJrLinguist"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "package seedu.address.logic.commands.eventcommands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showEventAtIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "public class DeleteEventCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Event eventToDelete \u003d model.getFilteredEventList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Person user \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        eventToDelete.setOrganiser(user);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        model.setCurrentUser(user);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        DeleteEventCommand deleteCommand \u003d new DeleteEventCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteEventCommand.MESSAGE_DELETE_EVENT_SUCCESS, eventToDelete);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        expectedModel.setCurrentUser(user);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        expectedModel.deleteEvent(eventToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void execute_notEventOrganiser_throwsCommandException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Event eventToDelete \u003d model.getFilteredEventList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        DeleteEventCommand deleteCommand \u003d new DeleteEventCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_NOT_EVENT_ORGANISER);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredEventList().size() + 1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        DeleteEventCommand deleteCommand \u003d new DeleteEventCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        showEventAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Event eventToDelete \u003d model.getFilteredEventList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Person user \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        eventToDelete.setOrganiser(user);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        model.setCurrentUser(user);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        DeleteEventCommand deleteCommand \u003d new DeleteEventCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteEventCommand.MESSAGE_DELETE_EVENT_SUCCESS, eventToDelete);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        expectedModel.setCurrentUser(user);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        expectedModel.deleteEvent(eventToDelete);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        showNoEvent(expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        showEventAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getEventList().size());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        DeleteEventCommand deleteCommand \u003d new DeleteEventCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Event eventToDelete \u003d model.getFilteredEventList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Person user \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        eventToDelete.setOrganiser(user);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        model.setCurrentUser(user);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        DeleteEventCommand deleteCommand \u003d new DeleteEventCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        expectedModel.setCurrentUser(user);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        expectedModel.deleteEvent(eventToDelete);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        // delete -\u003e first event deleted"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        // undo -\u003e reverts event organiser back to previous state and filtered event list to show all events"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        // redo -\u003e same first event deleted again"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredEventList().size() + 1);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        DeleteEventCommand deleteCommand \u003d new DeleteEventCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * 1. Deletes a {@code Event} from a filtered list."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted event in the"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the event object regardless of indexing."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_sameEventDeleted() throws Exception {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        DeleteEventCommand deleteCommand \u003d new DeleteEventCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        showEventAtIndex(model, INDEX_SECOND);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Event eventToDelete \u003d model.getFilteredEventList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Person user \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        eventToDelete.setOrganiser(user);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        model.setCurrentUser(user);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        expectedModel.setCurrentUser(user);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        expectedModel.deleteEvent(eventToDelete);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        // delete -\u003e deletes second event in unfiltered event list / first event in filtered event list"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        // undo -\u003e reverts event organiser back to previous state and filtered event list to show all events"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertNotEquals(eventToDelete, model.getFilteredEventList().get(INDEX_FIRST.getZeroBased()));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        // redo -\u003e deletes same second event in unfiltered event list"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        DeleteEventCommand deleteFirstCommand \u003d new DeleteEventCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        DeleteEventCommand deleteSecondCommand \u003d new DeleteEventCommand(INDEX_SECOND);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        DeleteEventCommand deleteFirstCommandCopy \u003d new DeleteEventCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private void showNoEvent(Model model) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        model.updateFilteredEventList(p -\u003e false);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theJrLinguist": 205
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/eventcommands/DisplayPollCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "//@@author theJrLinguist"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "package seedu.address.logic.commands.eventcommands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.testutil.EventBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "public class DisplayPollCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void execute_acceptedDisplayPoll() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        DisplayPollCommand command \u003d new DisplayPollCommand(TypicalIndexes.INDEX_FIRST);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        EventBuilder eventBuilder \u003d new EventBuilder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Event event \u003d eventBuilder.withPoll().build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        model.setSelectedEvent(event);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        String expectedMessage \u003d String.format(command.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                TypicalIndexes.INDEX_FIRST.getOneBased(), event);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void execute_noEventDisplayPoll() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        DisplayPollCommand command \u003d new DisplayPollCommand(TypicalIndexes.INDEX_FIRST);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_NO_EVENT_SELECTED);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertCommandFailure(command, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void execute_noPollDisplayPoll() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        DisplayPollCommand command \u003d new DisplayPollCommand(TypicalIndexes.INDEX_FIRST);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        EventBuilder eventBuilder \u003d new EventBuilder();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Event event \u003d eventBuilder.build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        model.setSelectedEvent(event);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_NO_POLL_AT_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertCommandFailure(command, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theJrLinguist": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/eventcommands/JoinEventCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "//@@author theJrLinguist"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "package seedu.address.logic.commands.eventcommands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.getAddressBookWithParticipant;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.testutil.EventBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "public class JoinEventCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private static final Index INVALID_INDEX \u003d Index.fromOneBased(100);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private Model model \u003d new ModelManager(getAddressBookWithParticipant(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getAddressBookWithParticipant(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void execute_acceptedJoinEvent() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        JoinEventCommand command \u003d new JoinEventCommand(TypicalIndexes.INDEX_FIRST);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Person user \u003d TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        model.setCurrentUser(user);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Event event \u003d model.getEvent(TypicalIndexes.INDEX_FIRST);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        String expectedMessage \u003d String.format(command.MESSAGE_SUCCESS, event);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        expectedMessage +\u003d \"\\n\" + \"People attending: [Alice Pauline, Benson Meier]\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void execute_indexInvalidJoinEvent() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        JoinEventCommand command \u003d new JoinEventCommand(INVALID_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Person user \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        model.setCurrentUser(user);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertCommandFailure(command, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void execute_noUserJoinEvent() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        JoinEventCommand command \u003d new JoinEventCommand(TypicalIndexes.INDEX_FIRST);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Event event \u003d new EventBuilder().build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        model.setSelectedEvent(event);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_NO_USER_LOGGED_IN);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertCommandFailure(command, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void execute_alreadyJoinedJoinEvent() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        JoinEventCommand command \u003d new JoinEventCommand(TypicalIndexes.INDEX_FIRST);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Person user \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        model.setCurrentUser(user);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Event event \u003d model.getEvent(TypicalIndexes.INDEX_FIRST);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        model.updateEvent(TypicalIndexes.INDEX_FIRST.getZeroBased(), event);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_ALREADY_JOINED);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertCommandFailure(command, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theJrLinguist": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/eventcommands/SelectEventCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "//@@author theJrLinguist"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "package seedu.address.logic.commands.eventcommands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showEventAtIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.commons.events.ui.JumpToEventListRequestEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "public class SelectEventCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Index lastEventIndex \u003d Index.fromOneBased(model.getFilteredEventList().size());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertExecutionSuccess(INDEX_THIRD);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertExecutionSuccess(lastEventIndex);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredEventList().size() + 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        showEventAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        showEventAtIndex(expectedModel, INDEX_FIRST);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void execute_invalidIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        showEventAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        showEventAtIndex(expectedModel, INDEX_FIRST);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Index outOfBoundsIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getAddressBook().getEventList().size());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        SelectEventCommand selectFirstCommand \u003d new SelectEventCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        SelectEventCommand selectSecondCommand \u003d new SelectEventCommand(INDEX_SECOND);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        SelectEventCommand selectFirstCommandCopy \u003d new SelectEventCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * Executes a {@code SelectEventCommand} with the given {@code index}, and checks that"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * {@code JumpToEventListRequestEvent} is raised with the correct index."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        SelectEventCommand selectCommand \u003d new SelectEventCommand(index);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        String expectedMessage \u003d String.format(SelectEventCommand.MESSAGE_SELECT_EVENT_SUCCESS, index.getOneBased());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertCommandSuccess(selectCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        JumpToEventListRequestEvent lastEvent \u003d (JumpToEventListRequestEvent)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                eventsCollectorRule.eventsCollector.getMostRecent();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * Executes a {@code SelectEventCommand} with the given {@code index}, and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        SelectEventCommand selectCommand \u003d new SelectEventCommand(index);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertCommandFailure(selectCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theJrLinguist": 117
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/eventcommands/SetDateCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "//@@author theJrLinguist"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "package seedu.address.logic.commands.eventcommands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.testutil.EventBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "public class SetDateCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private LocalDate date \u003d LocalDate.of(2018, 2, 1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void execute_dateAcceptedSetDate() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        SetDateCommand command \u003d new SetDateCommand(date);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        DateTimeFormatter dateFormat \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Person user \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        model.setCurrentUser(user);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Event event \u003d model.getFilteredEventList().get(0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        model.setSelectedEvent(event);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        String expectedMessage \u003d String.format(command.MESSAGE_SUCCESS, date.format(dateFormat), event);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        expectedModel.updateEvent(event, event);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void execute_noUserSetDate() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        SetDateCommand command \u003d new SetDateCommand(date);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Event event \u003d new EventBuilder().build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        model.setSelectedEvent(event);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_NO_USER_LOGGED_IN);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertCommandFailure(command, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void execute_noEventSetDate() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        SetDateCommand command \u003d new SetDateCommand(date);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_NO_EVENT_SELECTED);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertCommandFailure(command, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void execute_notEventOrganiserSetDate() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        SetDateCommand command \u003d new SetDateCommand(date);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Person user \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        model.setCurrentUser(user);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Person anotherUser \u003d new PersonBuilder(user).withName(\"Bob\").build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        EventBuilder eventBuilder \u003d new EventBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        eventBuilder.withOrganiser(anotherUser);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Event event \u003d eventBuilder.build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        model.setSelectedEvent(event);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_NOT_EVENT_ORGANISER);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertCommandFailure(command, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        LocalDate dateOne \u003d LocalDate.of(2018, 1, 1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        LocalDate dateTwo \u003d LocalDate.of(2018, 2, 2);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        SetDateCommand setDateOneCommand \u003d new SetDateCommand(dateOne);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        SetDateCommand setDateTwoCommand \u003d new SetDateCommand(dateTwo);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertTrue(setDateOneCommand.equals(setDateOneCommand));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        SetDateCommand setDateOneCommandCopy \u003d new SetDateCommand(dateOne);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertTrue(setDateOneCommand.equals(setDateOneCommandCopy));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertFalse(setDateOneCommand.equals(1));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertFalse(setDateOneCommand.equals(null));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        // different date -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertFalse(setDateOneCommand.equals(setDateTwoCommand));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theJrLinguist": 98
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/eventcommands/SetTimeCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "//@@author theJrLinguist"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "package seedu.address.logic.commands.eventcommands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.testutil.EventBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "public class SetTimeCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private LocalTime startTime \u003d LocalTime.of(18, 00);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private LocalTime endTime \u003d LocalTime.of(19, 30);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void execute_timeAcceptedSetTime() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        SetTimeCommand command \u003d new SetTimeCommand(startTime, endTime);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        DateTimeFormatter timeFormat \u003d DateTimeFormatter.ofPattern(\"HH:mm\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Person user \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        model.setCurrentUser(user);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Event event \u003d model.getFilteredEventList().get(0);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        model.setSelectedEvent(event);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        String expectedMessage \u003d String.format(command.MESSAGE_SUCCESS, startTime.format(timeFormat),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                endTime.format(timeFormat), event);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        expectedModel.updateEvent(event, event);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void execute_endTimeBeforeStartTime() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        SetTimeCommand command \u003d new SetTimeCommand(endTime, startTime);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Person user \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        model.setCurrentUser(user);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Event event \u003d model.getFilteredEventList().get(0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        model.setSelectedEvent(event);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_END_BEFORE_START_TIME);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertCommandFailure(command, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void execute_noUserSetTime() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        SetTimeCommand command \u003d new SetTimeCommand(startTime, endTime);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Event event \u003d new EventBuilder().build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        model.setSelectedEvent(event);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_NO_USER_LOGGED_IN);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertCommandFailure(command, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void execute_noEventSetTime() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        SetTimeCommand command \u003d new SetTimeCommand(startTime, endTime);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_NO_EVENT_SELECTED);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertCommandFailure(command, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void execute_notEventOrganiserSetTime() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        SetTimeCommand command \u003d new SetTimeCommand(startTime, endTime);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Person user \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        model.setCurrentUser(user);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Person anotherUser \u003d new PersonBuilder(user).withName(\"Bob\").build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        EventBuilder eventBuilder \u003d new EventBuilder();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        eventBuilder.withOrganiser(anotherUser);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Event event \u003d eventBuilder.build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        model.setSelectedEvent(event);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_NOT_EVENT_ORGANISER);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertCommandFailure(command, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        LocalTime timeOne \u003d LocalTime.of(12, 00);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        LocalTime timeTwo \u003d LocalTime.of(13, 30);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        LocalTime timeThree \u003d LocalTime.of(14, 15);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        SetTimeCommand setTimeCommandOne \u003d new SetTimeCommand(timeOne, timeTwo);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        SetTimeCommand setTimeCommandTwo \u003d new SetTimeCommand(timeTwo, timeThree);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertTrue(setTimeCommandOne.equals(setTimeCommandOne));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        SetTimeCommand setTimeOneCommandCopy \u003d new SetTimeCommand(timeOne, timeTwo);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertTrue(setTimeCommandOne.equals(setTimeOneCommandCopy));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertFalse(setTimeCommandOne.equals(1));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertFalse(setTimeCommandOne.equals(null));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        // different time -\u003e returns false"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertFalse(setTimeCommandOne.equals(setTimeCommandTwo));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theJrLinguist": 112
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/eventcommands/VoteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "//@@author theJrLinguist"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "package seedu.address.logic.commands.eventcommands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.getAddressBookWithParticipant;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.testutil.EventBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "public class VoteCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private static final String OPTION_NAME \u003d \"Generic option\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private Model model \u003d new ModelManager(getAddressBookWithParticipant(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getAddressBookWithParticipant(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void execute_acceptedVoteOption() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Index index \u003d TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        VoteCommand command \u003d new VoteCommand(index, OPTION_NAME);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Person user \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        model.setCurrentUser(user);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Event event \u003d model.getFilteredEventList().get(0);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        event.addPoll(\"Generic poll\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        event.getPoll(index).addOption(OPTION_NAME);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        model.setSelectedEvent(event);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        String expectedMessage \u003d String.format(command.MESSAGE_SUCCESS, OPTION_NAME, index.getOneBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        expectedModel.updateEvent(event, event);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void execute_noEventVoteOption() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Person user \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        model.setCurrentUser(user);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        VoteCommand command \u003d new VoteCommand(TypicalIndexes.INDEX_FIRST, OPTION_NAME);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_NO_EVENT_SELECTED);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertCommandFailure(command, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void execute_noPollVoteOption() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        VoteCommand command \u003d new VoteCommand(TypicalIndexes.INDEX_FIRST, OPTION_NAME);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Person user \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        model.setCurrentUser(user);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        EventBuilder eventBuilder \u003d new EventBuilder();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        eventBuilder.withParticipant().withOrganiser(user);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Event event \u003d eventBuilder.build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        model.setSelectedEvent(event);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_NO_POLL_AT_INDEX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertCommandFailure(command, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void execute_noOptionVoteOption() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        VoteCommand command \u003d new VoteCommand(TypicalIndexes.INDEX_FIRST, OPTION_NAME);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Person user \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        model.setCurrentUser(user);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        EventBuilder eventBuilder \u003d new EventBuilder();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        eventBuilder.withParticipant().withOrganiser(user);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Event event \u003d eventBuilder.withPoll().build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        model.setSelectedEvent(event);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_NO_SUCH_OPTION);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertCommandFailure(command, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void execute_noUserVoteOption() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        VoteCommand command \u003d new VoteCommand(TypicalIndexes.INDEX_FIRST, OPTION_NAME);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        EventBuilder eventBuilder \u003d new EventBuilder();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Event event \u003d eventBuilder.withPoll().build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        model.setSelectedEvent(event);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_NO_USER_LOGGED_IN);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertCommandFailure(command, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void execute_haveNotJoinedVoteOption() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Index index \u003d TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        VoteCommand command \u003d new VoteCommand(index, OPTION_NAME);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Person user \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        model.setCurrentUser(user);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Event event \u003d model.getFilteredEventList().get(0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        event.addPoll(\"Generic poll\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        event.getPoll(index).addOption(OPTION_NAME);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        event.setPersonList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        model.setSelectedEvent(event);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_HAVE_NOT_JOINED);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertCommandFailure(command, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void execute_haveAlreadyVotedOption() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Index index \u003d TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        VoteCommand command \u003d new VoteCommand(index, OPTION_NAME);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Person user \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        model.setCurrentUser(user);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Event event \u003d model.getFilteredEventList().get(0);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        event.addPoll(\"Generic poll\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        event.getPoll(index).addOption(OPTION_NAME);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        event.getPoll(index).addVote(OPTION_NAME, user);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        model.setSelectedEvent(event);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_HAVE_ALREADY_VOTED);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertCommandFailure(command, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theJrLinguist": 123
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/personcommands/AddFriendCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "package seedu.address.logic.commands.personcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "agendazhang"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "agendazhang"
        },
        "content": " * {@code AddFriendCommand}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "agendazhang"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "public class AddFriendCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public void executeValidIndexUnfilteredListSuccess() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        Person person1 \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        Person person2 \u003d model.getFilteredPersonList().get(INDEX_SECOND.getZeroBased());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        AddFriendCommand addFriendCommand \u003d new AddFriendCommand(Index.fromZeroBased(INDEX_FIRST.getZeroBased(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                INDEX_SECOND.getZeroBased()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        String expectedMessage \u003d String.format(AddFriendCommand.MESSAGE_ADD_FRIEND_SUCCESS,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                person1.getName(), person2.getName());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        Person newPerson1 \u003d new Person(person1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        Person newPerson2 \u003d new Person(person2);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        ArrayList\u003cPerson\u003e friendList1 \u003d newPerson1.getFriends();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        ArrayList\u003cPerson\u003e friendList2 \u003d newPerson2.getFriends();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        friendList1.add(person2);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        friendList2.add(person1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        expectedModel.updatePerson(person1, newPerson1, person2, newPerson2);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertCommandSuccess(addFriendCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public void executeInvalidIndexUnfilteredListThrowsCommandException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        Index outOfBoundIndexes \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                model.getFilteredPersonList().size() + 2);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        AddFriendCommand addFriendCommand \u003d new AddFriendCommand(outOfBoundIndexes);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertCommandFailure(addFriendCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public void executeUndoRedoValidIndexUnfilteredListSuccess() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        Person person1 \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        Person person2 \u003d model.getFilteredPersonList().get(INDEX_SECOND.getZeroBased());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        AddFriendCommand addFriendCommand \u003d new AddFriendCommand(Index.fromZeroBased(INDEX_FIRST.getZeroBased(),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                INDEX_SECOND.getZeroBased()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        Person newPerson1 \u003d new Person(person1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        Person newPerson2 \u003d new Person(person2);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        ArrayList\u003cPerson\u003e friendList1 \u003d newPerson1.getFriends();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        ArrayList\u003cPerson\u003e friendList2 \u003d newPerson2.getFriends();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        friendList1.add(person2);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        friendList2.add(person1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        expectedModel.updatePerson(person1, newPerson1, person2, newPerson2);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        // addFriend command executed"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        addFriendCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        // redo -\u003e addFriend command executed again"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public void executeUndoRedoInvalidIndexUnfilteredListFailure() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        Index outOfBoundIndexes \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                model.getFilteredPersonList().size() + 2);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        AddFriendCommand addFriendCommand \u003d new AddFriendCommand(outOfBoundIndexes);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertCommandFailure(addFriendCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        AddFriendCommand addFriendFirstCommand \u003d new AddFriendCommand(Index.fromZeroBased(INDEX_FIRST.getZeroBased(),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                INDEX_SECOND.getZeroBased()));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        AddFriendCommand addFriendSecondCommand \u003d new AddFriendCommand(Index.fromZeroBased(INDEX_SECOND.getZeroBased(),"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                INDEX_THIRD.getZeroBased()));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertTrue(addFriendFirstCommand.equals(addFriendFirstCommand));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        AddFriendCommand addFriendFirstCommandCopy \u003d new AddFriendCommand(Index.fromZeroBased("
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                INDEX_FIRST.getZeroBased(), INDEX_SECOND.getZeroBased()));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertTrue(addFriendFirstCommand.equals(addFriendFirstCommandCopy));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertFalse(addFriendFirstCommand.equals(1));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertFalse(addFriendFirstCommand.equals(addFriendSecondCommand));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agendazhang": 131
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/personcommands/AddUserCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.personcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agendazhang"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddUserCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "public class AddUserCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertCommandSuccess(new AddUserCommand(validPerson), model, commandHistory,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                String.format(AddUserCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertCommandFailure(new AddUserCommand(personInList), model, commandHistory,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                AddUserCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agendazhang": 6,
      "-": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/personcommands/AddUserCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.personcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ModelStub;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "public class AddUserCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        new AddUserCommand(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        CommandResult commandResult \u003d new AddUserCommand(validPerson).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertEquals(String.format(AddUserCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        AddUserCommand addUserCommand \u003d new AddUserCommand(validPerson);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        thrown.expectMessage(AddUserCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        addUserCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        AddUserCommand addAliceCommand \u003d new AddUserCommand(alice);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        AddUserCommand addBobCommand \u003d new AddUserCommand(bob);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        AddUserCommand addAliceCommandCopy \u003d new AddUserCommand(alice);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            // called by {@code AddUserCommand#execute()}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agendazhang": 11,
      "-": 122
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/personcommands/ClearUserCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.personcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "public class ClearUserCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertCommandSuccess(new ClearUserCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                ClearUserCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.resetData(new AddressBook());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertCommandSuccess(new ClearUserCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                ClearUserCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agendazhang": 5,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/personcommands/DeleteUserCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.personcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "agendazhang"
        },
        "content": " * {@code DeleteUserCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "public class DeleteUserCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        DeleteUserCommand deleteUserCommand \u003d new DeleteUserCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteUserCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertCommandSuccess(deleteUserCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        DeleteUserCommand deleteUserCommand \u003d new DeleteUserCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertCommandFailure(deleteUserCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        DeleteUserCommand deleteUserCommand \u003d new DeleteUserCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteUserCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertCommandSuccess(deleteUserCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        DeleteUserCommand deleteUserCommand \u003d new DeleteUserCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertCommandFailure(deleteUserCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        DeleteUserCommand deleteUserCommand \u003d new DeleteUserCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // delete -\u003e first person deleted"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        deleteUserCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e same first person deleted again"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        DeleteUserCommand deleteUserCommand \u003d new DeleteUserCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertCommandFailure(deleteUserCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Deletes a {@code Person} from a filtered list."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted person in the"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the person object regardless of indexing."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonDeleted() throws Exception {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        DeleteUserCommand deleteUserCommand \u003d new DeleteUserCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // delete -\u003e deletes second person in unfiltered person list / first person in filtered person list"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        deleteUserCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(personToDelete, model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased()));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e deletes same second person in unfiltered person list"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        DeleteUserCommand deleteFirstCommand \u003d new DeleteUserCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        DeleteUserCommand deleteSecondCommand \u003d new DeleteUserCommand(INDEX_SECOND);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        DeleteUserCommand deleteFirstCommandCopy \u003d new DeleteUserCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agendazhang": 21,
      "-": 158
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/personcommands/EditPersonDescriptorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.personcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.logic.commands.personcommands.EditUserCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agendazhang": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/personcommands/EditUserCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.personcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SCHEDULE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SCHEDULE_UPDATE_DAY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SCHEDULE_UPDATE_TIME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.logic.commands.personcommands.EditUserCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "agendazhang"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "agendazhang"
        },
        "content": " * and unit tests for EditUserCommand."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "public class EditUserCommandTest {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        EditUserCommand editUserCommand \u003d new EditUserCommand(INDEX_FIRST, descriptor);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        String expectedMessage \u003d String.format(EditUserCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertCommandSuccess(editUserCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        EditUserCommand editUserCommand \u003d new EditUserCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        String expectedMessage \u003d String.format(EditUserCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertCommandSuccess(editUserCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    public void executeScheduleFieldsSpecifiedUnfilteredListSuccess() throws ParseException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withSchedule(VALID_SCHEDULE).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            .withSchedule(VALID_SCHEDULE).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        EditUserCommand editUserCommand \u003d new EditUserCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        String expectedMessage \u003d String.format(EditUserCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        expectedModel.updatePerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertCommandSuccess(editUserCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    public void executeUpdateScheduleFieldsSpecifiedUnfilteredListSuccess() throws ParseException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withSchedule(VALID_SCHEDULE)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            .withUpdateSchedule(VALID_SCHEDULE_UPDATE_DAY, VALID_SCHEDULE_UPDATE_TIME).build();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            .withSchedule(VALID_SCHEDULE)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            .withUpdateSchedule(VALID_SCHEDULE_UPDATE_DAY, VALID_SCHEDULE_UPDATE_TIME).build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        EditUserCommand editUserCommand \u003d new EditUserCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        String expectedMessage \u003d String.format(EditUserCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        expectedModel.updatePerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertCommandSuccess(editUserCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        EditUserCommand editUserCommand \u003d new EditUserCommand(INDEX_FIRST, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        String expectedMessage \u003d String.format(EditUserCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertCommandSuccess(editUserCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        EditUserCommand editUserCommand \u003d new EditUserCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        String expectedMessage \u003d String.format(EditUserCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertCommandSuccess(editUserCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        EditUserCommand editUserCommand \u003d new EditUserCommand(INDEX_SECOND, descriptor);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertCommandFailure(editUserCommand, model, commandHistory, EditUserCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND.getZeroBased());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        EditUserCommand editUserCommand \u003d new EditUserCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertCommandFailure(editUserCommand, model, commandHistory, EditUserCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        EditUserCommand editUserCommand \u003d new EditUserCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertCommandFailure(editUserCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        EditUserCommand editUserCommand \u003d new EditUserCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertCommandFailure(editUserCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        EditUserCommand editUserCommand \u003d new EditUserCommand(INDEX_FIRST, descriptor);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit -\u003e first person edited"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        editUserCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e same first person edited again"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        EditUserCommand editUserCommand \u003d new EditUserCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertCommandFailure(editUserCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Edits a {@code Person} from a filtered list."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited person in the"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the person object regardless of indexing."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonEdited() throws Exception {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        EditUserCommand editUserCommand \u003d new EditUserCommand(INDEX_FIRST, descriptor);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit -\u003e edits second person in unfiltered person list / first person in filtered person list"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        editUserCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased()), personToEdit);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e edits same second person in unfiltered person list"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        final EditUserCommand standardCommand \u003d new EditUserCommand(INDEX_FIRST, DESC_AMY);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        EditUserCommand commandWithSameValues \u003d new EditUserCommand(INDEX_FIRST, copyDescriptor);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearUserCommand()));"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertFalse(standardCommand.equals(new EditUserCommand(INDEX_SECOND, DESC_AMY)));"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertFalse(standardCommand.equals(new EditUserCommand(INDEX_FIRST, DESC_BOB)));"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "adjscent": 40,
      "agendazhang": 41,
      "-": 219
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/personcommands/FindByPhoneCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "package seedu.address.logic.commands.personcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import seedu.address.model.person.PhoneContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yao-feng"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindByPhoneCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yao-feng"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "public class FindByPhoneCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    public void execute_noPhoneGiven_noPersonFound() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        PhoneContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        FindByPhoneCommand command \u003d new FindByPhoneCommand(predicate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        PhoneContainsKeywordsPredicate predicate \u003d preparePredicate(\"94351253\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        FindByPhoneCommand command \u003d new FindByPhoneCommand(predicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertEquals(Arrays.asList(ALICE), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        PhoneContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "                new PhoneContainsKeywordsPredicate(Collections.singletonList(\"98765432\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        PhoneContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "                new PhoneContainsKeywordsPredicate(Collections.singletonList(\"98761111\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        FindByPhoneCommand findFirstCommand \u003d new FindByPhoneCommand(firstPredicate);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        FindByPhoneCommand findSecondCommand \u003d new FindByPhoneCommand(secondPredicate);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        FindByPhoneCommand findFirstCommandCopy \u003d new FindByPhoneCommand(firstPredicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertFalse(findFirstCommand \u003d\u003d null);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "     * Parses {@code userInput} into a {@code PhoneContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    private PhoneContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        return new PhoneContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yao-feng": 83
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/personcommands/FindUserCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.personcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "agendazhang"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindUserCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "public class FindUserCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        FindUserCommand findFirstCommand \u003d new FindUserCommand(firstPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        FindUserCommand findSecondCommand \u003d new FindUserCommand(secondPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        FindUserCommand findFirstCommandCopy \u003d new FindUserCommand(firstPredicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        FindUserCommand command \u003d new FindUserCommand(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        FindUserCommand command \u003d new FindUserCommand(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agendazhang": 7,
      "-": 78
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/personcommands/ListUserCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.personcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "agendazhang"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListUserCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "public class ListUserCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertCommandSuccess(new ListUserCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                ListUserCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertCommandSuccess(new ListUserCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                ListUserCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agendazhang": 6,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/personcommands/SelectUserCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.personcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "agendazhang"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SelectUserCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "public class SelectUserCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_THIRD);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(expectedModel, INDEX_FIRST);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(expectedModel, INDEX_FIRST);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        SelectUserCommand selectFirstCommand \u003d new SelectUserCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        SelectUserCommand selectSecondCommand \u003d new SelectUserCommand(INDEX_SECOND);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        SelectUserCommand selectFirstCommandCopy \u003d new SelectUserCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * Executes a {@code SelectUserCommand} with the given {@code index}, and checks that {@code JumpToListRequestEvent}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * is raised with the correct index."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        SelectUserCommand selectUserCommand \u003d new SelectUserCommand(index);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        String expectedMessage \u003d String.format(SelectUserCommand.MESSAGE_SELECT_PERSON_SUCCESS, index.getOneBased());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertCommandSuccess(selectUserCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        JumpToListRequestEvent lastEvent \u003d (JumpToListRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * Executes a {@code SelectUserCommand} with the given {@code index}, and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        SelectUserCommand selectUserCommand \u003d new SelectUserCommand(index);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertCommandFailure(selectUserCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agendazhang": 12,
      "-": 106
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddFriendCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.logic.commands.personcommands.AddFriendCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "agendazhang"
        },
        "content": " * Parses input arguments and creates a new AddFriendCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agendazhang"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "public class AddFriendCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    private AddFriendCommandParser parser \u003d new AddFriendCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public void parseValidArgsReturnsAddFriendCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertParseSuccess(parser, \"1,2\", new AddFriendCommand(Index.fromZeroBased(INDEX_FIRST.getZeroBased(),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                INDEX_SECOND.getZeroBased())));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public void parseInvalidArgsThrowsParseException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertParseFailure(parser, \"a,b\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                AddFriendCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agendazhang": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddUserCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INTEREST_DESC_STUDY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_INTEREST_STUDY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_INTEREST_PLAY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.personcommands.AddUserCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "//import seedu.address.model.interest.Interest;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "public class AddUserCommandParserTest {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    private AddUserCommandParser parser \u003d new AddUserCommandParser();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                    + ADDRESS_DESC_BOB + INTEREST_DESC_STUDY + TAG_DESC_FRIEND, new AddUserCommand(expectedPerson));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                + ADDRESS_DESC_BOB + INTEREST_DESC_STUDY + TAG_DESC_FRIEND, new AddUserCommand(expectedPerson));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                + ADDRESS_DESC_BOB + INTEREST_DESC_STUDY + TAG_DESC_FRIEND, new AddUserCommand(expectedPerson));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                + ADDRESS_DESC_BOB + INTEREST_DESC_STUDY + TAG_DESC_FRIEND, new AddUserCommand(expectedPerson));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                + ADDRESS_DESC_BOB + INTEREST_DESC_STUDY + TAG_DESC_FRIEND, new AddUserCommand(expectedPerson));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                + INTEREST_DESC_STUDY + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                new AddUserCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                        + ADDRESS_DESC_AMY + INTEREST_DESC_STUDY,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                new AddUserCommand(expectedPerson));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddUserCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddUserCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agendazhang": 18,
      "-": 129
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_MEETING;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import seedu.address.logic.commands.LoginCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.eventcommands.AddPollCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.eventcommands.AddPollOptionCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.eventcommands.DeleteEventCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.eventcommands.DisplayPollCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.eventcommands.FindEventByTimeCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.eventcommands.FindEventCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.eventcommands.FindEventCommandTest;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.eventcommands.JoinEventCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.eventcommands.SelectEventCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.eventcommands.SetDateCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.eventcommands.SetTimeCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.eventcommands.VoteCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.logic.commands.personcommands.AddFriendCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.personcommands.AddUserCommand;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.logic.commands.personcommands.ClearUserCommand;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.logic.commands.personcommands.DeleteUserCommand;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.logic.commands.personcommands.EditUserCommand;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.logic.commands.personcommands.EditUserCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import seedu.address.logic.commands.personcommands.FindByPhoneCommand;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.logic.commands.personcommands.FindUserCommand;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.logic.commands.personcommands.ListUserCommand;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.logic.commands.personcommands.SelectUserCommand;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.event.EventAttributesPredicate;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import seedu.address.model.person.PhoneContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    public void parseCommand_login() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        LoginCommand command \u003d (LoginCommand) parser.parseCommand(PersonUtil.getLoginCommand(person));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertEquals(new LoginCommand(person), command);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_deleteEvent() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteEventCommand command \u003d (DeleteEventCommand) parser.parseCommand("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteEventCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteEventCommand(INDEX_FIRST), command);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_addPoll() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        AddPollCommand command \u003d (AddPollCommand) parser.parseCommand("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                AddPollCommand.COMMAND_WORD + \" \" + \"n/Date poll\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddPollCommand(\"Date poll\"), command);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_addPollOption() throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        AddPollOptionCommand command \u003d (AddPollOptionCommand) parser.parseCommand("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                AddPollOptionCommand.COMMAND_WORD + \" \" + \"i/1 o/12 August\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddPollOptionCommand(INDEX_FIRST, \"12 August\"), command);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_joinEvent() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        JoinEventCommand command \u003d (JoinEventCommand) parser.parseCommand("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                JoinEventCommand.COMMAND_WORD + \" \" + \"1\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new JoinEventCommand(INDEX_FIRST), command);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_selectEvent() throws Exception {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectEventCommand command \u003d (SelectEventCommand) parser.parseCommand("
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                SelectEventCommand.COMMAND_WORD + \" \" + \"1\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new SelectEventCommand(INDEX_FIRST), command);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_setDate() throws Exception {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        SetDateCommand command \u003d (SetDateCommand) parser.parseCommand("
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                SetDateCommand.COMMAND_WORD + \" \" + \"d/02-03-2018\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDate date \u003d LocalDate.of(2018, 3, 2);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new SetDateCommand(date), command);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_setTime() throws Exception {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        SetTimeCommand command \u003d (SetTimeCommand) parser.parseCommand("
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                SetTimeCommand.COMMAND_WORD + \" \" + \"t1/12:00 t2/13:30\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalTime startTime \u003d LocalTime.of(12, 00);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalTime endTime \u003d LocalTime.of(13, 30);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new SetTimeCommand(startTime, endTime), command);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_vote() throws Exception {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        VoteCommand command \u003d (VoteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                VoteCommand.COMMAND_WORD + \" \" + \"i/1 o/12 August\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new VoteCommand(INDEX_FIRST, \"12 August\"), command);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_joinOption() throws Exception {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        DisplayPollCommand command \u003d (DisplayPollCommand) parser.parseCommand("
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                DisplayPollCommand.COMMAND_WORD + \" \" + \"1\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DisplayPollCommand(INDEX_FIRST), command);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_findEventByTime() throws Exception {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        FindEventByTimeCommand command \u003d (FindEventByTimeCommand) parser.parseCommand("
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                FindEventByTimeCommand.COMMAND_WORD + \" \" + \"d/12-12-2018 t1/12:30 t2/13:30\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDate date \u003d LocalDate.of(2018, 12, 12);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalTime startTime \u003d LocalTime.of(12, 30);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalTime endTime \u003d LocalTime.of(13, 30);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindEventByTimeCommand(date, startTime, endTime), command);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_findEvent() throws Exception {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d FindEventCommand.COMMAND_WORD + \" \" + NAME_DESC_MEETING + ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        FindEventCommand command \u003d (FindEventCommand) parser.parseCommand("
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                userInput);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        EventAttributesPredicate predicate \u003d FindEventCommandTest.makeEventsAttributesPredicate(userInput);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindEventCommand(predicate), command);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        AddUserCommand command \u003d (AddUserCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertEquals(new AddUserCommand(person), command);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public void parseCommandAddFriend() throws Exception {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        AddFriendCommand command \u003d (AddFriendCommand) parser.parseCommand("
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                AddFriendCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased()"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                        + StringUtil.COMMA + INDEX_SECOND.getOneBased());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertEquals(new AddFriendCommand(Index.fromOneBased(INDEX_FIRST.getOneBased(),"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                INDEX_SECOND.getOneBased())), command);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertTrue(parser.parseCommand(ClearUserCommand.COMMAND_WORD) instanceof ClearUserCommand);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertTrue(parser.parseCommand(ClearUserCommand.COMMAND_WORD + \" 3\") instanceof ClearUserCommand);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        DeleteUserCommand command \u003d (DeleteUserCommand) parser.parseCommand("
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                DeleteUserCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertEquals(new DeleteUserCommand(INDEX_FIRST), command);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        EditUserCommand command \u003d (EditUserCommand) parser.parseCommand(EditUserCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertEquals(new EditUserCommand(INDEX_FIRST, descriptor), command);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        FindUserCommand command \u003d (FindUserCommand) parser.parseCommand("
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                FindUserCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertEquals(new FindUserCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    public void parseCommand_findByPhone() throws Exception {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"98765432\", \"54321\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        FindByPhoneCommand command \u003d (FindByPhoneCommand) parser.parseCommand("
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "                FindByPhoneCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertEquals(new FindByPhoneCommand(new PhoneContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertTrue(parser.parseCommand(ListUserCommand.COMMAND_WORD) instanceof ListUserCommand);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertTrue(parser.parseCommand(ListUserCommand.COMMAND_WORD + \" 3\") instanceof ListUserCommand);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        SelectUserCommand command \u003d (SelectUserCommand) parser.parseCommand("
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                SelectUserCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased());"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertEquals(new SelectUserCommand(INDEX_FIRST), command);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yao-feng": 16,
      "agendazhang": 34,
      "-": 226
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteUserCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.logic.commands.personcommands.DeleteUserCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "agendazhang"
        },
        "content": " * outside of the DeleteUserCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "agendazhang"
        },
        "content": " * same path through the DeleteUserCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "public class DeleteUserCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    private DeleteUserCommandParser parser \u003d new DeleteUserCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteUserCommand(INDEX_FIRST));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteUserCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agendazhang": 7,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditUserCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import static seedu.address.commons.util.TimeTableUtil.INVALID_URL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SCHEDULE_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TIMETABLE_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SCHEDULE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SCHEDULE_UPDATE_DAY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SCHEDULE_UPDATE_TIME;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SCHEDULE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SCHEDULE_UPDATE;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMETABLE;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import static seedu.address.model.person.Schedule.INVALID_MESSAGE_SCHEDULE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import static seedu.address.model.person.Schedule.MESSAGE_SCHEDULE_CONSTRAINTS;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.logic.commands.personcommands.EditUserCommand;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.logic.commands.personcommands.EditUserCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "public class EditUserCommandParserTest {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditUserCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    private EditUserCommandParser parser \u003d new EditUserCommandParser();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertParseFailure(parser, \"1\", EditUserCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertParseFailure(parser, \"1 v/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_EMAIL_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_ADDRESS_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        EditUserCommand expectedCommand \u003d new EditUserCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        EditUserCommand expectedCommand \u003d new EditUserCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        EditUserCommand expectedCommand \u003d new EditUserCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        expectedCommand \u003d new EditUserCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        expectedCommand \u003d new EditUserCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        expectedCommand \u003d new EditUserCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        expectedCommand \u003d new EditUserCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        EditUserCommand expectedCommand \u003d new EditUserCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        EditUserCommand expectedCommand \u003d new EditUserCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        expectedCommand \u003d new EditUserCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        EditUserCommand expectedCommand \u003d new EditUserCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    public void parseScheduleUpdate() throws ParseException {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased()"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            + \" \" + PREFIX_SCHEDULE_UPDATE + \" \" + VALID_SCHEDULE_UPDATE_DAY + \" \" + VALID_SCHEDULE_UPDATE_TIME;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder()"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            .withUpdateSchedule(VALID_SCHEDULE_UPDATE_DAY, VALID_SCHEDULE_UPDATE_TIME).build();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        EditUserCommand expectedCommand \u003d new EditUserCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    public void parseSchedule() throws ParseException {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased()"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            + \" \" + PREFIX_SCHEDULE + \" \" + VALID_SCHEDULE;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder()"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            .withSchedule(VALID_SCHEDULE).build();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        EditUserCommand expectedCommand \u003d new EditUserCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    public void parseTimeTable() throws ParseException {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased()"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            + \" \" + PREFIX_TIMETABLE + \" \" + TIMETABLE_AMY;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder()"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            .withSchedule(SCHEDULE_AMY).build();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        EditUserCommand expectedCommand \u003d new EditUserCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    public void parseInvalidScheduleTimeTable() throws ParseException {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        assertParseFailure(parser, \"1 \""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            +"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            PREFIX_TIMETABLE + \" \" + \"http://asdajsdh.com\", INVALID_URL);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        assertParseFailure(parser, \"1 \""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            +"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            PREFIX_SCHEDULE + \" \" + \"000\", MESSAGE_SCHEDULE_CONSTRAINTS);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        assertParseFailure(parser, \"1 \""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            +"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            PREFIX_SCHEDULE_UPDATE + \" \" + \"mon 012\", INVALID_MESSAGE_SCHEDULE);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "adjscent": 59,
      "agendazhang": 21,
      "-": 196
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindByPhoneCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import seedu.address.logic.commands.personcommands.FindByPhoneCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import seedu.address.model.person.PhoneContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yao-feng"
        },
        "content": " * Parses input arguments and creates a new FindByPhoneCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yao-feng"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "public class FindByPhoneCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    private FindByPhoneCommandParser parser \u003d new FindByPhoneCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertParseFailure(parser, \"     \","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "                        FindByPhoneCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    public void parse_validArgs_returnsFindByPhoneCommand() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        FindByPhoneCommand expectedFindByPhoneCommand \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "                new FindByPhoneCommand(new PhoneContainsKeywordsPredicate(Arrays.asList(\"98765432\", \"98761111\")));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertParseSuccess(parser, \"98765432 98761111\", expectedFindByPhoneCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertParseSuccess(parser, \" \\n 98765432  \\t 98761111 \\n \\t\", expectedFindByPhoneCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yao-feng": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindUserCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.logic.commands.personcommands.FindUserCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "public class FindUserCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    private FindUserCommandParser parser \u003d new FindUserCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                FindUserCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        FindUserCommand expectedFindUserCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                new FindUserCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindUserCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindUserCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agendazhang": 9,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/LoginCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INTEREST_DESC_STUDY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import seedu.address.logic.commands.LoginCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "public class LoginCommandParserTest {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    private LoginCommandParser parser \u003d new LoginCommandParser();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                + ADDRESS_DESC_BOB + INTEREST_DESC_STUDY + TAG_DESC_FRIEND, new LoginCommand(expectedPerson));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                + ADDRESS_DESC_BOB + INTEREST_DESC_STUDY + TAG_DESC_FRIEND, new LoginCommand(expectedPerson));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                + ADDRESS_DESC_BOB + INTEREST_DESC_STUDY + TAG_DESC_FRIEND, new LoginCommand(expectedPerson));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                + ADDRESS_DESC_BOB + INTEREST_DESC_STUDY + TAG_DESC_FRIEND, new LoginCommand(expectedPerson));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                + ADDRESS_DESC_BOB + INTEREST_DESC_STUDY + TAG_DESC_FRIEND, new LoginCommand(expectedPerson));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                + TAG_DESC_HUSBAND + INTEREST_DESC_STUDY + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                new LoginCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                + INTEREST_DESC_STUDY, new LoginCommand(expectedPerson));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, LoginCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "                        + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, LoginCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yao-feng": 7,
      "agendazhang": 10,
      "-": 127
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/MaxScheduleCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "adjscent"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import seedu.address.logic.commands.MaxScheduleCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "adjscent"
        },
        "content": "public class MaxScheduleCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    private MaxScheduleCommandParser parser \u003d new MaxScheduleCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    public void parseEmptyArgthrowsParseException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        assertParseFailure(parser, \"     \","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, MaxScheduleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    public void parse_valid() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        Index[] index \u003d {INDEX_FIRST, INDEX_SECOND};"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        MaxScheduleCommand expectedMaxScheduleCommand \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            new MaxScheduleCommand(index);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        assertParseSuccess(parser, \"0 1\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            expectedMaxScheduleCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "adjscent"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "adjscent": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SelectUserCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.logic.commands.personcommands.SelectUserCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "agendazhang"
        },
        "content": " * Test scope: similar to {@code DeleteUserCommandParserTest}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "agendazhang"
        },
        "content": " * @see DeleteUserCommandParserTest"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "public class SelectUserCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    private SelectUserCommandParser parser \u003d new SelectUserCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsSelectCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertParseSuccess(parser, \"1\", new SelectUserCommand(INDEX_FIRST));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectUserCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agendazhang": 7,
      "-": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/eventparser/AddPollCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "//@@author theJrLinguist"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "package seedu.address.logic.parser.eventparser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.commands.eventcommands.AddPollCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.parser.eventparsers.AddPollCommandParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "public class AddPollCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private AddPollCommandParser parser \u003d new AddPollCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void parse_validArgs_returnsAddPollCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertParseSuccess(parser, \" n/Date poll\", new AddPollCommand(\"Date poll\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertParseFailure(parser, \"Date poll\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                AddPollCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theJrLinguist": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/eventparser/AddPollOptionCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "//@@author theJrLinguist"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "package seedu.address.logic.parser.eventparser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.commands.eventcommands.AddPollOptionCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.parser.eventparsers.AddPollOptionCommandParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "public class AddPollOptionCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private AddPollOptionCommandParser parser \u003d new AddPollOptionCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void parse_validArgs_returnsAddPollCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertParseSuccess(parser, \" i/1 o/12 August\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                new AddPollOptionCommand(TypicalIndexes.INDEX_FIRST, \"12 August\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertParseFailure(parser, \"1 o/12 August\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                AddPollOptionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theJrLinguist": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/eventparser/DeleteEventCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "//@@author theJrLinguist"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "package seedu.address.logic.parser.eventparser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.commands.eventcommands.DeleteEventCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.parser.eventparsers.DeleteEventCommandParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "public class DeleteEventCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private DeleteEventCommandParser parser \u003d new DeleteEventCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void parse_validArgs_returnsDeleteEventCommand() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteEventCommand(INDEX_FIRST));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                DeleteEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theJrLinguist": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/eventparser/DisplayPollCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "//@@author theJrLinguist"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "package seedu.address.logic.parser.eventparser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.commands.eventcommands.DisplayPollCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.parser.eventparsers.DisplayPollCommandParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "public class DisplayPollCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private DisplayPollCommandParser parser \u003d new DisplayPollCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void parse_validArgs_returnsJoinEventCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DisplayPollCommand(INDEX_FIRST));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DisplayPollCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theJrLinguist": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/eventparser/JoinEventCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "//@@author theJrLinguist"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "package seedu.address.logic.parser.eventparser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.commands.eventcommands.JoinEventCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.parser.eventparsers.JoinEventCommandParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "public class JoinEventCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private JoinEventCommandParser parser \u003d new JoinEventCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void parse_validArgs_returnsJoinEventCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertParseSuccess(parser, \"1\", new JoinEventCommand(INDEX_FIRST));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                JoinEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theJrLinguist": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/eventparser/SelectEventCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "//@@author theJrLinguist"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "package seedu.address.logic.parser.eventparser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.commands.eventcommands.SelectEventCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.parser.eventparsers.SelectEventCommandParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "public class SelectEventCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private SelectEventCommandParser parser \u003d new SelectEventCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void parse_validArgs_returnsSelectEventCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertParseSuccess(parser, \"1\", new SelectEventCommand(INDEX_FIRST));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                SelectEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theJrLinguist": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/eventparser/SetDateCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "//@@author theJrLinguist"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "package seedu.address.logic.parser.eventparser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.commands.eventcommands.SetDateCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.parser.eventparsers.SetDateCommandParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "public class SetDateCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private SetDateCommandParser parser \u003d new SetDateCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void parse_validArgs_returnsSetDateCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        LocalDate date \u003d LocalDate.of(2018, 3, 2);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertParseSuccess(parser, \" d/02-03-2018\", new SetDateCommand(date));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertParseFailure(parser, \" 02-03-2018\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                SetDateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void parse_invalidDateFormat_throwsParseException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertParseFailure(parser, \" d/2018-02-03\", String.format(Messages.MESSAGE_WRONG_DATE_FORMAT));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theJrLinguist": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/eventparser/SetTimeCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "//@@author theJrLinguist"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "package seedu.address.logic.parser.eventparser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.commands.eventcommands.SetTimeCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.parser.eventparsers.SetTimeCommandParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "public class SetTimeCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private SetTimeCommandParser parser \u003d new SetTimeCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void parse_validArgs_returnsSetDateCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        LocalTime startTime \u003d LocalTime.of(12, 00);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        LocalTime endTime \u003d LocalTime.of(13, 30);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertParseSuccess(parser, \" t1/12:00 t2/13:30\", new SetTimeCommand(startTime, endTime));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertParseFailure(parser, \" t/02-03-2018\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                SetTimeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void parse_invalidDateFormat_throwsParseException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertParseFailure(parser, \" t1/1200 t2/1300\", String.format(Messages.MESSAGE_WRONG_TIME_FORMAT));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theJrLinguist": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/eventparser/VoteCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "//@@author theJrLinguist"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "package seedu.address.logic.parser.eventparser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.commands.eventcommands.VoteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.logic.parser.eventparsers.VoteCommandParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "public class VoteCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private VoteCommandParser parser \u003d new VoteCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void parse_validArgs_returnsVoteCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertParseSuccess(parser, \" i/1 o/12 August\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                new VoteCommand(TypicalIndexes.INDEX_FIRST, \"12 August\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertParseFailure(parser, \"1 o/12 August\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                VoteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theJrLinguist": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import seedu.address.logic.commands.exceptions.NoUserLoggedInException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.hasPerson(null);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    public void hasSetCurrentUser_currentUserHasBeenSet_returnsTrue() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        modelManager.setCurrentUser(ALICE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertTrue(modelManager.hasSetCurrentUser());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    public void hasSetCurrentUser_currentUserHasNotBeenSet_returnsFalse() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertFalse(modelManager.hasSetCurrentUser());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    public void getCurrentUser_currentUserHasBeenSet() throws NoUserLoggedInException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        modelManager.setCurrentUser(ALICE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertTrue(modelManager.hasSetCurrentUser());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertEquals(ALICE, modelManager.getCurrentUser());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    public void getCurrentUser_currentUserHasNotBeenSet_throwsNoUserLoggedInException() throws NoUserLoggedInException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertFalse(modelManager.hasSetCurrentUser());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        thrown.expect (NoUserLoggedInException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        modelManager.getCurrentUser();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.getFilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns true"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yao-feng": 30,
      "-": 84
    }
  },
  {
    "path": "src/test/java/seedu/address/model/event/UniqueEventListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "//@@author theJrLinguist"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.MEETING;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.TUTORIAL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.event.exceptions.DuplicateEventException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.event.exceptions.EventNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.testutil.EventBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "public class UniqueEventListTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private final UniqueEventList uniqueEventList \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        uniqueEventList.contains(null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void contains_eventNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertFalse(uniqueEventList.contains(TUTORIAL));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void contains_eventInList_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        uniqueEventList.add(TUTORIAL);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertTrue(uniqueEventList.contains(TUTORIAL));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void contains_eventWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        uniqueEventList.add(TUTORIAL);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Event editedTutorial \u003d new EventBuilder(TUTORIAL).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertTrue(uniqueEventList.contains(editedTutorial));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void add_nullEvent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        uniqueEventList.add(null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void add_duplicateEvent_throwsDuplicateEventException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        uniqueEventList.add(TUTORIAL);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        thrown.expect(DuplicateEventException.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        uniqueEventList.add(TUTORIAL);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void setEvent_nullTargetEvent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        uniqueEventList.setEvent(null, TUTORIAL);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void setEvent_nullEditedEvent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        uniqueEventList.setEvent(TUTORIAL, null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void setEvent_targetEventNotInList_throwsEventNotFoundException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        thrown.expect(EventNotFoundException.class);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        uniqueEventList.setEvent(TUTORIAL, TUTORIAL);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void setEvent_editedEventIsSameEvent_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        uniqueEventList.add(TUTORIAL);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        uniqueEventList.setEvent(TUTORIAL, TUTORIAL);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        UniqueEventList expectedUniqueEventList \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        expectedUniqueEventList.add(TUTORIAL);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertEquals(expectedUniqueEventList, uniqueEventList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void setEvent_editedEventHasSameIdentity_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        uniqueEventList.add(TUTORIAL);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Event editedTutorial \u003d new EventBuilder(TUTORIAL).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        uniqueEventList.setEvent(TUTORIAL, editedTutorial);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        UniqueEventList expectedUniqueEventList \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        expectedUniqueEventList.add(editedTutorial);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertEquals(expectedUniqueEventList, uniqueEventList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void setEvent_editedEventHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        uniqueEventList.add(TUTORIAL);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        uniqueEventList.setEvent(TUTORIAL, MEETING);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        UniqueEventList expectedUniqueEventList \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        expectedUniqueEventList.add(MEETING);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertEquals(expectedUniqueEventList, uniqueEventList);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void setEvent_editedEventHasNonUniqueIdentity_throwsDuplicateEventException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        uniqueEventList.add(TUTORIAL);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        uniqueEventList.add(MEETING);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        thrown.expect(DuplicateEventException.class);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        uniqueEventList.setEvent(TUTORIAL, MEETING);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void remove_nullEvent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        uniqueEventList.remove(null);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void remove_eventDoesNotExist_throwsEventNotFoundException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        thrown.expect(EventNotFoundException.class);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        uniqueEventList.remove(TUTORIAL);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void remove_existingEvent_removesEvent() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        uniqueEventList.add(TUTORIAL);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        uniqueEventList.remove(TUTORIAL);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        UniqueEventList expectedUniqueEventList \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertEquals(expectedUniqueEventList, uniqueEventList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void setEvents_nullUniqueEventList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        uniqueEventList.setEvents((UniqueEventList) null);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void setEvents_uniqueEventList_replacesOwnListWithProvidedUniqueEventList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        uniqueEventList.add(TUTORIAL);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        UniqueEventList expectedUniqueEventList \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        expectedUniqueEventList.add(MEETING);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        uniqueEventList.setEvents(expectedUniqueEventList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertEquals(expectedUniqueEventList, uniqueEventList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void setEvents_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        uniqueEventList.setEvents((List\u003cEvent\u003e) null);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void setEvents_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        uniqueEventList.add(TUTORIAL);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        List\u003cEvent\u003e eventList \u003d Collections.singletonList(MEETING);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        uniqueEventList.setEvents(eventList);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        UniqueEventList expectedUniqueEventList \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        expectedUniqueEventList.add(MEETING);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertEquals(expectedUniqueEventList, uniqueEventList);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void setEvents_listWithDuplicateEvents_throwsDuplicateEventException() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        List\u003cEvent\u003e listWithDuplicateEvents \u003d Arrays.asList(TUTORIAL, TUTORIAL);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        thrown.expect(DuplicateEventException.class);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        uniqueEventList.setEvents(listWithDuplicateEvents);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        uniqueEventList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theJrLinguist": 185
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/LessonTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "adjscent"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "adjscent"
        },
        "content": "class LessonTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    void testMethods() throws ParseException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        Lesson lesson \u003d new Lesson(\"CS2103\", \"1\", \"LEC\", \"1\", \"1\", \"0800\", \"0900\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        lesson.getDayText();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        lesson.getStartTime();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        lesson.getEndTime();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        lesson.getDuration();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        lesson.getClassNo();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        lesson.getLessonType();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        lesson.getModuleCode();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        lesson.getWeekText();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        lesson.toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "adjscent"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "adjscent": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PhoneContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "public class PhoneContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"98765432\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"98765432\", \"98651111\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        PhoneContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "                new PhoneContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        PhoneContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "                new PhoneContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        PhoneContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "                new PhoneContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertFalse(firstPredicate \u003d\u003d null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    public void test_phoneContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        PhoneContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "                new PhoneContainsKeywordsPredicate(Collections.singletonList(\"98765432\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withPhone(\"98765432\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        predicate \u003d new PhoneContainsKeywordsPredicate(Arrays.asList(\"98765432\", \"98765432\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withPhone(\"98765432\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        predicate \u003d new PhoneContainsKeywordsPredicate(Arrays.asList(\"98765432\", \"98761111\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withPhone(\"98765432\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        // contains invalid keywords"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        predicate \u003d new PhoneContainsKeywordsPredicate(Arrays.asList(\"98765432\", \"Bob\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withPhone(\"98765432\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    public void test_givenKeywordsDoesNotMatchAnyPhone_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        // Non-matching phone number"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        PhoneContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "                new PhoneContainsKeywordsPredicate(Collections.singletonList(\"98765432\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        // Multiple phone numbers"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        predicate \u003d new PhoneContainsKeywordsPredicate(Arrays.asList(\"98765432\", \"98761111\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withPhone(\"98762222\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        // keyword is not a phone number"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        predicate \u003d new PhoneContainsKeywordsPredicate(Collections.singletonList(\"Hello%%World\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().build()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yao-feng": 80
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/ScheduleTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "adjscent"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SCHEDULE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "adjscent"
        },
        "content": "class ScheduleTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    private String emptyScheduleString \u003d \"0000000000000000000000\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        \"000000000000000000000000000000000000000000000000000\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        +"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        \"000000000000000000000000000000000000000000000000000\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        +"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        \"000000000000000000000000000000000000000000000000000\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        +"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        \"000000000000000000000000000000000000000000000000000\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        \"000000000000000000000000000000000000000000000000000\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        \"000000000000000000000000000000000000000000000000000\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        +"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        \"00000000\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Schedule(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    public void isValidSchedule() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        assertTrue(Schedule.isValidSchedule(VALID_SCHEDULE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    public void getTimeDay() throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        Schedule s \u003d new Schedule();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        assertFalse(s.getTimeDay(\"monday\", \"0100\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        assertFalse(s.getTimeDay(\"tuesday\", \"0100\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        assertFalse(s.getTimeDay(\"wednesday\", \"0100\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        assertFalse(s.getTimeDay(\"thursday\", \"0100\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        assertFalse(s.getTimeDay(\"friday\", \"0100\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        assertFalse(s.getTimeDay(\"saturday\", \"0100\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        assertFalse(s.getTimeDay(\"sunday\", \"0100\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e s"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            .setTimeDay(\"unknown\", \"0130\", true)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        );"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        assertFalse(s.getTimeDay(\"monday\", \"0130\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    public void setTimeDay() throws ParseException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        Schedule s \u003d new Schedule();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        s.setTimeDay(\"monday\", \"0100\", true);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        s.setTimeDay(\"monday\", \"0130\", true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e s"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "adjscent"
        },
        "content": "            .setTimeDay(\"unknown\", \"0130\", true)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        );"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    void valueToString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        Schedule s1 \u003d new Schedule();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        assertTrue(s1.valueToString().equals(emptyScheduleString));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        Schedule s2 \u003d new Schedule(emptyScheduleString);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        assertTrue(s2.valueToString().equals(emptyScheduleString));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    public void maxSchedule() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        Schedule s1 \u003d new Schedule();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        Schedule s2 \u003d new Schedule();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        s1.maxSchedule(s2);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        assertTrue(s1.valueToString().equals(s2.valueToString()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    public void xor() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        Schedule s1 \u003d new Schedule();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        Schedule s2 \u003d new Schedule();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        s1.xor(s2);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        assertTrue(s1.valueToString().equals(emptyScheduleString));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    void freeTimeToString() throws ParseException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        Schedule s1 \u003d new Schedule();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        s1.setTimeDay(\"monday\", \"1100\", true);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        s1.setTimeDay(\"monday\", \"0130\", true);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        String ft \u003d s1.freeTimeToString();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ft.contains(\"monday\"));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        String p \u003d s1.prettyPrint();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(p.contains(\"mon\"));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cSlot\u003e slots \u003d s1.getFreeSlotsByDay(\"monday\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(slots.size() \u003d\u003d 24 * 2 - 2);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "adjscent"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "adjscent": 100,
      "-": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/SlotTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "adjscent"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "adjscent"
        },
        "content": "class SlotTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    void testMethodsS() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        Slot slot \u003d new Slot();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        slot.setDay(\"tuesday\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        slot.setTime(\"0800\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        assertTrue (slot.getDay().equals(\"tuesday\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        assertTrue (slot.getTime().equals(\"0800\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "adjscent"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "adjscent": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/TimeTableTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "adjscent"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "adjscent"
        },
        "content": "class TimeTableTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TimeTable(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    void testMethods() throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        ArrayList\u003cLesson\u003e lessons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        lessons.add(new Lesson(\"CS2103\", \"1\", \"LEC\", \"1\", \"tuesday\", \"0800\", \"0900\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        lessons.add(new Lesson(\"CS2103\", \"1\", \"LEC\", \"1\", \"tuesday\", \"1100\", \"1230\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        TimeTable t \u003d new TimeTable(lessons);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        t.convertToSchedule();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        lessons \u003d t.getLessonList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        t.setLessonList(lessons);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "adjscent"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "adjscent": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAdaptedEventTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "//@@author theJrLinguist"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.storage.XmlAdaptedEvent.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.MEETING;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.MEETING_BUILDER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "public class XmlAdaptedEventTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private static final String INVALID_NAME \u003d \" \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    //add illegal values"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private static final String VALID_NAME \u003d MEETING.getName().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private static final String VALID_ADDRESS \u003d MEETING.getLocation().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d MEETING.getTags().stream()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private static final String VALID_DATE \u003d MEETING.getDate().toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private static final String VALID_START_TIME \u003d MEETING.getStartTime().toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private static final String VALID_END_TIME \u003d MEETING.getEndTime().toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private static final String VALID_ORGANISER \u003d \"0\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private static final List\u003cXmlPersonIndex\u003e VALID_PERSON_LIST \u003d new ArrayList\u003c\u003e(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private static final List\u003cXmlAdaptedPoll\u003e VALID_POLL_LIST \u003d MEETING.getPolls().stream()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            .map(XmlAdaptedPoll::new)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void initialise() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        ObservableList\u003cPerson\u003e personList \u003d TypicalPersons.getTypicalAddressBook().getPersonList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        XmlAdaptedEvent.setPersonList(personList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void toModelType_validEventDetails_returnsEvent() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Event event \u003d MEETING_BUILDER.withOrganiser(ALICE).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        XmlAdaptedEvent xmlEvent \u003d new XmlAdaptedEvent(event);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        assertEquals(event, xmlEvent.toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        XmlAdaptedEvent event \u003d new XmlAdaptedEvent(INVALID_NAME, VALID_ADDRESS, VALID_ORGANISER, VALID_DATE,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                VALID_START_TIME, VALID_END_TIME, VALID_TAGS, VALID_POLL_LIST, VALID_PERSON_LIST);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        XmlAdaptedEvent event \u003d new XmlAdaptedEvent(null, VALID_ADDRESS, VALID_ORGANISER, VALID_DATE,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                VALID_START_TIME, VALID_END_TIME, VALID_TAGS, VALID_POLL_LIST, VALID_PERSON_LIST);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        XmlAdaptedEvent event \u003d new XmlAdaptedEvent(VALID_NAME, INVALID_ADDRESS, VALID_ORGANISER, VALID_DATE,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                VALID_START_TIME, VALID_END_TIME, VALID_TAGS, VALID_POLL_LIST, VALID_PERSON_LIST);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_ADDRESS_CONSTRAINTS;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        XmlAdaptedEvent event \u003d new XmlAdaptedEvent(VALID_NAME, null, VALID_ORGANISER, VALID_DATE,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                VALID_START_TIME, VALID_END_TIME, VALID_TAGS, VALID_POLL_LIST, VALID_PERSON_LIST);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        XmlAdaptedEvent event \u003d new XmlAdaptedEvent(VALID_NAME, VALID_ADDRESS, VALID_ORGANISER, VALID_DATE,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "                VALID_START_TIME, VALID_END_TIME, invalidTags, VALID_POLL_LIST, VALID_PERSON_LIST);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, event::toModelType);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theJrLinguist": 99
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAdaptedPersonTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.XmlAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedPersonTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    private static final String INVALID_INTEREST \u003d \"#study\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    private static final List\u003cXmlAdaptedInterest\u003e VALID_INTERESTS \u003d BENSON.getInterests().stream()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            .map(XmlAdaptedInterest::new)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                new XmlAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                        VALID_INTERESTS, VALID_TAGS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(null, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                VALID_ADDRESS, VALID_INTERESTS, VALID_TAGS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                        VALID_INTERESTS, VALID_TAGS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, null, VALID_EMAIL,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                VALID_ADDRESS, VALID_INTERESTS, VALID_TAGS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                        VALID_INTERESTS, VALID_TAGS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, null,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                VALID_ADDRESS, VALID_INTERESTS, VALID_TAGS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                        VALID_INTERESTS, VALID_TAGS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_ADDRESS_CONSTRAINTS;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                VALID_INTERESTS, VALID_TAGS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public void toModelTypeInvalidInterestsThrowsIllegalValueException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        List\u003cXmlAdaptedInterest\u003e invalidInterests \u003d new ArrayList\u003c\u003e(VALID_INTERESTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        invalidInterests.add(new XmlAdaptedInterest(INVALID_INTEREST));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                        invalidInterests, VALID_TAGS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                        VALID_INTERESTS, invalidTags);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agendazhang": 34,
      "-": 100
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.logic.commands.personcommands.EditUserCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.model.interest.Interest;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import seedu.address.model.person.Schedule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(person.getAddress());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        descriptor.setInterests(person.getInterests());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * Parses the {@code interests} into a {@code Set\u003cInterest\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public EditPersonDescriptorBuilder withInterests(String... interests) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        Set\u003cInterest\u003e interestSet \u003d Stream.of(interests).map(Interest::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        descriptor.setInterests(interestSet);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * Sets the {@code Schedule} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * @param schedule"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    public EditPersonDescriptorBuilder withSchedule(String schedule) throws ParseException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        descriptor.setSchedule(new Schedule(schedule));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * Sets the {@code UpdateSchedule} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * @param validScheduleUpdateDay validScheduleUpdateTime"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    public EditPersonDescriptorBuilder withUpdateSchedule(String validScheduleUpdateDay, String validScheduleUpdateTime)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        throws ParseException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        Schedule updateSchedule \u003d new Schedule();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        updateSchedule.setTimeDay(validScheduleUpdateDay, validScheduleUpdateTime, true);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        descriptor.setUpdateSchedule(updateSchedule);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "adjscent": 27,
      "agendazhang": 13,
      "-": 86
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EventBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "//@@author theJrLinguist"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.event.Poll;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": " * A utility class to help with building Event objects."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "public class EventBuilder {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Tutorial\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"NUS UTown\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public static final String DEFAULT_TAG \u003d \"friends\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public static final String DEFAULT_POLL \u003d \"Date\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private Person organiser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private ArrayList\u003cPoll\u003e polls;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private UniquePersonList personList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private LocalTime startTime;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    private LocalTime endTime;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public EventBuilder() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        organiser \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        tags.add(new Tag(DEFAULT_TAG));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        polls \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        personList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        date \u003d LocalDate.of(2018, 1, 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        startTime \u003d LocalTime.of(12, 00);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        endTime \u003d LocalTime.of(13, 30);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * Initializes the EventBuilder with the data of {@code eventToCopy}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public EventBuilder(Event eventToCopy) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        name \u003d eventToCopy.getName();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        address \u003d eventToCopy.getLocation();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        organiser \u003d eventToCopy.getOrganiser();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(eventToCopy.getTags());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        polls \u003d new ArrayList\u003c\u003e(eventToCopy.getPolls());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        personList \u003d eventToCopy.getPersonList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        startTime \u003d eventToCopy.getStartTime();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        endTime \u003d eventToCopy.getEndTime();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        date \u003d eventToCopy.getDate();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * Sets the {@code Name} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public EventBuilder withName(String name) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Event} that we are building."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public EventBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * Sets the {@code Address} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public EventBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * Sets the {@code organiser} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public EventBuilder withOrganiser(Person person) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        this.organiser \u003d person;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * Adds a {@code poll} to the {@code Event} that we are building."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public EventBuilder withPoll() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        polls.add(new Poll(polls.size(), DEFAULT_POLL));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * Adds one person as a participant to the event."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public EventBuilder withParticipant() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        personList.add(new PersonBuilder().build());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * Builds an event."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public Event build() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        Event event \u003d new Event(name, address, tags);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        event.setDate(date);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        event.setTime(startTime, endTime);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        event.setOrganiser(organiser);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        event.setPolls(polls);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        event.setPersonList(personList);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        return event;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theJrLinguist": 126
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.model.interest.Interest;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "adjscent"
        },
        "content": "import seedu.address.model.person.Schedule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public static final String DEFAULT_INTERESTS \u003d \"study\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    public static final String DEFAULT_SCHEDULE \u003d \"0000000000000000000000\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        \"000000000000000000000000000000000000000000000000000\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        +"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        \"000000000000000000000000000000000000000000000000000\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        \"000000000000000000000000000000000000000000000000000\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        \"000000000000000000000000000000000000000000000000000\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        \"000000000000000000000000000000000000000000000000000\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        +"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        \"000000000000000000000000000000000000000000000000000\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        +"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        \"00000000\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    private Schedule schedule;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    private Set\u003cInterest\u003e interests;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        interests \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        interests.add(new Interest(DEFAULT_INTERESTS));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        schedule \u003d new Schedule(DEFAULT_SCHEDULE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        interests \u003d new HashSet\u003c\u003e(personToCopy.getInterests());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        schedule \u003d new Schedule(personToCopy.getSchedule().valueToString());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * Parses the {@code interests} into a {@code Set\u003cInterest\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public PersonBuilder withInterests(String... interests) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        this.interests \u003d SampleDataUtil.getInterestSet(interests);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * Sets the {@code Schedule} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    public PersonBuilder withSchedule(String schedule) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        this.schedule \u003d new Schedule(schedule);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Builds a person."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        return new Person(name, phone, email, address, interests, tags, schedule);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "adjscent"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * @param updateDay"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * @param updateTime"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "adjscent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    public PersonBuilder withUpdateSchedule(String updateDay, String updateTime) throws ParseException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        Schedule updateSchedule \u003d new Schedule();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        updateSchedule.setTimeDay(updateDay, updateTime, true);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        this.schedule.xor(updateSchedule);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "adjscent"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "adjscent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "adjscent": 43,
      "agendazhang": 14,
      "-": 96
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INTEREST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import seedu.address.logic.commands.LoginCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.personcommands.AddUserCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.logic.commands.personcommands.EditUserCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.model.interest.Interest;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "     * Returns an login command string for logging in the {@code person}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    public static String getLoginCommand(Person person) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        return LoginCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        return AddUserCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        person.getInterests().stream().forEach("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            s -\u003e sb.append(PREFIX_INTEREST + s.interestName + \" \")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        if (descriptor.getInterests().isPresent()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            Set\u003cInterest\u003e interests \u003d descriptor.getInterests().get();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            if (interests.isEmpty()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                sb.append(PREFIX_INTEREST);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                interests.forEach(s -\u003e sb.append(PREFIX_INTEREST).append(s.interestName).append(\" \"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yao-feng": 8,
      "agendazhang": 15,
      "-": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalEvents.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "//@@author theJrLinguist"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": " * A utility class containing a list of {@code Event} objects to be used in tests."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "public class TypicalEvents {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public static final Event TUTORIAL \u003d new EventBuilder().withName(\"Tutorial\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            .withAddress(\"NUS UTown\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            .withTags(\"friends\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public static final Event MEETING \u003d new EventBuilder().withName(\"Meeting\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            .withAddress(\"SOC Canteen\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            .withTags(\"friends\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public static final Event DINNER \u003d new EventBuilder().withName(\"Dinner\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            .withAddress(\"Arts Canteen\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            .withTags(\"friends\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public static final EventBuilder MEETING_BUILDER \u003d new EventBuilder().withName(\"Meeting\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            .withAddress(\"SOC Canteen\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            .withTags(\"friends\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public static final Event TUTORIAL_WITH_PERSON \u003d new EventBuilder().withName(\"Tutorial\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            .withAddress(\"NUS UTown\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            .withTags(\"friends\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            .withParticipant()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public static final Event MEETING_WITH_PERSON \u003d new EventBuilder().withName(\"Meeting\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            .withAddress(\"SOC Canteen\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            .withTags(\"friends\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            .withParticipant()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public static final Event DINNER_WITH_PERSON \u003d new EventBuilder().withName(\"Dinner\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            .withAddress(\"Arts Canteen\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            .withTags(\"friends\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            .withParticipant()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical events."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        for (Event event : getTypicalEvents()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            ab.addEvent(event);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * Retuns an empty address book."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public static AddressBook getEmptyAddressBook() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        return new AddressBook();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical events with one participant."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public static AddressBook getAddressBookWithParticipant() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        for (Event event : getEventsWithParticipants()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "            ab.addEvent(event);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public static List\u003cEvent\u003e getTypicalEvents() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(TUTORIAL, MEETING, DINNER));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    public static List\u003cEvent\u003e getEventsWithParticipants() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(TUTORIAL_WITH_PERSON, MEETING_WITH_PERSON, DINNER_WITH_PERSON));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "theJrLinguist"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theJrLinguist": 82
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INTEREST_STUDY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            .withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            .withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            .withInterests(\"study\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            .withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            .withEmail(\"johnd@example.com\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            .withPhone(\"98765432\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            .withInterests(\"study\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    public static final Person KENSON \u003d new PersonBuilder()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "            .withName(\"Kenson Meier\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "            .withEmail(\"kenson@example.com\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "            .withPhone(\"98765432\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "            .withInterests(\"study\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            .withPhone(\"95352563\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            .withPhone(\"87652533\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            .withPhone(\"9482224\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            .withPhone(\"9482427\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            .withPhone(\"9482442\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final PersonBuilder ALICE_BUILDER \u003d new PersonBuilder()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            .withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            .withInterests(\"study\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final PersonBuilder BENSON_BUILDER \u003d new PersonBuilder()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            .withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"98765432\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            .withInterests(\"study\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final PersonBuilder CARL_BUILDER \u003d new PersonBuilder().withName(\"Carl Kurz\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"95352563\")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final PersonBuilder DANIEL_BUILDER \u003d new PersonBuilder().withName(\"Daniel Meier\")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"87652533\")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final PersonBuilder ELLE_BUILDER \u003d new PersonBuilder().withName(\"Elle Meyer\")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"9482224\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final PersonBuilder FIONA_BUILDER \u003d new PersonBuilder().withName(\"Fiona Kunz\")"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"9482427\")"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final PersonBuilder GEORGE_BUILDER \u003d new PersonBuilder().withName(\"George Best\")"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"9482442\")"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\")"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            .withPhone(\"8482424\")"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\")"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            .withPhone(\"8482131\")"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            .withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withInterests(VALID_INTEREST_STUDY)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            .withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withInterests(VALID_INTEREST_STUDY)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    public static final Person CHARLIE \u003d new PersonBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            .withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    public static final String BENSON_AND_KENSON_PHONE \u003d \"98765432\"; // BENSON and KENSON\u0027s phone number"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    public static final String CARL_PHONE \u003d \"95352563\"; // CARL\u0027s phone number"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE_BUILDER.build(), BENSON_BUILDER.build(), CARL_BUILDER.build(),"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                DANIEL_BUILDER.build(), ELLE_BUILDER.build(), FIONA_BUILDER.build(), GEORGE_BUILDER.build()));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yao-feng": 10,
      "agendazhang": 37,
      "-": 93
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/CommandBoxTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.logic.commands.personcommands.ListUserCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBoxTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "    private static final String COMMAND_THAT_SUCCEEDS \u003d ListUserCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandBoxHandle commandBoxHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Logic logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(commandBox);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithSuccessfulCommand() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithFailedCommand() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify that style is changed correctly even after multiple consecutive failed commands"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_handleKeyPress() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.ESCAPE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.A);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithUp() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        //assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands (latest command is failure)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        String thirdCommand \u003d \"listUser\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, thirdCommand);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithDown() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that fails, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text remains \u003cbr\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForFailedCommand() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that succeeds, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text is cleared \u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForSuccessfulCommand() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(keycode);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommand, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agendazhang": 4,
      "-": 153
    }
  },
  {
    "path": "src/test/java/systemtests/AddUserCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INTEREST_DESC_STUDY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.personcommands.AddUserCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "public class AddUserCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Person toAdd \u003d AMY;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        String command \u003d \"   \" + AddUserCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                + INTEREST_DESC_STUDY + \"  \" + TAG_DESC_FRIEND + \" \";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "agendazhang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo adding Amy to the list -\u003e Amy deleted */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo adding Amy to the list -\u003e Amy added again */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except name -\u003e added */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        command \u003d AddUserCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                + INTEREST_DESC_STUDY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except phone and email"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add to empty address book -\u003e added */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ALICE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with tags, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d BOB;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        command \u003d AddUserCommand.COMMAND_WORD + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                + INTEREST_DESC_STUDY + TAG_DESC_HUSBAND + EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person, missing tags -\u003e added */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(HOON);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filters the person list before adding -\u003e added */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(IDA);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operation while a person card is selected --------------------------- */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(CARL);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person -\u003e rejected */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(HOON);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertCommandFailure(command, AddUserCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertCommandFailure(command, AddUserCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different email -\u003e rejected */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertCommandFailure(command, AddUserCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different address -\u003e rejected */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertCommandFailure(command, AddUserCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertCommandFailure(command, AddUserCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing name -\u003e rejected */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        command \u003d AddUserCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddUserCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing phone -\u003e rejected */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        command \u003d AddUserCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddUserCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing email -\u003e rejected */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        command \u003d AddUserCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddUserCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing address -\u003e rejected */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        command \u003d AddUserCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddUserCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        command \u003d AddUserCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        command \u003d AddUserCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        command \u003d AddUserCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        command \u003d AddUserCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        command \u003d AddUserCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * Executes the {@code AddUserCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddUserCommand} with the details of"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Person toAdd) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * @see AddUserCommandSystemTest#assertCommandSuccess(Person)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Person toAdd) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(toAdd);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddUserCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * @see AddUserCommandSystemTest#assertCommandSuccess(String, Person)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agendazhang": 33,
      "-": 218
    }
  },
  {
    "path": "src/test/java/systemtests/AddressBookSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.logic.commands.personcommands.ClearUserCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.logic.commands.personcommands.FindUserCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.logic.commands.personcommands.ListUserCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.logic.commands.personcommands.SelectUserCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class AddressBookSystemTest {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    protected AddressBook getInitialData() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanelHandle getPersonListPanel() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getPersonListPanel();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getBrowserPanel();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons in the address book."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showAllPersons() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        executeCommand(ListUserCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(getModel().getAddressBook().getPersonList().size(), getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showPersonsWithName(String keyword) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        executeCommand(FindUserCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selects the person at {@code index} of the displayed list."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void selectPerson(Index index) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        executeCommand(SelectUserCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes all persons in the address book."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void deleteAllPersons() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        executeCommand(ClearUserCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, getModel().getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same person objects as {@code expectedModel}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the person list panel displays the persons in the model correctly."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(expectedModel.getAddressBook()), testApp.readStorageAddressBook());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().rememberUrl();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().rememberSelectedPersonCard();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     * of the previously selected person."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().navigateToCard(getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getName();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedUrl;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUrl \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE), getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "                getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agendazhang": 8,
      "-": 279
    }
  },
  {
    "path": "src/test/java/systemtests/ClearUserCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.logic.commands.personcommands.ClearUserCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "public class ClearUserCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        final Model defaultModel \u003d getModel();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear non-empty address book, command with leading spaces and trailing alphanumeric characters and"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "         * spaces -\u003e cleared"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertCommandSuccess(\"   \" + ClearUserCommand.COMMAND_WORD + \" ab12   \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo clearing address book -\u003e original address book restored */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, defaultModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo clearing address book -\u003e cleared */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in person list and clears address book -\u003e cleared and no card selected */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertCommandSuccess(ClearUserCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filters the person list before clearing -\u003e entire address book cleared */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertCommandSuccess(ClearUserCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear empty address book -\u003e cleared */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertCommandSuccess(ClearUserCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * box displays {@code ClearUserCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertCommandSuccess(command, ClearUserCommand.MESSAGE_SUCCESS, new ModelManager());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * @see ClearUserCommandSystemTest#assertCommandSuccess(String)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agendazhang": 9,
      "-": 92
    }
  },
  {
    "path": "src/test/java/systemtests/DeleteUserCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import static seedu.address.logic.commands.personcommands.DeleteUserCommand.MESSAGE_DELETE_PERSON_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getPerson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.logic.commands.personcommands.DeleteUserCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "public class DeleteUserCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteUserCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void delete() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the first person in the list, command with leading spaces and trailing spaces -\u003e deleted */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        String command \u003d \"     \" + DeleteUserCommand.COMMAND_WORD + \"      \" + INDEX_FIRST.getOneBased() + \"       \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Person deletedPerson \u003d removePerson(expectedModel, INDEX_FIRST);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the last person in the list -\u003e deleted */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Model modelBeforeDeletingLast \u003d getModel();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Index lastPersonIndex \u003d getLastIndex(modelBeforeDeletingLast);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo deleting the last person in the list -\u003e last person restored */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo deleting the last person in the list -\u003e last person deleted again */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        removePerson(modelBeforeDeletingLast, lastPersonIndex);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the middle person in the list -\u003e deleted */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middlePersonIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(middlePersonIndex);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, delete index within bounds of address book and person list -\u003e deleted */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(index);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, delete index within bounds of address book but out of bounds of person list"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        command \u003d DeleteUserCommand.COMMAND_WORD + \" \" + invalidIndex;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------- Performing delete operation while a person card is selected ------------------------ */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the selected person -\u003e person list panel selects the person before the deleted person */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Index selectedIndex \u003d getLastIndex(expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(selectedIndex);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        command \u003d DeleteUserCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        deletedPerson \u003d removePerson(expectedModel, selectedIndex);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        command \u003d DeleteUserCommand.COMMAND_WORD + \" 0\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        command \u003d DeleteUserCommand.COMMAND_WORD + \" -1\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                getModel().getAddressBook().getPersonList().size() + 1);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        command \u003d DeleteUserCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertCommandFailure(DeleteUserCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertCommandFailure(DeleteUserCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the {@code Person} at the specified {@code index} in {@code model}\u0027s address book."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the removed person"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private Person removePerson(Model model, Index index) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Person targetPerson \u003d getPerson(model, index);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(targetPerson);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return targetPerson;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * Deletes the person at {@code toDelete} by creating a default {@code DeleteUserCommand} using {@code toDelete} and"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * @see DeleteUserCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Index toDelete) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        Person deletedPerson \u003d removePerson(expectedModel, toDelete);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                DeleteUserCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * @see DeleteUserCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agendazhang": 16,
      "-": 178
    }
  },
  {
    "path": "src/test/java/systemtests/EditUserCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.logic.commands.personcommands.EditUserCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "public class EditUserCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void edit() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        String command \u003d \" \" + EditUserCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + ADDRESS_DESC_BOB + \" \" + TAG_DESC_HUSBAND + \" \";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo editing the last person in the list -\u003e last person restored */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo editing the last person in the list -\u003e last person edited again */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updatePerson("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                getModel().getFilteredPersonList().get(INDEX_FIRST.getZeroBased()), editedPerson);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as existing values -\u003e edited */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        command \u003d EditUserCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, BOB);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different name -\u003e edited */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(getModel().getFilteredPersonList().get(index.getZeroBased()), BOB);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        command \u003d EditUserCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(BOB).withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different phone and email"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        command \u003d EditUserCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear tags -\u003e cleared */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        command \u003d EditUserCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(personToEdit).withTags().build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, edit index within bounds of address book and person list -\u003e edited */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        command \u003d EditUserCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(personToEdit).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson); // TODO error here"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, edit index within bounds of address book but out of bounds of person list"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertCommandFailure(EditUserCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------- Performing edit operation while a person card is selected -------------------------- */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in the person list, edit a person -\u003e edited, card selection remains unchanged but"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         * browser url changes"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(index);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        command \u003d EditUserCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // this can be misleading: card selection actually remains unchanged but the"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // browser\u0027s url is updated to reflect the new person\u0027s name"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, AMY, index);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertCommandFailure(EditUserCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditUserCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertCommandFailure(EditUserCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditUserCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertCommandFailure(EditUserCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing index -\u003e rejected */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertCommandFailure(EditUserCommand.COMMAND_WORD + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditUserCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing all fields -\u003e rejected */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertCommandFailure(EditUserCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased(),"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                EditUserCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertCommandFailure(EditUserCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                        + INDEX_FIRST.getOneBased() + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertCommandFailure(EditUserCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                        + INDEX_FIRST.getOneBased() + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertCommandFailure(EditUserCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                        + INDEX_FIRST.getOneBased() + INVALID_EMAIL_DESC, Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertCommandFailure(EditUserCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                        + INDEX_FIRST.getOneBased() + INVALID_ADDRESS_DESC, Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertCommandFailure(EditUserCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                        + INDEX_FIRST.getOneBased() + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values -\u003e rejected */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(PersonUtil.getAddCommand(BOB));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getModel().getFilteredPersonList().get(index.getZeroBased()).equals(BOB));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        command \u003d EditUserCommand.COMMAND_WORD + \" \" + index.getOneBased()"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertCommandFailure(command, EditUserCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        command \u003d EditUserCommand.COMMAND_WORD + \" \" + index.getOneBased()"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertCommandFailure(command, EditUserCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different address -\u003e rejected */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        command \u003d EditUserCommand.COMMAND_WORD + \" \" + index.getOneBased()"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertCommandFailure(command, EditUserCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        command \u003d EditUserCommand.COMMAND_WORD + \" \" + index.getOneBased()"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertCommandFailure(command, EditUserCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different email -\u003e rejected */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        command \u003d EditUserCommand.COMMAND_WORD + \" \" + index.getOneBased()"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertCommandFailure(command, EditUserCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Index, Person, Index)} except that"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     * the browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * @see EditUserCommandSystemTest#assertCommandSuccess(String, Index, Person, Index)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toEdit, editedPerson, null);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing {@code EditUserCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * updated to values specified {@code editedPerson}.\u003cbr\u003e"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * @see EditUserCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson,"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                String.format(EditUserCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     * browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "     * @see EditUserCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card update accordingly depending on the card at"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agendazhang": 53,
      "-": 255
    }
  },
  {
    "path": "src/test/java/systemtests/FindByPhoneCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON_AND_KENSON_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KENSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.logic.commands.personcommands.DeleteUserCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import seedu.address.logic.commands.personcommands.FindByPhoneCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "public class FindByPhoneCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    public void find() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        /* Case: find persons in address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "         * -\u003e 2 person found"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "         */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        String command \u003d \"   \" + FindByPhoneCommand.COMMAND_WORD + \" \" + BENSON_AND_KENSON_PHONE + \"   \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, KENSON); // BENSON and KENSON have the same phone number"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        /* Case: repeat previous find command where person list is displaying the persons we are finding"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "         * -\u003e 2 person found"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "         */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        command \u003d FindByPhoneCommand.COMMAND_WORD + \" \" + BENSON_AND_KENSON_PHONE;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        /* Case: find person where person list is not displaying the person we are finding -\u003e 1 person found */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        command \u003d FindByPhoneCommand.COMMAND_WORD + \" \" + CARL_PHONE;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CARL);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords with 1 repeat -\u003e 2 persons found */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        command \u003d FindByPhoneCommand.COMMAND_WORD + \" 98765432 98761111 98765432\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, KENSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        /* Case: find multiple persons in address book, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "         * -\u003e 3 persons found"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "         */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        command \u003d FindByPhoneCommand.COMMAND_WORD + \" 98765432 95352563 NonMatchingKeyWord\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, KENSON, CARL);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        /* Case: undo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        /* Case: redo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        /* Case: find same persons in address book after deleting 1 of them -\u003e 1 person found */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        executeCommand(DeleteUserCommand.COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertFalse(getModel().getAddressBook().getPersonList().contains(BENSON));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        command \u003d FindByPhoneCommand.COMMAND_WORD + \" \" + BENSON_AND_KENSON_PHONE;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, KENSON);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        /* Case: find person in address book, keyword is substring of phone -\u003e 0 persons found */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        command \u003d FindByPhoneCommand.COMMAND_WORD + \" 9876\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        /* Case: find person in address book, phone is substring of keyword -\u003e 0 persons found */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        command \u003d FindByPhoneCommand.COMMAND_WORD + \" 987654329\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        /* Case: find person not in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        command \u003d FindByPhoneCommand.COMMAND_WORD + \" 9\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        /* Case: find name of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        command \u003d FindByPhoneCommand.COMMAND_WORD + \" \" + BENSON.getName().fullName;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        /* Case: find address of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        command \u003d FindByPhoneCommand.COMMAND_WORD + \" \" + BENSON.getAddress().value;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        /* Case: find email of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        command \u003d FindByPhoneCommand.COMMAND_WORD + \" \" + BENSON.getEmail().value;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        /* Case: find tags of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(BENSON.getTags());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        command \u003d FindByPhoneCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        /* Case: find while a person is selected -\u003e selected card deselected */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertFalse(getPersonListPanel().getHandleToSelectedCard().getPhone().equals(BENSON.getPhone().value));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        command \u003d FindByPhoneCommand.COMMAND_WORD + \" 98765432\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        /* Case: find person in empty address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        command \u003d FindByPhoneCommand.COMMAND_WORD + \" \" + BENSON_AND_KENSON_PHONE;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        command \u003d \"FiNdByPhone 98765432\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yao-feng"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yao-feng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yao-feng": 183,
      "agendazhang": 2
    }
  },
  {
    "path": "src/test/java/systemtests/FindUserCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.DANIEL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.logic.commands.personcommands.DeleteUserCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.logic.commands.personcommands.FindUserCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "public class FindUserCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void find() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        String command \u003d \"   \" + FindUserCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: repeat previous find command where person list is displaying the persons we are finding"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        command \u003d FindUserCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person where person list is not displaying the person we are finding -\u003e 1 person found */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        command \u003d FindUserCommand.COMMAND_WORD + \" Carl\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CARL);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords -\u003e 2 persons found */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        command \u003d FindUserCommand.COMMAND_WORD + \" Benson Daniel\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords in reversed order -\u003e 2 persons found */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        command \u003d FindUserCommand.COMMAND_WORD + \" Daniel Benson\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords with 1 repeat -\u003e 2 persons found */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        command \u003d FindUserCommand.COMMAND_WORD + \" Daniel Benson Daniel\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        command \u003d FindUserCommand.COMMAND_WORD + \" Daniel Benson NonMatchingKeyWord\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find same persons in address book after deleting 1 of them -\u003e 1 person found */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        executeCommand(DeleteUserCommand.COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getModel().getAddressBook().getPersonList().contains(BENSON));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        command \u003d FindUserCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in address book, keyword is same as name but of different case -\u003e 1 person found */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        command \u003d FindUserCommand.COMMAND_WORD + \" MeIeR\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in address book, keyword is substring of name -\u003e 0 persons found */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        command \u003d FindUserCommand.COMMAND_WORD + \" Mei\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in address book, name is substring of keyword -\u003e 0 persons found */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        command \u003d FindUserCommand.COMMAND_WORD + \" Meiers\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person not in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        command \u003d FindUserCommand.COMMAND_WORD + \" Mark\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find phone number of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        command \u003d FindUserCommand.COMMAND_WORD + \" \" + DANIEL.getPhone().value;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find address of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        command \u003d FindUserCommand.COMMAND_WORD + \" \" + DANIEL.getAddress().value;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find email of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        command \u003d FindUserCommand.COMMAND_WORD + \" \" + DANIEL.getEmail().value;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find tags of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        command \u003d FindUserCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find while a person is selected -\u003e selected card deselected */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        command \u003d FindUserCommand.COMMAND_WORD + \" Daniel\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in empty address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        command \u003d FindUserCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"FiNd Meier\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agendazhang": 22,
      "-": 173
    }
  },
  {
    "path": "src/test/java/systemtests/HelpCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.logic.commands.personcommands.DeleteUserCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.logic.commands.personcommands.SelectUserCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.BrowserPanel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for the help window, which contains interaction with other UI components."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void openHelpWindow() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        //use accelerator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        getResultDisplay().click();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().click();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().click();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowNotOpen();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        //use menu button"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        //use command box"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // open help window and give it focus"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that while the help window is open the UI updates correctly for a command execution"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        executeCommand(SelectUserCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that the status bar too is updated correctly while the help window is open"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // note: the select command tested above does not update the status bar"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        executeCommand(DeleteUserCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void help_multipleCommands_onlyOneHelpWindowOpen() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, guiRobot.getNumberOfWindowsShown(HelpWindowHandle.HELP_WINDOW_TITLE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window is open, and closes it after checking."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowOpen() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window isn\u0027t open."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowNotOpen() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agendazhang": 4,
      "-": 103
    }
  },
  {
    "path": "src/test/java/systemtests/SelectUserCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import static seedu.address.logic.commands.personcommands.SelectUserCommand.MESSAGE_SELECT_PERSON_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "import seedu.address.logic.commands.personcommands.SelectUserCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "public class SelectUserCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the first card in the person list, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e selected"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        String command \u003d \"   \" + SelectUserCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased() + \"   \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, INDEX_FIRST);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the last card in the person list -\u003e selected */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Index personCount \u003d getLastIndex(getModel());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        command \u003d SelectUserCommand.COMMAND_WORD + \" \" + personCount.getOneBased();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, personCount);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous selection -\u003e rejected */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo selecting last card in the list -\u003e rejected */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the middle card in the person list -\u003e selected */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middleIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        command \u003d SelectUserCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the current selected card -\u003e selected */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, select index within bounds of address book but out of bounds of person list"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertCommandFailure(SelectUserCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, select index within bounds of address book and person list -\u003e selected */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Index validIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        command \u003d SelectUserCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, validIndex);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertCommandFailure(SelectUserCommand.COMMAND_WORD + \" \" + 0,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectUserCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertCommandFailure(SelectUserCommand.COMMAND_WORD + \" \" + -1,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectUserCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertCommandFailure(SelectUserCommand.COMMAND_WORD + \" \" + invalidIndex,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertCommandFailure(SelectUserCommand.COMMAND_WORD + \" abc\","
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectUserCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertCommandFailure(SelectUserCommand.COMMAND_WORD + \" 1 abc\","
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectUserCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select from empty address book -\u003e rejected */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "agendazhang"
        },
        "content": "        assertCommandFailure(SelectUserCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased(),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing select command with the"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex} of the selected person.\u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_SELECT_PERSON_SUCCESS, expectedSelectedCardIndex.getOneBased());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int preExecutionSelectedCardIndex \u003d getPersonListPanel().getSelectedCardIndex();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "agendazhang": 20,
      "-": 136
    }
  }
]
