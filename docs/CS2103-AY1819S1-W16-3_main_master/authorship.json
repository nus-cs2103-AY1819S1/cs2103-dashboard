[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "\u003d One Life"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "https://travis-ci.org/CS2103-AY1819S1-W16-3/main[image:https://travis-ci.org/CS2103-AY1819S1-W16-3/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "https://ci.appveyor.com/project/nelvintan/main[image:https://ci.appveyor.com/api/projects/status/c2o87jmgyqvj8n9i/branch/master?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "https://coveralls.io/github/CS2103-AY1819S1-W16-3/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103-AY1819S1-W16-3/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "* This is a desktop Address Book application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "* It is an application intended for medical professionals to accelerate their working processes."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "* Features include:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "** Quick and User-Friendly Patient \u0026 Doctor Management"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "*** Add/Edit/Delete a person\u0027s details"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "*** Instantly locate a person in the Database"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "** High Resistance to User Error"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "*** Undo/Redo Actions for all data modification commands"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "*** Display chronological history of user actions"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "* https://github.com/CS2103-AY1819S1-W16-3/main/blob/master/docs/UserGuide.adoc[User Guide]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "* https://github.com/CS2103-AY1819S1-W16-3/main/blob/master/docs/DeveloperGuide.adoc[Developer Guide]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "* https://github.com/CS2103-AY1819S1-W16-3/main/blob/master/docs/AboutUs.adoc[About Us]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "* https://github.com/CS2103-AY1819S1-W16-3/main/blob/master/docs/ContactUs.adoc[Contact Us]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "* Based off the AddressBook-Level4 project created by SE-EDU initiative at https://github.com/se-edu/."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "ngkangtze": 16,
      "guestuser0123": 3,
      "-": 21
    }
  },
  {
    "path": "_reposense/config.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "  \"authors\":"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "  ["
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \"githubId\": \"GaryGohYP\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \"displayName\": \"GARY ...IPENG\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \"authorNames\": [\"GaryGohYP\", \"DESKTOP-1NRGIML\\\\user\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    },"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \"githubId\": \"guestuser0123\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \"displayName\": \"KENNE... TECK\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \"authorNames\": [\"guestuser0123\", \"DESKTOP-DAUN7QD\", \"DESKTOP-DAUN7QD\\\\Kenneth\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    },"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \"githubId\": \"ngkangtze\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \"displayName\": \"NG KA...G TZE\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \"authorNames\": [\"ngkangtze\"]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    },"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \"githubId\": \"nelvintan\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \"displayName\": \"TAN T...ELVIN\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \"authorNames\": [\"nelvintan\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    },"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \"githubId\": \"tristonpang\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \"displayName\": \"TRIST... SYEN\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \"authorNames\": [\"tristonpang\", \"TRISTON-XPS15\\\\lawll\"]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 30
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "AddressBook - Level 4 was developed by the"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "https://github.com/CS2103-AY1819S1-W16-3/main/blob/master/docs/team/johndoe.adoc[W16-3] team. +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "_{The dummy content given below serves as a placeholder to be used by future forks of the project.}_ +"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "\u003d\u003d\u003d Joanne Ong"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "image::joanneong.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "{empty}[https://github.com/joanneong[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Role: Supervisor"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "\u003d\u003d\u003d Tan Thong Cai Nelvin"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "image::nelvintan.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "{empty}[https://github.com/nelvintan[github]] [\u003c\u003cnelvintan#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Responsibilities: Deliverables \u0026 deadlines, Scheduling \u0026 tracking"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "\u003d\u003d\u003d Triston Pang Erh Syen"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "image::tristonpang.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "{empty}[https://github.com/tristonpang[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Responsibilities: Integration"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "\u003d\u003d\u003d Ng Kang Tze"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "image::ngkangtze.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "{empty}[https://github.com/ngkangtze[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Responsibilities: Code Quality, JavaFX expert"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "\u003d\u003d\u003d Gary Goh Yi Peng"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "image::garygohyp.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "{empty}[https://github.com/garygohyp[github]] [\u003c\u003cgarygoh#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Responsibilities: Documentation"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "\u003d\u003d\u003d Kenneth Goh Jun Teck"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "image::guestuser0123.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "{empty}[https://github.com/guestuser0123[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Responsibilities: Testing"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "ngkangtze": 8,
      "GaryGohYP": 1,
      "-": 35,
      "nelvintan": 22
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/CS2103-AY1819S1-W16-3/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "* *Email us* : You can also reach us at"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "** Nelvin: `nelvintan [at] u.nus.edu`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "** Triston: `triston.pang [at] u.nus.edu`"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "** Kang Tze: `e0175352 [at] u.nus.edu`"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "** Gary: `e0148664 [at] u.nus.edu`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "** Kenneth: `e0202061 [at] u.nus.edu`"
      }
    ],
    "authorContributionMap": {
      "ngkangtze": 7,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d OneLife - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S1-W16-3/main"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "By: `Team W16-3`      Since: `Sep 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d Setting Up"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Listed below are the prerequites:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "** *JDK `9`* or later"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "** *IntelliJ* IDE"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Listed below are the steps to set up the project:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ". Fork this repo, and clone the fork to your computer."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ". Open IntelliJ. (If you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first.)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ". Set up the correct JDK version for Gradle."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ".. Click `New...` and find the directory of the JDK."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ". Click `Import Project`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ". Click `Open as Project`."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ". Click `OK` to accept the default settings."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ". Open link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson.java`] and link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow.java`] and check for any code errors."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ".. Due to an ongoing https://youtrack.jetbrains.com/issue/IDEA-189060[issue] with some of the newer versions of IntelliJ, code errors may be detected even if the project can be built and run successfully."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ".. To resolve this, place your cursor over any of the code section highlighted in red. Press kbd:[ALT + ENTER], and select `Add \u0027--add-modules\u003d...\u0027 to module compiler options` for each error."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ". Repeat this for the test folder as well. (E.g. check link:{repoURL}/src/test/java/seedu/address/commons/util/XmlUtilTest.java[`XmlUtilTest.java`] and link:{repoURL}/src/test/java/seedu/address/ui/HelpWindowTest.java[`HelpWindowTest.java`] for code errors, and if so, resolve it the same way.)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Listed below are the steps to verify the setup:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify, follow these steps:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ". Click on the `Imports` tab to set the order."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* For `Import Layout`: Change the import order to `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level4` repo."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level4`), you should do the following:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms. (Travis is Unix-based and AppVeyor is Windows-based.)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Listed below are some things to try when you are ready to start coding:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "** Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "** Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "The *_Architecture Diagram_* given below explains the high-level design of the App."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Given below is a quick overview of each component."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* At app launch: Initializing the components in the correct sequence, and connecting them up with each other."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* At shut down: Shutting down the components and invoking cleanup method where necessary."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events. (i.e. a form of _Event Driven_ design)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* `LogsCenter` : This class is used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Events-Driven nature of the design"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ".Component Interactions for `delete 1` Command (Part 1)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ".Component Interactions for `delete 1` Command (Part 2)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Given below is the structure of the UI component."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ".Structure of the `UI` Component"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "As shown in the figure above, the UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "* Responds to events raised from various parts of the App and updates the UI accordingly."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Shown below is the structure of the `Logic` component."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "As shown in the figure above, `Logic` uses the `AddressBookParser` class to parse the user command. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "The command execution can affect the `Model` (e.g. adding a person) and/or raise events."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Shown below is the structure of the `Model` component."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "As shown by the figure above, the `Model`,"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Shown below is the structure of the `Storage` component."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "As shown by the figure above, the `Storage` component,"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in xml format and read it back."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "This section describes the pros and cons of the current and other alternate implementations of undo \u0026 redo."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* **Alternative 1 (current choice):** Save the entire address book."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* **Alternative 2:** Use individual commands to undo/redo by itself."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "** Cons: Must ensure that the implementations of individual commands are correct."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "// tag::schedulecommand[]"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d\u003d Schedule command feature"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "The scheduling appointment mechanism is facilitated by `ScheduleCommandParser`, `ScheduleCommand`, `Appointment` and `AppointmentManager`."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "`ScheduleCommand` extends from `Command` and `ScheduleCommandParser` implements `Parser`."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "The key operation implemented is `ScheduleCommand#execute`."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Given below is an example usage scenario and how the schedule command mechanism behaves at each step."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Step 1. The user wants to schedule an appointment. User proceeds to fill in the details behind the respective prefixes."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "For example: `schedule 1 d/23.11.2018 st/1300 et/1400 dn/Jack di/S1234567B pn/John Doe pi/S1234567A`"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Step 2. The user executes the `ScheduleCommand` which calls the `ScheduleCommandParser`."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "`ScheduleCommandParser` will parse the inputs and return a `ScheduleCommand`."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Step 3. `ScheduleCommand` then executes."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "`ScheduleCommand` then conducts various checks sequentially to ensure that the appointment scheduled is valid."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "If it is invalid, an exception message will be thrown."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "The `Appointment` will not be scheduled."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "The order of checks conducted are displayed in the image below."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "image::AppointmentCheckingFlow.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Step 4. A successful check gives 2 objects, `personToEdit` and `Appointment` object."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Program creates another `Person` object called `editedPerson` that is equal to `personToEdit`."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "`ScheduleCommand` then adds `Appointment` to the `appointmentList` of `editedPerson`."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Lastly, `ScheduleCommand` replaces `personToEdit` with `editedPerson` in our model."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "image::ScheduleCommandStep4.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Step 5. `XmlAdaptedPerson` updates storage of `appointmentList`."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "The following sequence diagram shows how the schedule appointment operation works:"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "image::ScheduleSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "This section describes the pros and cons of the current and other alternate implementations of schedule."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Command for schedule command"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "* **Alternative 1 (current choice):** Take in the inputs for schedule appointment command using one prefix for each detail."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "For example: `schedule 1 d/23.11.2018 st/1300 et/1400 dn/Jack di/S1234567B pn/John Doe pi/S1234567A`"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "** Pros: Design is consistent with the other commands in the application."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "** Cons: Requires the user to type more when scheduling an appointment."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "* **Alternative 2:** Use a comma-separated long string in the command prompt to schedule an appointment."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "For example: `schedule 1 s/23.11.2018,1300,1400,Jack,S1234567B,John Doe,S1234567A`"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "** Pros: The user has to type less when scheduling a command."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "The user is not required to type all the prefixes, he just has to type one prefix, `s/`."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "** Cons: The design would not be consistent with the other commands."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "This might confuse the user."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Sorting of appointments"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "* **Alternative 1 (current choice):** Do not sort the appointments in the ArrayList of appointments."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "A new appointment is added to the back of the ArrayList."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "** Pros: Simple to check for appointment clashes."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "To check for appointment clashes, just loop through the ArrayList and check the new appointment against every other appointment."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "** Cons: Might not be the most efficient way."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "* **Alternative 2:** Sort the appointments in the ArrayList of appointments."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Maintain a sorted list of appointments based on the date and time of appointments."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "** Pros: Might be more efficient when checking for appointment clashes."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "We do not need to check our new appointment against all the appointments in the ArrayList."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "For example we can check from the last (latest) appointment down the list until a point where the next appointment comes before this appointment."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "At that point we can stop checking as we know that there will be no more clashes."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "** Cons: Efficiency gain when checking for clashes might be lost due to efficiency lost due to sorting being required."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "// end::schedulecommand[]"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "// tag::intuitivecommandprompt[]"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d\u003d Intuitive command prompt"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "The Intuitive Command Prompt feature is facilitated mainly by two classes: `IntuitivePromptManager`"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "and `IntuitiveEntryCommand`."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "`IntuitiveEntryCommand` extends `Command`, and represents the logic to be"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "executed when the user enters an input during the execution of an intuitive command. The `IntuitiveEntryCommand`"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "communicates with the `Model` interface in order to add an input into, or remove an input from the"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "`IntuitivePromptManager`."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "The `IntuitivePromptManager` exists to store the inputs entered by the user during the execution of an"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "intuitive command, and once all prompts or fields of the intuitive command have been filled, uses the stored inputs"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "to prepare a String that represents a non-intuitive command (e.g. `add n/NAME p/PHONE ...`) back to the"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "AddressBookParser in order to execute this command."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "`IntuitivePromptManager` has six public-access methods that allow the `Model` to communicate with it."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "They are the following:"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "* `IntuitivePromptManager#addArgument(input)`: takes in a string input and stores it as an argument"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "* `IntuitivePromptManager#removeArgument()`: removes the latest stored argument(s)"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "* `IntuitivePromptManager#getInstruction()`: retrieves the instruction or prompt to be shown to the user"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "(for the field that One Life is currently prompting the user for)"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "* `IntuitivePromptManager#retrieveArguments()`: prepares and returns the String that represents the non-intuitive"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "command, called when all fields have been filled"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "* `IntuitivePromptManager#isIntuitiveMode()`: checks if One Life is currently executing an intuitive command"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "* `IntuitivePromptManager#areArgsAvailable()`: checks if there are any arguments still being stored in the"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "`IntuitivePromptManager`"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "With the above operations in mind, below is an example usage scenario of how an intuitive command works at each step."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "We will be using the example of an intuitive `add` command."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Start of Intuitive Command"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "The intuitive command first needs to be triggered:"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "Step 1. User wishes to add a new patient. User types `add` into the command prompt and submits."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "Step 2. `AddressBookParser` parses the input and detects the `add` command word without any trailing arguments."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "Intuitive mode is triggered and a new `IntuitiveEntryCommand` is created."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "Step 3. `LogicManager` executes the `IntuitiveEntryCommand`."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "`IntuitiveEntryCommand` interfaces with `Model` to add and store the user\u0027s input"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "in the `IntuitivePromptManager`."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "Step 4. `Model` calls the `IntuitivePromptManager` to store the user\u0027s input as an argument. Since the user\u0027s"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "input is the `add` command word, the user\u0027s input is stored as a `commandWord` and the `IntuitivePromptManager`"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "triggers it\u0027s intuitive mode."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "Step 5. `Model` then calls the `IntuitivePromptManager` to retrieve the next prompt to be shown to the user."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "A String instruction representing the prompt to be shown is returned by `IntuitivePromptManager` and `Model` then"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "proceeds to return this String instruction to the executing `IntuitiveEntryCommand`."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "Step 6. `IntuitiveEntryCommand` uses the String instruction to create a new `CommandResult`, which is then returned"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "to the `LogicManager` to be displayed to the user."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "The following sequence diagram describes the above process:"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "image::IntuitiveCommandWordSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Middle of Intuitive Command"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "As the intuitive command has now started and is in the midst of execution, the system prompts the"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "user for an input for the next field:"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "Step 1. The system displays the instruction which prompts the user for the role of the person to be added."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "The user enters `patient` to indicate that the person added is a patient."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "Step 2-3. Remains the same as before with `patient` as the user\u0027s input."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "Step 4. `Model` calls the `IntuitivePromptManager` to store the user\u0027s input as an argument. Since the intuitive"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "command is already executing, the user\u0027s input is stored as an argument in the `arguments` list."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "The `currentArgIndex`, which allows the `IntuitivePromptManager` to determine the what field it should prompt for next"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "is incremented accordingly."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "image::IntuitiveInternalDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "Step 5-6. Remains the same."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d End of Intuitive Command"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "Once all fields have been filled by the user, the system will exit intuitive mode as follows:"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "Step 1-3. Remains the same. Take note that this is the last field that the user has to fill."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "Step 4. `Model` calls the `IntuitivePromptManager` to store the user\u0027s input as an argument. The input is"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "stored as an argument in the `arguments` list. The `IntuitivePromptManager` detects that this is the last"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "field required to be filled and calls `IntuitivePromptManager#exitIntuitiveMode()` to signal the end of"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "the intuitive command."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "Step 5. `Model` retrieves the next prompt from the `IntuitivePromptManager` but since there are no more"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "fields needing to be filled, `IntuitivePromptManager` returns a loading message to be displayed to the user,"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "to inform the user that the intuitive command is complete and the arguments provided by the user are being processed"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "Step 6. `LogicManager` detects that the intuitive command has exited and that there are arguments stored in the"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "`IntuitivePromptManager`. Using the `Model` interface, it requests to retrieve the arguments in the"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "`IntuitivePromptManager` as a String line (representing a non-intuitive command)."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "Step 7. This String line is passed into the `AddressBookParser` to be parsed. The sequence flow from here is"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "the same as if the user entered the non-intuitive version of the command."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "The following sequence diagram describes Step 6 and onwards."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "image::IntuitiveEndSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Going Back"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "The user has the ability to undo the inputs that he enters into each field. This is known as going back,"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "and is achieved when the user types `/bk`. The following usage scenario describes how this takes place:"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "Step 1. The user decides to undo his input for the previous field, and types `/bk`."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "Step 2. The system behaves as per normal as mentioned above, treating `/bk` as a normal input."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "Step 3. When `IntuitiveEntryCommand#execute()` is called, it detects that the input is the go back command"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "`/bk`. It calls `Model#removeIntuitiveEntry()` to remove the input filled into the latest field."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "Step 4. `Model#removeIntuitiveEntry()` calls `IntuitivePromptManager#removeArgument()`, and the"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "`IntuitivePromptManager` removes the input filled into the latest field, and decrements the `currentArgIndex`"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "as accordingly."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "Step 5. `Model` retrieves the instruction of the field indicated by the `currentArgIndex` of the"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "`IntuitivePromptManager`. Execution continues normally as described in the above sections."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "\u003d\u003d\u003d\u003d Supported Commands"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "The following commands are supported by the Intuitive Command Prompt feature, and thus have an intuitive version:"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "* `add`"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "* `delete`"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "* `find`"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "* `edit`"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "// end::intuitivecommandprompt[]"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "// tag::display doctor\u0027s availability"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003d\u003d\u003d Display doctor\u0027s current availability feature"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "The display of each doctor\u0027s current availability is facilitated by `PersonCard`, `Doctor`, `AppointmentManager`."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "Given below is an example usage scenario and how the information is generated and propagated to be displayed in the"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "`PersonCard` at the final stage."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "Step 1. The user launches the application for the first time. The `MainWindow` will be initialized and construct a"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "`PersonListPanel`."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "Step 2. The `PersonListPanel` will then construct a list of `PersonCard`."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "Step 3. Each `PersonCard` is associated with a person\u0027s particulars, be it a doctor or patient. In the event that"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " this `PersonCard` belongs to a doctor, it will call the method `Doctor#currentAvailStatus` to get information on"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " the doctor\u0027s current availability."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "Step 4. Upon calling the method `Doctor#currentAvailStatus`, a helper method in `AppointmentManager`, called"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "`AppointmentManager#isAnyAppointmentOngoing` will be executed."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "Step 5. `AppointmentManager` will then get the current locale time from Java\u0027s `ZoneDateTime` class and compare the"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "current time with all the scheduled appointments that the doctor has, and determines if the doctor is currently"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "available."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "Step 6. The status information generated in `AppointmentManager` will then be propagated back up to the `PersonCard`"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "which then sets a badge to reflect the availability status of that doctor."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "The following activity diagram summarizes what happens when a user launches the application:"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "image::DisplayDoctorAvailabilitySequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "This section describes the pros and cons of the current and other alternate implementations of the doctor\u0027s availability feature."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to display each doctor\u0027s availability"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "* **Alternative 1 (current choice):** A badge on each doctor\u0027s card display that shows his/her current availability."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "** Pros: Convenient for the user to refer to since the badge is always on the display."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "** Cons: Does not integrate any form of auto-updating nor is there any dedicated command to allow the user to refresh"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "the information, thus the information provided can be outdated."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "* **Alternative 2:** A separate command that the user can call upon to look up the current availability of each doctor."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "** Pros: Able to call this method repeatedly/when needed and will be provided with the latest information."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "** Cons: Have a separate command dedicated to this feature which may not be necessary and not as convenient as compared"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " to having a badge that is on the display at all times. Also this adds on to the list of commands"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " that the user has to get familiar with."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to update the status of each doctor\u0027s availability"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "* **Alternative 1 (current choice):** Updates the status/badge only on launch of application and when there is a"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "change in doctor\u0027s appointment."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "** Cons: Information is outdated aas it does not truly reflect the doctor\u0027s current availability."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "* **Alternative 2:** A function that will refresh the badge every few minutes."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "** Pros: Provides accurate information on the doctor\u0027s availability."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "** Cons: Affects the performance of the application due to this function continuously running in the background."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "// end::display doctor\u0027s availability"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "// tag::updatecommand[]"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d\u003d Update command feature"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "The updating medical record mechanism is facilitated by `UpdateCommandParser`, `UpdateCommand` and `MedicalRecord`."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "`UpdateCommand` extends from `Command` and `UpdateCommandParser` extends from `Parser`."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "The key operation implemented is `UpdateCommand#execute`."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Given below is an example usage scenario and how the update command mechanism behaves at each step."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Step 1. The user wants to update the medical record library of a `Patient`. User proceeds to fill in the details behind the respective prefixes."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "For example: `update 1 d/16.10.2018 dg/flu tr/tamiflu c/to be taken thrice a day`"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Step 2. The user executes the command which calls the `UpdateCommandParser`."
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "`UpdateCommandParser` will first parse the inputs and create a `MedicalRecord` with the given date, diagnosis, treatment and comment, and return an `UpdateCommand` with the new `MedicalRecord`."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "If no comment is given the default comment \"-\" is used."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Step 3. `UpdateCommand` will then be executed."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "`UpdateCommand` will first do the following checks on the user input to ensure that the command input was valid:"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Checks:"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "** Whether the index of input person is valid."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "** Whether the person specified by the index is a patient."
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "If it was invalid, an exception message will be thrown and the `MedicalRecord` will not be added into the patient\u0027s medical record library."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Step 4. If the checks are successful, all the attributes of the specified person will first be copied, including the existing medical record library of the specified `Patient`."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Step 5. The new `MedicalRecord` will be added into the copied medical record library which is an `ArrayList` of `MedicalRecord`. The new `MedicalRecord` is added to the front of the list and since the pointer for the latest medical record is always pointing to the first element, the latest medical record will be automatically updated."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "image::UpdateSequenceDiagramStep5.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Step 6. A new `Patient` is created with all the copied attributes and the updated medical record library."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Step 7. The existing `Patient` that was specified is updated to the newly created `Patient` in the model."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "The following sequence diagram shows how the update medical record operation works:"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "image::UpdateSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "This section describes the pros and cons of the current and other alternate implementations of updating medical records."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to store a patient\u0027s medical record library"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* **Alternative 1 (current choice):** Use an ArrayList of `MedicalRecord` as the patient\u0027s medical record library."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "** Pros: Easy to access the most recent record by retrieving the first `MedicalRecord` in the ArrayList."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "** Cons: Takes longer to retrieve the latest `MedicalRecord` before a specified date as each `MedicalRecord` has to be checked sequentially until the last `MedicalRecord` before the specified date is found."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* **Alternative 2:** Use a different data structure like a TreeMap of `MedicalRecord` as the value and date for the key as the patient\u0027s medical record library."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "** Pros: Retrieving the latest `MedicalRecord` before a specified date is made convenient by  just using the floor function already defined in the TreeMap API."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "** Cons: May be difficult to maintain the TreeSet for more complicated tasks like editing `MedicalRecord` since a new `MedicalRecord` has to be created and reinserted into the same location in the TreeSet."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "// end::updatecommand[]"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "// tag::findcommand[]"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d\u003d Find command feature"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "The find mechanism is facilitated by `FindCommand`, `FindCommandParser` and `PersonContainsKeywordPredicate`."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "`FindCommand` extends from `Command`, `FindCommandParser` implements `Parser` and `PersonContainsKeywordPredicate` implements `Predicate`."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "The key operation implemented is `FindCommand#execute`."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "Given below is an example usage scenario and how the find command mechanism behaves at each step."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "Step 1. The user wants to find all `Person` with `Name` Alex by executing `find Alex`."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "Step 2. `FindCommandParser` will parse the input and verify that is it valid before returning a `PersonContainsKeywordsPredicate`, which is passed into `FindCommand`."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "If there is no input after the \"find\" keyword, `IntuitiveEntryCommand` will be triggered, which will prompt the user to input search parameters."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "Step 3. `FindCommand` will then be executed."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "Step 4. `Model#updateFilteredPersonList()` will be called, which will update `Model` to show all `Person` that contains the searched parameter."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "The following activity diagram summarises what happens when a user launches the application:"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "image::FindSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to input search fields"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* **Alternative 1 (current choice):** Allow users to perform global search using any keywords."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "** Pros: Allows for a powerful search function by allowing the user to search through all `Person` attributes."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "** Cons: Users will not be able to filter the unwanted results."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "* **Alternative 2:** Allow the use of tags to specify certain fields if needed."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "** Pros: Allows for a more precise search."
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "** Cons: Increased inconvenience of having to tag search fields."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "// end::findcommand[]"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d\u003d Data encryption [proposed]"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d\u003d Editing documentation"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d\u003d Publishing documentation"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d\u003d Converting documentation to PDF format"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d\u003d Site-wide documentation settings"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Shown below is a list of site-wide attributes and a short description for each attribute."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d\u003d Per-file documentation settings"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Shown below is a list of per-file attributes and a short description for each."
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d\u003d Site template"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d\u003d Running tests"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`."
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`."
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* Open a console and run the command `gradlew clean allTests`. (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests`. (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d\u003d Troubleshooting testing"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d\u003d Build automation"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d\u003d Continuous integration"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d\u003d Coverage reporting"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d\u003d Documentation previews"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d\u003d Making a release"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d\u003d Managing dependencies"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "a. Include those libraries in the repo. (this bloats the repo size) +"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "b. Require developers to download those libraries manually. (this creates extra work for developers)"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Suggested Programming Tasks to Get Started"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "Suggested path for new programmers:"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": "1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": "2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-EachComponent]]"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Improving each component"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": "Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Logic` component"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": "** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the aliases that you have added."
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": "** Update the user guide to document the new aliases."
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Model` component"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": "** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": "** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": "**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": "** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the new public methods that you have added."
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Ui` component"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": ". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-before.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-after.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": "** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": "** Use the .css attribute `-fx-background-color` to add a color."
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": "** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": "** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": "*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-before.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-after.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": "** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": "** You can write two different kinds of tests to ensure that the functionality works:"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": "*** The unit tests for `ResultDisplay` can be modified to include verification of the color."
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": "*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": "*** Do read the commits one at a time if you feel overwhelmed."
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-before.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-after.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": "** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": "** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": "** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Storage` component"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": "* Hint"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": "** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlAddressBookStorage.java[`XmlAddressBookStorage`] class."
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-RemarkCommand]]"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Creating a new command: `remark`"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": "By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `appointment` field for each contact, rather than relying on tags alone. After designing the specification for the `appointment` command, you are convinced that this feature is worth implementing. Your job is to implement the `appointment` command."
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Description"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for a person specified in the `INDEX`. +"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `remark INDEX r/[REMARK]`"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/Likes to drink coffee.` +"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for the first person to `Likes to drink coffee.`"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/` +"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": "Removes the remark for the first person."
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Step-by-step Instructions"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/Command.java[`Command`]. Upon execution, it should just throw an `Exception`."
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandTest` that tests that `execute()` throws an Exception."
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": ". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027appointment\u0027 arguments"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Let\u0027s teach the application to parse arguments that our `appointment` command will accept. E.g. `1 r/Likes to drink coffee.`"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParserTest` that tests different boundary values"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": "for `RemarkCommandParser`."
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for appointment in `PersonCard`"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a appointment for each person later."
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": ". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the appointment label."
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "We have to properly encapsulate the appointment in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "-"
        },
        "content": ". Add test for `Remark`, to test the `Remark#equals()` method."
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "-"
        },
        "content": "Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a appointment)."
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `addressBook.xml` so that the application will load the sample data when you launch it.)"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedPerson` class"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "-"
        },
        "content": "We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson`] to include a `Remark` field so that it will be saved."
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new Xml field for `Remark`."
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ". Fix `invalidAndValidPersonAddressBook.xml`, `typicalPersonsAddressBook.xml`, `validAddressBook.xml` etc., such that the XML tests will not fail due to a missing `\u003cappointment\u003e` element."
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "-"
        },
        "content": "Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "-"
        },
        "content": ". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Our appointment label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `appointment` field."
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s appointment."
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning appointment label."
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `appointment` command."
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "-"
        },
        "content": ". Update `RemarkCommandTest` to test that the `execute()` logic works."
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Full Solution"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "-"
        },
        "content": "See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "* has a need to manage a significant number of patients"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "* is reasonably comfortable using CLI applications"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "* works in the hospital"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "* has a need to retrieve patient information promptly"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "Value proposition: manage contacts faster than a typical mouse/GUI driven application"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Shown below are the user stories collected and used to conceptualize the features of OneLife."
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "|`* * *` |user |be able to create a patient profile |"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "|`* * *` |user |add to look up existing patient profiles |"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "|`* * *` |user |update existing patient profiles |"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "|`* * *` |careless user |delete an existing patient profile|remove a profile that was accidentally created"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "|`* * *` |new user |be able to refer to a helplist of commands |quickly learn how to use the software"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "|`*` |expert user |be able to use shortcuts to access data |speed up my processes"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "|`* * *` |user |be able to accurately obtain data of a specific patient when the dataset is large (people of the same name) |prevent any accidental misdiagnosis"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "|`*` |user |be able to look up a patient based on one or more attributes |"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "|`*` |user |be able to pin command(s) at the top of my screen |easily refer to those that I am interested in"
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "|`* *` |user |be able to hide patient details |protect the personal details of certain patients"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "|`* * *` |careless user |be able to undo recent changes or deletion |recover patients\u0027 profiles in the event of a mistake"
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "|`* *` |user |be able to tag patients with VIP status |keep track of high profile patients and allocate necessary resources"
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "|`* *` |user |be able to check if a drug will cause an allergic reaction |prescribe medication to a patient safely"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "|`*` |user |check if a drug will cause an allergic reaction |"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "|`*` |user |add a appointment for a patient |record down anything that doesn\u0027t fall in given categories"
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "|`*` |user |check the countries a patient has been to in the last few weeks |check for any diseases contracted from overseas"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "|`* * *` |user |group patients by a particular attribute |"
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "|`*` |expert user |be able to use shortcuts for commands (e.g. \"d\" instead of \"delete\") |save time typing long commands"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "|`* *` |less IT-savvy user |be able to use more user friendly/natural language commands |can understand the data entry and retrieval process intuitively"
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "|`* *` |less IT-savvy user |see the CLI as a chat |typing in commands will feel more intuitive"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "-"
        },
        "content": "(For all use cases below, the *System* is the `AddressBook` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "\u003d\u003d\u003d Use case: Display and Schedule data and time of medical appointments"
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "1.  User requests to view all medical appointments or appointments on a specific day."
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "2.  AddressBook shows a list of all appointments."
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "3.  User requests to appointment a patient at a specific date and time."
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "4.  AddressBook updates appointment details in database."
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "5.  AddressBook shows the appointments details to the user."
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* 3a. Patient is not in database."
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "** 3a1. AddressBook warns user that patient is not in database."
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "+"
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* 4a. Appointment clashes with another appointment."
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "** 4a1. AddressBook warns user of appointment clash."
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "+"
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "\u003d\u003d\u003d Use case: Intuitive Command Prompting"
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "1.  User enters in command that takes in in arguments without any specified arguments. (e.g. add, delete)"
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "2.  AddressBook shows instructions to guide user."
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "3.  User responds to instructions with respective answers/inputs."
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "4.  AddressBook performs command for user and echoes changes made to user."
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* 1a. User enters unrecognised command."
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "** 1a1. AddressBook shows error message and shows list of available commands."
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* 3a. User accidentally enters wrong data when prompted by instruction."
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "** 3a1. User follows instruction to return to previous instruction/undo. (e.g. type /bk)"
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Use case resumes at step 3."
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "\u003d\u003d\u003d Use case: Viewing and updating medical history"
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "1.  User requests to view medical history of a particular patient at a specific date."
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "2.  AddressBook displays medical history of the patient."
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "3.  User requests to update medical history."
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "4.  AddressBook updates patient medical history in database using current date."
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "5.  AddressBook displays success message."
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "+"
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* 1a. Patient is not in database."
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "** 1a1. AddressBook warns user that patient is not in database."
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "+"
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* 1b. No specified date."
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "** 1b1. AddressBook displays most recent medical history."
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "+"
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Use case resumes at step 3."
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "\u003d\u003d\u003d Use case: Add and display doctors\u0027 profile"
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "1.  User adds new doctor to the database."
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "2.  Addressbook shows success message."
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "3.  User requests to display all doctors."
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "4.  Addressbook displays all doctors’ information and indicates their current availability."
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "+"
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* 1a. User does not specify the doctor’s medical speciality."
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "** 1a1. Addressbook prompts user of insufficient information."
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* 1b. Similar name already exists in the same medical department."
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "** 1b1. Addressbook prompts user that similar name already exists."
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "+"
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "Use case resumes at Step 1."
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "\u003d\u003d\u003d Use case: Displays a specific doctor’s appointment"
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "1.  User requests to view the appointment of a particular doctor."
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "2.  Addressbook displays appointment of the specified doctor. (In ascending chronological order)"
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "+"
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* 1a. User inputs wrong/invalid doctor’s name or medical department."
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "** 1a1. Addressbook informs user that there is no doctor with the name and/or medical department specified by the user."
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "+"
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* 1b. User does not specify doctor’s name."
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "** 1b1. Addressbook informs use that no doctor was specified."
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "+"
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* 1c. User enters a doctor whose name appears in more than 1 medical department."
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "** 1c1. Addressbook displays to user that there are more than 1 Dr [name] detected."
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "** 1c2. Addressbook requests user to re-enter input and indicate the doctor’s medical department as well."
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "+"
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Use case resumes from Step 1."
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "\u003d\u003d\u003d Use case: Find patients by any keywords"
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "1.  User requests to find patients by tag."
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "2.  Addressbook lists all users with that tag."
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "* 1a. There are no users with that tag."
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "** 1a1. Addressbook returns an empty list of patients."
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "**  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "**  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "**  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d\u003d Launch and shutdown"
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1461,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ".. Download the jar file and copy into an empty folder."
      },
      {
        "lineNumber": 1462,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ".. Double-click the jar file. +"
      },
      {
        "lineNumber": 1463,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1465,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1467,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1468,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1469,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1471,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1473,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 1474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1475,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 1476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1477,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 1478,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1479,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1480,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1481,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1482,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1483,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1484,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1485,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1486,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1487,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1488,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1489,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1491,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1492,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1493,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "ngkangtze": 33,
      "tristonpang": 253,
      "guestuser0123": 56,
      "GaryGohYP": 210,
      "-": 859,
      "nelvintan": 82
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d OneLife - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level4"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "By: `Team W16-3`      Since: `Sep 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "OneLife (OL) is designed for service providers in the healthcare industry who *prefer to use a desktop application for"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "managing patient and doctor information*. More importantly, OneLife is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you prefer typing, OneLife can get your medical information management tasks done faster than traditional GUI apps. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Listed below are instructions to help you get started:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".  Download the latest `addressbook.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ".  Copy the file into the folder you want to use as the home folder for OneLife."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ".  Double-click the file to start the app. The GUI (as shown in Figure 1 below) should appear in a few seconds."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "image::UserGuide_Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "E.g. typing *`help`* and pressing kbd:[Enter] will open the help window. +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Some example commands you can try:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "* *`list`* : lists all contacts."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* **`add`**`r/patient n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 ic/S9601234A` : adds a patient named `John Doe` to the database."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "* **`delete`**`3` : deletes the 3rd contact shown in the current list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "* *`exit`* : exits the app."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Opens user guide. +"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Adding a person: `add`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Adds a patient or doctor to the database. +"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "*Adding a patient* +"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "Format: `add r/patient n/NAME ic/NRIC p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "*Adding a doctor* +"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "Format: `add r/doctor n/NAME ic/NRIC p/PHONE_NUMBER e/EMAIL a/ADDRESS md/MEDICAL_DEPARTMENT [t/TAG]...`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "A person can have any number of tags (including 0)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "* `add r/patient n/John Doe Xiao Huang ic/S1234567A p/98765432 e/johnd@example.com a/John street, block 123, #01-01"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "t/Hokkien-speaker`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "* `add r/doctor n/Betsy Crowe ic/S8234567F e/betsycrowe@example.com a/Newgate Estates p/1234567 md/dentistry`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "When adding a new doctor you are required to specify his/her medical department."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003d\u003d\u003d Listing all relevant personnel : `list`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "Shows a list of all of the people in the database. +"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "Format: `list [r/ROLE]`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "Lists all doctors and patients in the database."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "* `list r/patient` +"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "Lists all patients in the database."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "* `list r/doctor` +"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "Lists all the doctors in the database."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing a person : `edit`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "Edits an existing person in the database. +"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "Format: `edit INDEX [n/NAME] [ic/NRIC] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]...`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "* Edits the person at the specified `INDEX`. The index refers to the index number shown in the displayed patient list."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* You can remove all the person\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "* `edit 1 p/91234567 e/johndoe@example.com` +"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "* `edit 2 n/Betsy Crower t/` +"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003d\u003d\u003d Locating person by any attribute: `find`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "Finds people with the keywords specified by the user within specific fields"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "(i.e. `Name`, `Phone`, `Address`, `Tag` etc). +"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `find [PREFIX] KEYWORDS [NEXT_PREFIX] [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "If no `Prefix` is given, the search will be performed on all attributes. This means that the user can perform both"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "a global search and a specific search by entering keywords directly after `find` but before the first `Prefix`."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* The search is case-insensitive. e.g. `nelvin` will match `Nelvin`."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "* When performing a global search, keywords are seperated by whitespace and any `Person` whose attributes contain any"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "keyword will be returned. e.g. `find kang ken` will display `Kang Tze`, `Kenneth` and all `Person` with `Address` `Choa Chu Kang`."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "* When performing specific search, `Person` must contain the searched keywords exactly in order to be displayed."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "e.g `find n/Gary Goh` will display `Gary Goh Yipeng` but not `Kenneth Goh Jun Teck`."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* When performing the `find` command with more than one search field, all `Person` matching at least one search field"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "will be displayed. e.g. `find n/Gary a/Kang` will display `Gary Goh Yipeng` and all `Person` whose `Address` is"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "`Choa Chu Kang`."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* `find Goh` +"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "Displays `Gary Goh Yipeng` and `Kenneth Goh Jun Teck`."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "* `find n/Tan a/Kang` +"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "Displays `Nelvin Tan` and all `Person` whose `Address` is `Choa Chu Kang`."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person : `delete`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "Deletes the specified person from the database. +"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "* Deletes the person at the specified `INDEX`."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "Deletes the 2nd person in the database."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Selecting a person : `select`"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the person identified by the index number used in the displayed person list. +"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `select INDEX`"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "* Selects the person and loads the details of the person at the specified `INDEX`."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "`select 2` +"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "Selects the 2nd person in the database."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "`select 1` +"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Selects the 1st patient in the results of the `find` command."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing entered commands : `history`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undoing previous command : `undo`"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Restores the database to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Undoable commands: those commands that modify the database\u0027s content (`add`, `delete`, `edit` and `clear`)."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "* `select 1` +"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Redoing the previously undone command : `redo`"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Clears all entries from the database. +"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "// tag::displayappt[]"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "\u003d\u003d\u003d Displaying medical appointments : `select`"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Displays a list of medical appointments that are currently scheduled for the specified person. +"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Format: `select INDEX`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "****"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "* Selects the person and loads the appointment list of the person at the specified `INDEX`."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "* Index is the position of the person selected from the person card list."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "* The index *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "* Appointment List will be displayed on the top right of the screen as shown in figure below."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "****"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "* `list` (result shown in Figure 1) +"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "`select 2` (result shown in Figure 2) +"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Selects the 2nd person in the database and display the appointments."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ".Display list diagram"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "image::ListCommand.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ".Display appointment diagram"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "image::DisplayAppointment.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "`select 1` +"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Selects the 1st patient in the results of the `find` command and display the appointments."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "// end::displayappt[]"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "// tag::schedule[]"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "\u003d\u003d\u003d Scheduling medical appointments : `schedule`"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Schedules a patient/doctor for a medical appointment at a specific date and time. +"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Format: `schedule INDEX d/DATE st/START_TIME et/END_TIME dn/DOCTOR_NAME di/DOCTOR_NRIC pn/PATIENT_NAME pi/PATIENT_NRIC`"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "****"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "* Date is formatted as DD.MM.YYYY and is dot separated e.g.  `7.11.1996` is the 7th of November 1996"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "* Time uses the 24-hour clock time e.g. `1300` is 1pm"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "* Doctor name is the doctor\u0027s full name e.g. `John Doe`"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "* Doctor nric is the doctor\u0027s nric e.g. `S1234567B`"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "* Patient name is the patient\u0027s full name e.g. `Kim Tan`"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "* Patient nric is the patient\u0027s nric e.g. `S1234567A`"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "****"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "* `schedule 1 d/23.11.2018 st/1300 et/1400 dn/Jack di/S1234567B pn/John Doe pi/S1234567A` +"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Schedules `John Doe` for an appointment with doctor `Jack` on the 23nd of November 2018 from"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " 1pm to 2pm."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "* An example of a successful schedule is shown below."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ".Successful schedule diagram"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "image::ScheduleSuccess.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "* An example of an unsuccessful schedule is shown below."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ".Unsuccessful schedule diagram"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "image::ScheduleFailure.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "// end::schedule[]"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "// tag::displaymr[]"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d\u003d Viewing medical records of patients : `select`"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Displays all the medical records of the specified person. +"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Format: `select INDEX`"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "****"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* Index is the position of the person selected from the person card list."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* The index *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "****"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* `select 1` +"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Displays the medical records of the first person on the displayed list as shown by the figure below."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ".Displaying medical records"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "image::DisplayMedicalRecords.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "// end::displaymr[]"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "// tag::update[]"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d\u003d Updating medical records of patients : `update`"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Adds a new medical record for the patient as the most updated record using the current date as date of record. +"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Format: `update INDEX d/DATE dg/DIAGNOSIS tr/TREATMENT [c/COMMENTS]`"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "****"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* Date is formatted as DD.MM.YYYY and is dot separated e.g.  `7.11.1996` is the 7th of November 1996."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* The index *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* Comments are optional."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "****"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "If no comments are specified, \"-\" will be displayed on the medical record."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* `update 1 d/31.10.2018 dg/flu tr/tamiflu` +"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Updates the medical records of the patient at index 1 with the given date, diagnosis and treatment without any comments as shown by the figure below."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ".Updating records without comments"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "image::UpdateCommandWithoutCommentSuccess.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* `update 1 d/31.10.2018 dg/flu tr/tamiflu c/To be taken thrice a day after meals.` +"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Updates the medical records of the patient at index 1 with the given date, diagnosis, treatment and comments as shown by the figure below."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ".Updating records with comments"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "image::UpdateCommandWithCommentSuccess.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "// end::update[]"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "OneLife data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "\u003d\u003d\u003d Intuitive command prompting"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "Provides a more natural way of entering commands into OneLife. OneLife will prompt the user for the next required"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "input - no prefixes are required."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "Commands that support intuitive prompting:"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "****"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "* `add`"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "* `delete`"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "* `edit`"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "* `find`"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "****"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "Format: `COMMAND`"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "Type `/bk` to re-enter previous field. +"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "Type `//` if the field is to be left blank. +"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "Press `ESC` to cancel the currently executing command."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "Example of the intuitive add command prompting:"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "```"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "add"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "You entered: add"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Is this a patient or a doctor? (Please enter patient or doctor)"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "patient"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "You entered: patient"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Please enter person\u0027s name"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "..."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "```"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "_{explain how the user can enable/disable data encryption}_"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous OneLife folder."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "* *Add Patient* : `add r/patient n/NAME ic/NRIC p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...` +"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "e.g. `add r/patient n/James Ho ic/S1234567A p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "t/colleague`"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "* *Add Doctor* : `add r/doctor n/Bobby Tan ic/S1234567B p/91234567 e/BBTan@example.com a/123, Clementi Rd, 123456"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "md/Dentistry`"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "* *Delete* : `delete INDEX` +"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `delete 3`"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "* *Edit* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]...` +"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `edit 2 n/James Lee e/jameslee@example.com`"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `find James Jake`"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "* *List People* : `list`"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "* *Select* : `select INDEX` +"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "e.g.`select 2`"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "* *History* : `history`"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "* *Redo* : `redo`"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "* *Display Medical Appointments* : `display INDEX`"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "* *Schedule Medical Appointments* : `schedule INDEX d/DATE st/START_TIME et/END_TIME dn/DOCTOR_NAME pi/DOCTOR_NRIC pn/PATIENT_NAME pi/PATIENT_NRIC` +"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "e.g. `schedule 1 d/23.11.2018 st/1300 et/1400 dn/Jack md/Heart pn/John Doe ic/S1234567A`"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* *View Medical Records* : `records n/NAME [d/DATE]`"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* *Update Medical Records* : `update INDEX d/DATE dg/DIAGNOSIS tr/TREATMENT c/COMMENTS +"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "e.g. `update 2 d/22.11.2018 dg/flu tr/tamiflu`"
      }
    ],
    "authorContributionMap": {
      "ngkangtze": 1,
      "tristonpang": 16,
      "guestuser0123": 44,
      "GaryGohYP": 93,
      "-": 232,
      "nelvintan": 55
    }
  },
  {
    "path": "docs/team/garygoh.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d Gary Goh Yipeng - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d PROJECT: One Life"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "---"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d\u003d Overview"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "One Life is a desktop medical management application used for storing and displaying data related to patients and doctors."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "The user interacts with it using a Command Line Interface (CLI), and it has a Graphical User Interface (GUI) created with JavaFX."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* *Major enhancement*: added *the ability to update and display medical records*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "** _What it does:_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "*** Enables the user to update the current medical record history of a specified patient on a specified date."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "*** Checks if the given information such as the date, diagnosis or treatment are valid."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "** _Justification:_"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "*** Streamlines a key part of medical operations in a hospital. (Updating and referring to the current medical history of any given patient.)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "** _Highlights:_"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "*** Improves how data is stored, retrieved, and sorted."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "*** Requires in-depth analysis of design alternatives when choosing the most efficient method of storing medical record data."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "*** Requires a brand new command to be created and existing code to be edited."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* *Minor enhancement*: added a check to verify if a given date is valid and in the correct format."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "*** Managed releases `v1.1` - `v1.4` (4 releases) on GitHub."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "*** Changed the browser panel to display medical records instead. (Pull requests https://github.com/CS2103-AY1819S1-W16-3/main/pull/105[#105], https://github.com/CS2103-AY1819S1-W16-3/main/pull/109[#109])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "*** Added documentation and formatting changes for all new features to the User Guide. (Pull requests https://github.com/CS2103-AY1819S1-W16-3/main/pull/4[#4], https://github.com/CS2103-AY1819S1-W16-3/main/pull/5[#5], https://github.com/CS2103-AY1819S1-W16-3/main/pull/6[#6], https://github.com/CS2103-AY1819S1-W16-3/main/pull/39/commits/9e6897ca4b66ea457bd0b000adf74a7c2b0ffcc7[#39])"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "*** Added documentation for updating medical records to the Developer Guide. (Pull request https://github.com/CS2103-AY1819S1-W16-3/main/pull/80/commits/86501c5bba40bb36af4b584929e214c0d915fab2[#80])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "*** Reviewed other team members\u0027 pull requests (Pull request https://github.com/CS2103-AY1819S1-W16-3/main/pull/129[#129]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (Pull request https://github.com/CS2103-AY1819S1-W16-3/main/pull/66[#66])"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddisplaymr]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "include::../UserGuide.adoc[tag\u003dupdate]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dupdatecommand]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "---"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "GaryGohYP": 69
    }
  },
  {
    "path": "docs/team/nelvintan.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "\u003d Tan Thong Cai Nelvin - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "\u003d\u003d PROJECT: One Life"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "---"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "\u003d\u003d\u003d Overview"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "One Life is a desktop medical management application used for storing and displaying data related to patients and doctors."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "One Life aims to improve the efficiency for administrative processes in medical institutes."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "The user interacts with it using a Command Line Interface (CLI), and it has a Graphical User Interface (GUI) created with JavaFX."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "\u003d\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "* *Major enhancement*: added *the ability to schedule and display medical appointments*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "** What it does: allows the user to schedule appointments at a specified time."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "** Justification: This feature improves the product significantly because a user is able to display current appointments and schedule appointments."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "This is a key part of medical operations in a hospital."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Further checks are available to inform the user if they keyed in incorrect appointment details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "** Highlights: This enhancement drastically improved the ability of the application to assist medical processes, specifically in the area of scheduling appointment."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "The implementation too was challenging as it required a brand new command to be created."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "*** Managed releases `v1.1` - `v1.4` (4 releases) on GitHub"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "*** Set up travis for running tests for the code base"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "*** Set up auto publishing of docs for travis"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage%"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "(Pull requests https://github.com/CS2103-AY1819S1-W16-3/main/pull/11/commits/7203d4a630e46fdf724c76170e3589de7704687d[#36],"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "https://github.com/CS2103-AY1819S1-W16-3/main/pull/68/commits/ad0a044af6a04de2a7c5d456c4bc5753c60aacd4[#38])"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "https://github.com/CS2103-AY1819S1-W16-3/main/pull/123/commits/a8d665e38c5f07a50f6e38635bcc54b858193ac4[#14]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "*** PRs reviewed (with non-trivial review comments):"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "https://github.com/CS2103-AY1819S1-W16-3/main/pull/124#pullrequestreview-169082170[#12],"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "https://github.com[#32],"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "https://github.com[#19],"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "https://github.com[#42]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddisplayappt]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "include::../UserGuide.adoc[tag\u003dschedule]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dschedulecommand]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "---"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "nelvintan": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAddressBookStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs userPrefs;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing One Life Application ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic, config, userPrefs);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        initEventsCenter();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample One Life database\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty database\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty database\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initEventsCenter() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        logger.info(\"Starting One Life application \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping One Life Application ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.stop();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        stop();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 6,
      "-": 202
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Config.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    private String appTitle \u003d \"One Life App\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAppTitle() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return appTitle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAppTitle(String appTitle) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.appTitle \u003d appTitle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(appTitle, o.appTitle)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"App title : \" + appTitle);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nCurrent log level : \" + logLevel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GaryGohYP": 1,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_PATIENT_FORMAT \u003d \"Invalid command format for adding patient! \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            + \"\\n%1$s\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_DOCTOR_FORMAT \u003d \"Invalid command format for adding doctor! \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            + \"\\n%1$s\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String MESSAGE_INVALID_ROLE \u003d \"Invalid format for role\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_CHOSEN \u003d \"Invalid person chosen. Person chosen is not a patient\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 6,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/PersonChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "/** Indicates the person in the model has changed */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "public class PersonChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public final Person editedPerson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public final Person originalPerson;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public PersonChangedEvent(Person originalPerson, Person editedPerson) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.originalPerson \u003d originalPerson;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.editedPerson \u003d editedPerson;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return \"Person data modified: \" + editedPerson;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/DisplayPanelSelectionChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import seedu.address.model.person.DisplayableAttribute;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": " * Represents a selection change in the Display Panel"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "public class DisplayPanelSelectionChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    private final DisplayableAttribute newSelection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public DisplayPanelSelectionChangedEvent(DisplayableAttribute newSelection) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        this.newSelection \u003d newSelection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public DisplayableAttribute getNewSelection() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        return newSelection;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "GaryGohYP": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    ListElementPointer getHistorySnapshot();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * Cancels the current command. If an intuitive command is currently executing, exit from the command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * Otherwise, it clears the command box text field."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @return a String feedback message that tells the user what has been cancelled"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    String cancelCommand();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tristonpang": 8,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager extends ComponentManager implements Logic {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String MESSAGE_NON_INTUITIVE_CANCELLATION \u003d \"There is currently \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            + \"no intuitive command that is executing. Command box cleared.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String MESSAGE_INTUITIVE_CANCELLATION \u003d \"Intuitive command cancelled.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            CommandResult result \u003d command.execute(model, history);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            //if after intuitive input, all inputs have been received, parse with full arguments"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            if (!model.isIntuitiveMode() \u0026\u0026 model.areIntuitiveArgsAvailable()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                //tell AddressBookParser that the intuitive command has completed"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                addressBookParser.exitIntuitiveMode();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                String intuitiveArguments \u003d model.retrieveIntuitiveArguments();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                logger.fine(\"Retrieved Argument String: \" + intuitiveArguments);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                Command intuitiveCompletedCommand \u003d addressBookParser.parseCommand(intuitiveArguments);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                return intuitiveCompletedCommand.execute(model, history);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer getHistorySnapshot() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ListElementPointer(history.getHistory());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public String cancelCommand() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        if (!model.isIntuitiveMode()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return MESSAGE_NON_INTUITIVE_CANCELLATION;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        addressBookParser.exitIntuitiveMode();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        model.cancelIntuitiveCommand();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return MESSAGE_INTUITIVE_CANCELLATION;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tristonpang": 28,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICAL_DEPARTMENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String COMMON_MESSAGE \u003d COMMAND_WORD + \": Adds a person to the database. \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            + PREFIX_ROLE + \"ROLE \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            + PREFIX_NRIC + \"NRIC \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final String USAGE_EXAMPLE \u003d \"Example: \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            + PREFIX_ROLE + \"\u003cROLE\u003e \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            + PREFIX_NRIC + \"S1234567A \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            + PREFIX_TAG + \"diabetic \";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final String USAGE_DOCTOR_EXAMPLE \u003d USAGE_EXAMPLE.replaceFirst(\"\u003cROLE\u003e\", \"Doctor\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            + PREFIX_MEDICAL_DEPARTMENT + \"Oncology\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String MESSAGE_PATIENT_USAGE \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            COMMON_MESSAGE.replaceFirst(\"person\", \"patient\") + USAGE_EXAMPLE.replaceFirst(\"\u003cROLE\u003e\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    \"Patient\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String MESSAGE_DOCTOR_USAGE \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            COMMON_MESSAGE.replaceFirst(\"person\", \"doctor\") + USAGE_DOCTOR_EXAMPLE;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String MESSAGE_GENERAL_USAGE \u003d MESSAGE_PATIENT_USAGE.replaceFirst(\"patient\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            \"patient/doctor\") + \"\\n\" + USAGE_DOCTOR_EXAMPLE;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 24,
      "-": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.doctor.MedicalDepartment;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.patient.MedicalRecord;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Appointment;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final String MESSAGE_ROLE_CONFLICT \u003d \"Attempting to edit invalid fields for: \";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (hasRoleConflict(personToEdit, editPersonDescriptor)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            throw new CommandException(MESSAGE_ROLE_CONFLICT + personToEdit.getClass().getSimpleName().toUpperCase());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Nric updatedNric \u003d editPersonDescriptor.getNric().orElse(personToEdit.getNric());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // edit command does not allow editing remarks"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        ArrayList\u003cAppointment\u003e updatedAppointmentList \u003d personToEdit.getAppointmentList();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (personToEdit instanceof Patient) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            // edit command does not allow editing medical records"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            MedicalRecord updatedMedicalRecord \u003d ((Patient) personToEdit).getMedicalRecord();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return new Patient(updatedName, updatedNric, updatedPhone, updatedEmail, updatedAddress, updatedTags,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    updatedAppointmentList, updatedMedicalRecord);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            assert personToEdit instanceof Doctor; // Person must be either Patient or Doctor."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            MedicalDepartment updateMedicalDepartment \u003d"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    editPersonDescriptor.getMedicalDepartment().orElse(((Doctor) personToEdit).getMedicalDepartment());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return new Doctor(updatedName, updatedNric, updatedPhone, updatedEmail, updatedAddress, updatedTags,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    updatedAppointmentList, updateMedicalDepartment);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     * Checks if the given person has valid arguments. If the person is a patient, checks if the Medical"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     * Department field is present. Else if the person is a doctor, checks if the NRIC field is present."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     * @param personToEdit the person to edit."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static boolean hasRoleConflict(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (personToEdit instanceof Patient) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return editPersonDescriptor.getMedicalDepartment().isPresent();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            assert personToEdit instanceof Doctor;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return editPersonDescriptor.getNric().isPresent();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        private Nric nric;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        private MedicalDepartment medicalDepartment;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            setMedicalDepartment(toCopy.medicalDepartment);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            setNric(toCopy.nric);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags, nric, medicalDepartment);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        public void setNric(Nric nric) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            this.nric \u003d nric;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        public Optional\u003cNric\u003e getNric() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return Optional.ofNullable(nric);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        public void setMedicalDepartment(MedicalDepartment medicalDepartment) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            this.medicalDepartment \u003d medicalDepartment;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        public Optional\u003cMedicalDepartment\u003e getMedicalDepartment() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return Optional.ofNullable(medicalDepartment);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 57,
      "GaryGohYP": 6,
      "-": 227,
      "nelvintan": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "import seedu.address.model.person.PersonContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose attributes contain any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The following prefixes are avaliable for specification: Name: n/, NRIC: ic/, Phone: p/, \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Address: a/, Tag: t/, Medical Department: md/, Medical Record: mr/.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"If no prefixes are given, all avaliable attributes will searched for the specified keywords.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: [PREFIX]KEYWORD [NEXT_PREFIX][NEXT_KEYWORD]\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" n/alex r/doctor\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "    private final PersonContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "    public FindCommand(PersonContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngkangtze": 3,
      "-": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/IntuitiveEntryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tristonpang"
        },
        "content": " * Signals that the user has entered an input or argument for a specified field during the execution of"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tristonpang"
        },
        "content": " * an intuitive command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tristonpang"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "public class IntuitiveEntryCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final String GO_BACK_COMMAND \u003d \"/bk\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final String GO_BACK_INSTRUCTION \u003d \"\\n(Type %1$s to go back)\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final String INPUT_ECHO \u003d \"You entered: %1$s \\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public IntuitiveEntryCommand(String userInput) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        this.input \u003d userInput;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory commandHistory) throws CommandException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        String nextInstruction \u003d null;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        if (input.equals(GO_BACK_COMMAND)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            nextInstruction \u003d model.removeIntuitiveEntry();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            //model -\u003e save input as argument in list (IntuitivePromptManager)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            //get correct command type and argument index from IntuitivePromptManager (in model)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            nextInstruction \u003d model.addIntuitiveEntry(input);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        if (input.equals(\"\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return new CommandResult(nextInstruction);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        //return correct instruction to display in CommandResult"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return new CommandResult(String.format(INPUT_ECHO, this.input) + nextInstruction"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                + String.format(GO_BACK_INSTRUCTION, GO_BACK_COMMAND));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tristonpang": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Role;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String MESSAGE_SUCCESS_FILTERED_LIST \u003d \"Listed all \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Lists people in the addressbook. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            + \"(Optional) Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            + PREFIX_ROLE + \"ROLE \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            + \"Example : \" + COMMAND_WORD + \"\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            + \"Example : \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            + PREFIX_ROLE + \"patient \\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private Role role;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private Predicate\u003cPerson\u003e predicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        predicate \u003d PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Creates a ListCommand with predicate to filter base on the specified role."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * @param role Specified role to filter this list by."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public ListCommand(Role role) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.role \u003d role;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.predicate \u003d p -\u003e p.getClass().getSimpleName().toUpperCase().equals(role.toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        model.updateFilteredPersonList(this.predicate);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (this.role \u003d\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS_FILTERED_LIST + this.role);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 32,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ScheduleCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DOCTOR_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DOCTOR_NRIC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PATIENT_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PATIENT_NRIC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.patient.MedicalRecord;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.model.person.Appointment;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " * Updates the schedule of a person in the addressbook."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "public class ScheduleCommand extends Command {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"schedule\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Schedules appointment for the person identified \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            + \"by the index number used in the last person listing.\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            + PREFIX_DATE + \"DATE \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            + PREFIX_START_TIME + \"START_TIME \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            + PREFIX_END_TIME + \"END_TIME \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            + PREFIX_DOCTOR_NAME + \"DOCTOR_NAME \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            + PREFIX_DOCTOR_NRIC + \"DOCTOR_MEDICAL_DEPARTMENT \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            + PREFIX_PATIENT_NAME + \"PATIENT_NAME \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            + PREFIX_PATIENT_NRIC + \"PATIENT_NRIC\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            + PREFIX_DATE + \"23.11.2018 \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            + PREFIX_START_TIME + \"1300 \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            + PREFIX_END_TIME + \"1400 \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            + PREFIX_DOCTOR_NAME + \"Jack \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            + PREFIX_DOCTOR_NRIC + \"S1234567B \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            + PREFIX_PATIENT_NAME + \"John Doe \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            + PREFIX_PATIENT_NRIC + \"S1234567A \";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public static final String MESSAGE_SCHEDULE_APPOINTMENT_SUCCESS \u003d \"Scheduled appointment to Person: %1$s\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public static final String MESSAGE_SCHEDULE_APPOINTMENT_FAILURE_INCORRECT_PARTS_NUMBER \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            \"Failed to schedule appointment to Person.\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            + \"Number of parts of the appointment is wrong.\\n\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public static final String MESSAGE_SCHEDULE_APPOINTMENT_FAILURE_INCORRECT_START_AND_END_TIME \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            \"Failed to schedule appointment to Person.\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            + \"Start time should come before end time!\\n\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public static final String MESSAGE_SCHEDULE_APPOINTMENT_FAILURE_INCORRECT_DOCTOR \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            \"Failed to schedule appointment to Person.\\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            + \"Doctor details entered are wrong.\\n\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public static final String MESSAGE_SCHEDULE_APPOINTMENT_FAILURE_INCORRECT_PATIENT \u003d \"Failed to schedule \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            + \"appointment to Person.\\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            + \"Patient details entered are wrong.\\n\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public static final String MESSAGE_DELETE_APPOINTMENT_SUCCESS \u003d \"Removed appointment from Person: %1$s\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public static final String MESSAGE_SCHEDULE_APPOINTMENT_FAILURE_CLASH \u003d \"There is a clash of appointments. \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            + \"Please choose another slot.\\n\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    private final Appointment appointment;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @param index of the person in the filtered person list to edit the appointment"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @param appointment of the person to be updated to"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public ScheduleCommand(Index index, Appointment appointment) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        requireAllNonNull(index, appointment);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        this.appointment \u003d appointment;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        conductPreliminaryChecks(model, lastShownList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Person editedPerson;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Person secondPersonToEdit;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Person secondEditedPerson;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // check if current person selected matches the details entered from command prompt"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        if (personToEdit instanceof Doctor \u0026\u0026 !appointment.hasValidDoctor(personToEdit)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            throw new CommandException(MESSAGE_SCHEDULE_APPOINTMENT_FAILURE_INCORRECT_DOCTOR);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // check if current person selected matches the details entered from command prompt"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        if (personToEdit instanceof Patient \u0026\u0026 !appointment.hasValidPatient(personToEdit)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            throw new CommandException(MESSAGE_SCHEDULE_APPOINTMENT_FAILURE_INCORRECT_PATIENT);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // check for clash of appointments for selected person"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        if (personToEdit.hasClash(appointment)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            throw new CommandException(MESSAGE_SCHEDULE_APPOINTMENT_FAILURE_CLASH);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        ArrayList\u003cAppointment\u003e appointmentList \u003d new ArrayList\u003c\u003e(personToEdit.getAppointmentList());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointmentList.add(appointment);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (personToEdit instanceof Doctor) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            editedPerson \u003d new Doctor(personToEdit.getName(), personToEdit.getNric(),"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    personToEdit.getAddress(), personToEdit.getTags(),"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    appointmentList, ((Doctor) personToEdit).getMedicalDepartment());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            secondPersonToEdit \u003d model.getPerson(appointment.getPatientNric()).get();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            // check for clash of appointments for other person"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            if (secondPersonToEdit.hasClash(appointment)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                throw new CommandException(MESSAGE_SCHEDULE_APPOINTMENT_FAILURE_CLASH);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            ArrayList\u003cAppointment\u003e secondAppointmentList \u003d new ArrayList\u003c\u003e(secondPersonToEdit.getAppointmentList());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            secondAppointmentList.add(appointment);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            ArrayList\u003cMedicalRecord\u003e newMedicalRecordLibrary \u003d"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    new ArrayList\u003c\u003e(((Patient) secondPersonToEdit).getMedicalRecordLibrary());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            secondEditedPerson \u003d new Patient(secondPersonToEdit.getName(), secondPersonToEdit.getNric(),"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    secondPersonToEdit.getPhone(), secondPersonToEdit.getEmail(),"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    secondPersonToEdit.getAddress(), secondPersonToEdit.getTags(),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    secondAppointmentList, newMedicalRecordLibrary);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            assert personToEdit instanceof Patient;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            ArrayList\u003cMedicalRecord\u003e newMedicalRecordLibrary \u003d"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    new ArrayList\u003c\u003e(((Patient) personToEdit).getMedicalRecordLibrary());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            editedPerson \u003d new Patient(personToEdit.getName(),"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    personToEdit.getNric(), personToEdit.getPhone(),"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    personToEdit.getEmail(), personToEdit.getAddress(),"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    personToEdit.getTags(), appointmentList, newMedicalRecordLibrary);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            secondPersonToEdit \u003d model.getPerson(appointment.getDoctorNric()).get();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            // check for clash of appointments for other person"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            if (secondPersonToEdit.hasClash(appointment)) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                throw new CommandException(MESSAGE_SCHEDULE_APPOINTMENT_FAILURE_CLASH);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            ArrayList\u003cAppointment\u003e secondAppointmentList \u003d new ArrayList\u003c\u003e(secondPersonToEdit.getAppointmentList());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            secondAppointmentList.add(appointment);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            secondEditedPerson \u003d new Doctor(secondPersonToEdit.getName(), secondPersonToEdit.getNric(),"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    secondPersonToEdit.getPhone(), secondPersonToEdit.getEmail(),"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    secondPersonToEdit.getAddress(), secondPersonToEdit.getTags(),"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    secondAppointmentList, ((Doctor) secondPersonToEdit).getMedicalDepartment());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // update both of the affected persons"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        model.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        model.updatePerson(secondEditedPerson, secondEditedPerson);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * Helper method for execute to conduct the initial checks for scheduling an appointment."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @param model which the command should operate on."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @param lastShownList where indexed person will be drawn from."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    private void conductPreliminaryChecks(Model model, List\u003cPerson\u003e lastShownList) throws CommandException {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // check if the index is correct"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        if (!appointment.isOfCorrectNumberOfParts()) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            throw new CommandException(MESSAGE_SCHEDULE_APPOINTMENT_FAILURE_INCORRECT_PARTS_NUMBER);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // check if such a patient exists in the datebase using the patient\u0027s name and nric"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        if (!model.hasSuchPatient(appointment.getPatientName(), appointment.getPatientNric())) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            throw new CommandException(MESSAGE_SCHEDULE_APPOINTMENT_FAILURE_INCORRECT_PATIENT);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // check if such a doctor exists in the database using the doctor\u0027s name and nric"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        if (!model.hasSuchDoctor(appointment.getDoctorName(), appointment.getDoctorNric())) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            throw new CommandException(MESSAGE_SCHEDULE_APPOINTMENT_FAILURE_INCORRECT_DOCTOR);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // check if the start time comes before the end time"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        if (!appointment.hasValidStartandEndTime()) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            throw new CommandException(MESSAGE_SCHEDULE_APPOINTMENT_FAILURE_INCORRECT_START_AND_END_TIME);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * Generates a command execution success message based on whether the appointment is added to or removed from"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String message \u003d !appointment.value.isEmpty() ? MESSAGE_SCHEDULE_APPOINTMENT_SUCCESS"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                : MESSAGE_DELETE_APPOINTMENT_SUCCESS;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return String.format(message, personToEdit);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        if (!(other instanceof ScheduleCommand)) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        ScheduleCommand e \u003d (ScheduleCommand) other;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                \u0026\u0026 appointment.equals(e.appointment);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 21,
      "GaryGohYP": 2,
      "nelvintan": 208
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UpdateCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DIAGNOSIS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TREATMENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.patient.MedicalRecord;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " * Updates medical record of a patient in the addressbook."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "public class UpdateCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"update\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            + \": updates the medical record of the person identified by \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            + \"the index number used in the last person listing. \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            + \"Medical record library of the patient will be the updated with the given input.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            + PREFIX_DATE + \"DATE \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            + PREFIX_DIAGNOSIS + \"DIAGNOSIS \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            + PREFIX_TREATMENT + \"TREATMENT \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            + \"[\" + PREFIX_COMMENT + \"COMMENTS]\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            + PREFIX_DATE + \"22.11.2018 \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            + PREFIX_DIAGNOSIS + \"flu \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            + PREFIX_TREATMENT + \"tamiflu\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String MESSAGE_UPDATE_MEDICAL_RECORD_SUCCESS \u003d \"Updated medical record of Person: %1$s\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String MESSAGE_DELETE_MEDICAL_RECORD_SUCCESS \u003d \"Medical record deleted from Person: %1$s\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public static final String MESSAGE_UPDATE_MEDICAL_RECORD_FAILURE \u003d \"Failed to update medical record \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            + \"library to Person.\\n\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private final MedicalRecord medicalRecord;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     * @param medicalRecord medical record of the person to update"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public UpdateCommand(Index index, MedicalRecord medicalRecord) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        requireNonNull(medicalRecord);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.medicalRecord \u003d medicalRecord;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (!(lastShownList.get(index.getZeroBased()) instanceof Patient)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_CHOSEN);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        if (!medicalRecord.isValid()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            throw new CommandException(MESSAGE_UPDATE_MEDICAL_RECORD_FAILURE + medicalRecord.getFailureReason());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Patient personToEdit \u003d (Patient) lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        ArrayList\u003cMedicalRecord\u003e editedMedicalRecordLibrary \u003d new ArrayList\u003c\u003e(personToEdit.getMedicalRecordLibrary());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        editedMedicalRecordLibrary.add(0, medicalRecord);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Patient editedPerson \u003d new Patient(personToEdit.getName(), personToEdit.getNric(),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                personToEdit.getPhone(), personToEdit.getEmail(), personToEdit.getAddress(),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                personToEdit.getTags(), personToEdit.getAppointmentList(), editedMedicalRecordLibrary);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            model.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            model.commitAddressBook();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        } catch (DuplicatePersonException dpe) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        } catch (PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            throw new AssertionError(\"The target person cannot be missing\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Returns a success message when updated a medical record."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * @param personToEdit The person who\u0027s medical record is changed."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * @return A success message."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (!medicalRecord.value.isEmpty()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return String.format(MESSAGE_UPDATE_MEDICAL_RECORD_SUCCESS, personToEdit);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return String.format(MESSAGE_DELETE_MEDICAL_RECORD_SUCCESS, personToEdit);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (!(other instanceof UpdateCommand)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        UpdateCommand e \u003d (UpdateCommand) other;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \u0026\u0026 medicalRecord.equals(e.medicalRecord);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 93,
      "GaryGohYP": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_DOCTOR_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICAL_DEPARTMENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.doctor.MedicalDepartment;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Role;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_ROLE, PREFIX_NRIC, PREFIX_NAME,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG, PREFIX_MEDICAL_DEPARTMENT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // Ensures information for common prefixes are entered."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_ROLE, PREFIX_NAME, PREFIX_NRIC, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                PREFIX_ADDRESS) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_GENERAL_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (!isRoleOf(Role.DOCTOR, argMultimap) \u0026\u0026 !isRoleOf(Role.PATIENT, argMultimap)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            throw new ParseException(String.format(Role.MESSAGE_ROLE_CONSTRAINTS, AddCommand.MESSAGE_GENERAL_USAGE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // Ensures Medical Department field is not empty when adding a Doctor."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (isRoleOf(Role.DOCTOR, argMultimap) \u0026\u0026 !arePrefixesPresent(argMultimap, PREFIX_MEDICAL_DEPARTMENT)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_DOCTOR_FORMAT,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    AddCommand.MESSAGE_DOCTOR_USAGE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Nric nric \u003d ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC).get());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Person person \u003d new Person(name, nric, phone, email, address, tagList);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (isRoleOf(Role.PATIENT, argMultimap)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            person \u003d new Patient(name, nric, phone, email, address, tagList);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        } else if (isRoleOf(Role.DOCTOR, argMultimap)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            MedicalDepartment medicalDepartment \u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    ParserUtil.parseMedicalDepartment(argMultimap.getValue((PREFIX_MEDICAL_DEPARTMENT)).get());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            person \u003d new Doctor(name, nric, phone, email, address, tagList, medicalDepartment);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(person);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Returns true if the role in args matches with specified the Enum role."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static boolean isRoleOf(Enum role, ArgumentMultimap argMultiMap) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String person \u003d argMultiMap.getValue(PREFIX_ROLE).get();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return person !\u003d null \u0026\u0026 person.equalsIgnoreCase(role.toString());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 41,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.logic.commands.IntuitiveEntryCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.logic.commands.ScheduleCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * Keeps track of whether the system is currently executing an Intuitive Prompt Command"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static boolean isIntuitiveMode \u003d false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        //detect if in intuitive mode"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        if (isIntuitiveMode) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return new IntuitiveEntryCommand(userInput.trim());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            //detect if user wants to activate intuitive mode/command"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            if (arguments.isEmpty()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                return triggerIntuitiveMode(userInput);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            if (arguments.isEmpty()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                return triggerIntuitiveMode(userInput);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            if (arguments.isEmpty()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                return triggerIntuitiveMode(userInput);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            if (arguments.isEmpty()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                return triggerIntuitiveMode(userInput);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        case ScheduleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            if (arguments.isEmpty()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                return triggerIntuitiveMode(userInput);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            return new ScheduleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return new ListCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        case UpdateCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            return new UpdateCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private Command triggerIntuitiveMode(String userInput) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        isIntuitiveMode \u003d true;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return new IntuitiveEntryCommand(userInput);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public void exitIntuitiveMode() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        isIntuitiveMode \u003d false;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tristonpang": 39,
      "guestuser0123": 1,
      "GaryGohYP": 4,
      "-": 91,
      "nelvintan": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /* For general usage */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final Prefix PREFIX_ROLE \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final Prefix PREFIX_NRIC \u003d new Prefix(\"ic/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final Prefix PREFIX_MEDICAL_DEPARTMENT \u003d new Prefix(\"md/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /* For Appointments */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public static final Prefix PREFIX_START_TIME \u003d new Prefix(\"st/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public static final Prefix PREFIX_END_TIME \u003d new Prefix(\"et/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public static final Prefix PREFIX_DOCTOR_NAME \u003d new Prefix(\"dn/\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public static final Prefix PREFIX_PATIENT_NAME \u003d new Prefix(\"pn/\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final Prefix PREFIX_DOCTOR_NRIC \u003d new Prefix(\"di/\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final Prefix PREFIX_PATIENT_NRIC \u003d new Prefix(\"pi/\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /* For Medical Records */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public static final Prefix PREFIX_MEDICAL_RECORD \u003d new Prefix(\"mr/\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public static final Prefix PREFIX_DIAGNOSIS \u003d new Prefix(\"dg/\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public static final Prefix PREFIX_TREATMENT \u003d new Prefix(\"tr/\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public static final Prefix PREFIX_COMMENT \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final Prefix PREFIX_GLOBAL \u003d new Prefix(\"gl/\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 13,
      "GaryGohYP": 4,
      "-": 15,
      "nelvintan": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICAL_DEPARTMENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                        PREFIX_ADDRESS, PREFIX_TAG, PREFIX_MEDICAL_DEPARTMENT, PREFIX_NRIC);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NRIC).isPresent()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            editPersonDescriptor.setNric(ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC).get()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MEDICAL_DEPARTMENT).isPresent()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            editPersonDescriptor.setMedicalDepartment(ParserUtil.parseMedicalDepartment(argMultimap"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    .getValue(PREFIX_MEDICAL_DEPARTMENT).get()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Returns true if the role in args matches with the Enum role."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static boolean isRoleOf(Enum role, ArgumentMultimap argMultiMap) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String person \u003d argMultiMap.getValue(PREFIX_ROLE).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (person !\u003d null \u0026\u0026 person.toUpperCase().equals(role.toString())) { // Input is case-insensitive."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 26,
      "-": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GLOBAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICAL_DEPARTMENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICAL_RECORD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "import seedu.address.model.person.PersonContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an FindCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: Detect when invalid prefixes are given as arguments and throw an error."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cPrefix\u003e prefixList \u003d new ArrayList\u003c\u003e(Arrays.asList(PREFIX_NAME, PREFIX_NRIC, PREFIX_PHONE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG, PREFIX_MEDICAL_DEPARTMENT, PREFIX_MEDICAL_RECORD));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, prefixList.toArray(new Prefix[0]));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cPrefix, List\u003cString\u003e\u003e personSearchKeywords \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.getPreamble().equals(\"\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cString\u003e keywordList \u003d new ArrayList\u003c\u003e(Arrays.asList(argMultimap.getPreamble().split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            personSearchKeywords.put(PREFIX_GLOBAL, keywordList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Prefix prefix : prefixList) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            initialiseKeywordMap(argMultimap, personSearchKeywords, prefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(new PersonContainsKeywordsPredicate(personSearchKeywords));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Private method for handling {@code Prefix} in the input argument."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Maps each {@code Prefix} into a HashMap with their searched keywords."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argMultimap Immutable HashMap of all given keywords for each {@code Prefix} mapped to {@code Prefix}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param personSearchKeywords HashMap of individual keywords in an ArrayList mapped to {@code Prefix}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix {@code Prefix} corresponding to the keywords given."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initialiseKeywordMap(ArgumentMultimap argMultimap, Map\u003cPrefix, List\u003cString\u003e\u003e personSearchKeywords,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                                      Prefix prefix) throws ParseException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(prefix).isPresent()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cString\u003e keywordList \u003d new ArrayList\u003c\u003e(argMultimap.getAllValues(prefix));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            if (keywordList.get(0).equals(\"\")) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            personSearchKeywords.put(prefix, keywordList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngkangtze": 1,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ListCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Role;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " * Parses input arguments and creates a new ListCommand object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "public class ListCommandParser implements Parser\u003cListCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ListCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * and returns an ListCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * If there are no arguments, then return a regular ListCommand (unfiltered list)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Else, ensures that arguments conform to format and returns a filtered list of"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Doctors or Patients, as per specified."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public ListCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (args.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ROLE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (!isPrefixPresent(argMultimap, PREFIX_ROLE) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    ListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Role role \u003d ParserUtil.parseRole(argMultimap.getValue(PREFIX_ROLE).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return new ListCommand(role);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Returns true if the prefix contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static boolean isPrefixPresent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return argMultimap.getValue(prefix).isPresent();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.doctor.MedicalDepartment;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Role;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Parses a {@code String nric} into an {@code Nric}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * @throws ParseException if the given {@code nric} is invalid."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static Nric parseNric(String nric) throws ParseException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        requireNonNull(nric);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String trimmedNric \u003d nric.trim();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (!Nric.isValidNric(trimmedNric)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            throw new ParseException(Nric.MESSAGE_NRIC_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return new Nric(trimmedNric);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Parses a {@code String dept} into an {@code Medical Department}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * @throws ParseException if the given {@code dept} is invalid."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static MedicalDepartment parseMedicalDepartment(String dept) throws ParseException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        requireNonNull(dept);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String trimmedDept \u003d dept.trim();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (!MedicalDepartment.isValidMedDept(trimmedDept)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            throw new ParseException(MedicalDepartment.MESSAGE_DEPTNAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return new MedicalDepartment(trimmedDept);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Parses a {@code String role} into an {@code Role}."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * @throws ParseException if the given {@code role} is invalid."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static Role parseRole(String role) throws ParseException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        requireNonNull(role);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String trimmedRole \u003d role.trim().toUpperCase();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (!Role.isValidRole(trimmedRole)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            throw new ParseException(Role.MESSAGE_ROLE_CONSTRAINTS);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return Role.valueOf(trimmedRole);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Parses a {@code String date} into an {@code Date}."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * @throws ParseException if the given {@code date} is invalid."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static Date parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (!Date.isValidDate(trimmedDate)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            throw new ParseException(Date.getFailureReason(trimmedDate));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return new Date(trimmedDate);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Parses a {@code String time} into an {@code Time}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * @throws ParseException if the given {@code time} is invalid."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static Time parseTime(String time) throws ParseException {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String trimmedTime \u003d time.trim();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (!Time.isValidTime(trimmedTime)) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            throw new ParseException(Time.getFailureReason(trimmedTime));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return new Time(trimmedTime);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 79,
      "-": 125
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ScheduleCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DOCTOR_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DOCTOR_NRIC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PATIENT_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PATIENT_NRIC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.logic.commands.ScheduleCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.model.person.Appointment;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nelvintan"
        },
        "content": " * Parses input arguments and creates a new {@code ScheduleCommand} object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nelvintan"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "public class ScheduleCommandParser implements Parser\u003cScheduleCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code ScheduleCommand}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * and returns a {@code ScheduleCommand} object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public ScheduleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DATE, PREFIX_START_TIME, PREFIX_END_TIME,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                        PREFIX_DOCTOR_NAME, PREFIX_DOCTOR_NRIC, PREFIX_PATIENT_NAME, PREFIX_PATIENT_NRIC);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // Ensures that index provided is correct."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ScheduleCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // Ensures information for common prefixes are entered."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DATE, PREFIX_START_TIME, PREFIX_END_TIME,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                PREFIX_DOCTOR_NAME, PREFIX_DOCTOR_NRIC, PREFIX_PATIENT_NAME, PREFIX_PATIENT_NRIC)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ScheduleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Date date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Time startTime \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_START_TIME).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Time endTime \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_END_TIME).get());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Name doctorName \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_DOCTOR_NAME).get());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Nric doctorNric \u003d ParserUtil.parseNric(argMultimap.getValue(PREFIX_DOCTOR_NRIC).get());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Name patientName \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_PATIENT_NAME).get());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Nric patientNric \u003d ParserUtil.parseNric(argMultimap.getValue(PREFIX_PATIENT_NRIC).get());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return new ScheduleCommand(index, new Appointment(date, startTime, endTime, doctorName, doctorNric,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                patientName, patientNric));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 13,
      "nelvintan": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/UpdateCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DIAGNOSIS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TREATMENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.patient.MedicalRecord;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " * Parses input arguments and creates a new UpdateCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "public class UpdateCommandParser implements Parser\u003cUpdateCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the UpdateCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * and returns an UpdateCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public UpdateCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DATE, PREFIX_DIAGNOSIS, PREFIX_TREATMENT, PREFIX_COMMENT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, UpdateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DATE, PREFIX_DIAGNOSIS,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                PREFIX_TREATMENT)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, UpdateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        String date \u003d argMultimap.getValue(PREFIX_DATE).get();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        String diagnosis \u003d argMultimap.getValue(PREFIX_DIAGNOSIS).get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        String treatment \u003d argMultimap.getValue(PREFIX_TREATMENT).get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        String comment \u003d \"\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        if (argMultimap.getValue(PREFIX_COMMENT).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            comment \u003d argMultimap.getValue(PREFIX_COMMENT).get();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        return new UpdateCommand(index, new MedicalRecord(date, diagnosis, treatment, comment));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 32,
      "GaryGohYP": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Returns true if there is such a person with the provided {@code name} and {@code nric}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public boolean hasSuchPerson(Name name, Nric nric) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        requireAllNonNull(name, nric);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return persons.hasSuchPerson(name, nric);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * Returns true if there is such a patient with the provided {@code name} and {@code nric}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public boolean hasSuchPatient(Name name, Nric nric) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        requireAllNonNull(name, nric);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return persons.hasSuchPatient(name, nric);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * Returns true if there is such a doctor with the provided {@code name} and {@code nric}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public boolean hasSuchDoctor(Name name, Nric nric) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        requireAllNonNull(name, nric);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return persons.hasSuchDoctor(name, nric);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Returns an {@code Optional\u003cPerson\u003e} base on the provided {@code nric}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public Optional\u003cPerson\u003e getPerson(Nric nric) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        requireNonNull(nric);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return persons.getPerson(nric);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 19,
      "-": 121,
      "nelvintan": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/IntuitivePromptManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.logic.commands.ScheduleCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.model.argumentmanagers.AddArgumentManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.model.argumentmanagers.ArgumentManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.model.argumentmanagers.DeleteArgumentManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.model.argumentmanagers.EditArgumentManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.model.argumentmanagers.FindArgumentManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.model.argumentmanagers.ScheduleArgumentManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tristonpang"
        },
        "content": " * The IntuitivePromptManager of the Model. Handles and stores all data related to an intuitive command"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tristonpang"
        },
        "content": " * execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tristonpang"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "public class IntuitivePromptManager {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String SKIP_COMMAND \u003d \"//\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String SKIP_INSTRUCTION \u003d \"\\n(Type %1$s to skip this field)\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static int currentArgIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static List\u003cString\u003e arguments;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static ArgumentManager argumentManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static boolean isIntuitiveMode;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final String UNEXPECTED_SCENARIO_MESSAGE \u003d \"IntuitivePromptManager: \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            + \"Unexpected scenario has occurred in switch-case block\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public IntuitivePromptManager() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        currentArgIndex \u003d ArgumentManager.MIN_ARGUMENT_INDEX;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        arguments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        argumentManager \u003d null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        isIntuitiveMode \u003d false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public boolean isIntuitiveMode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return isIntuitiveMode;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * Adds and stores user\u0027s input as an argument to the currently executing intuitive command."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @param input the user\u0027s input"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public void addArgument(String input) throws CommandException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        String userInput \u003d input.trim();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        if (argumentManager \u003d\u003d null) { //start of intuitive command, record command word"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            startIntuitiveMode(userInput);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        } else if (isSkipCommand(userInput) \u0026\u0026 isCurrentFieldSkippable()) { //skip command"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            skipArgumentField();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        } else if (isArgumentValid(userInput)) { //any other valid argument"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            addArgumentForCommand(userInput);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            String exceptionMessage \u003d retrieveInvalidArgumentExceptionMessage();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            throw new CommandException(exceptionMessage + \"\\n\" + getInstruction());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        logger.info(\"Intuitive Argument index: \" + currentArgIndex);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        logger.info(\"Current arguments: \" + arguments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        if (currentArgIndex \u003e\u003d argumentManager.getMaximumArguments()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            exitIntuitiveMode();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * Signals the start of execution of an intuitive command"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @param userInput the user\u0027s input (i.e. the command word which specifies which"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     *                  command is going to be run in intuitive mode)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private void startIntuitiveMode(String userInput) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        isIntuitiveMode \u003d true;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        switch (userInput) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            argumentManager \u003d new AddArgumentManager();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            argumentManager \u003d new DeleteArgumentManager();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            argumentManager \u003d new EditArgumentManager();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            argumentManager \u003d new FindArgumentManager();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case ScheduleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            argumentManager \u003d new ScheduleArgumentManager();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            throw new Error(UNEXPECTED_SCENARIO_MESSAGE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * Handles the adding of the user\u0027s input as an argument, depending on"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * the type of command."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @param userInput the user\u0027s input to be added as an argument"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private void addArgumentForCommand(String userInput) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        currentArgIndex \u003d argumentManager.addArgumentForCommand(arguments, currentArgIndex, userInput);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * Skips the current argument field."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private void skipArgumentField() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        arguments.add(\"\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        currentArgIndex++;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * Gives the corresponding instruction or prompt for the current field of the executing"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * intuitive command."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @return the string instruction for the current field of the executing intuitive command"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public String getInstruction() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return argumentManager.retrieveInstruction(arguments, currentArgIndex);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * Indicates that currently executing intuitive command has completed."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * i.e. all fields have been filled up, intuitive command mode has exited."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private void exitIntuitiveMode() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        isIntuitiveMode \u003d false;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * Removes the latest stored argument of the currently executing intuitive command."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public void removeArgument() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        if (currentArgIndex \u003c\u003d ArgumentManager.MIN_ARGUMENT_INDEX) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        currentArgIndex \u003d argumentManager.removeArgumentForCommand(arguments, currentArgIndex);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * Checks if there are currently any arguments stored (as part of an executing intuitive command) in the manager."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @return true if there are any arguments stored, false otherwise"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public boolean areArgsAvailable() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return !arguments.isEmpty();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * Prepares a string that is a single line command (i.e. non-intuitive command input) based on all"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * the past arguments entered by the user during the execution of an intuitive command."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * This string is basically how the user would have entered the command and its"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * arguments if the intuitive command prompt was not used."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @return a string that is the non-intuitive command input, containing entered arguments of the"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * past executed intuitive command"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public String retrieveArguments() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        String result \u003d argumentManager.prepareArguments(arguments);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        resetIntuitiveCache();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * Clears all stored arguments and readies the manager for a new intuitive command."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private void resetIntuitiveCache() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        argumentManager \u003d null;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        arguments.clear();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        currentArgIndex \u003d ArgumentManager.MIN_ARGUMENT_INDEX;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private boolean isSkipCommand(String input) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return input.equals(SKIP_COMMAND);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * Checks if the current field of the executing intuitive command is skippable/can be left blank."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @return true if the field is skippable, false otherwise"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private boolean isCurrentFieldSkippable() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return argumentManager.isCurrentFieldSkippable(currentArgIndex);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * Checks if given input is a valid argument."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @param input the given input"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @return true if the input is a valid argument, false otherwise"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private boolean isArgumentValid(String input) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return argumentManager.isArgumentValid(arguments, currentArgIndex, input);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * Retrieves message to be thrown with exception when an invalid argument is detected."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @return string message to be thrown with exception"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private String retrieveInvalidArgumentExceptionMessage() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return argumentManager.retrieveInvalidArgumentExceptionMessage(arguments, currentArgIndex);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * Cancels and exits out of the currently executing intuitive command."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public void cancelIntuitiveCommand() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        exitIntuitiveMode();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        resetIntuitiveCache();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tristonpang": 238,
      "GaryGohYP": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Clears existing backing model and replaces with the provided new data. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    void resetData(ReadOnlyAddressBook newData);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the database."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Returns true if there exist a person with matching {@code nric} and {@code name} in the database"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    boolean hasSuchPerson(Name name, Nric nric);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * Returns true if there exist a patient with matching {@code nric} and {@code name} in the database"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    boolean hasSuchPatient(Name name, Nric nric);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * Returns true if there exist a doctor with matching {@code nric} and {@code name} in the database"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    boolean hasSuchDoctor(Name name, Nric nric);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Returns an {@code Optional\u003cPerson\u003e} that matches the given {@code nric}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    Optional\u003cPerson\u003e getPerson(Nric nric);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * The person must exist in the database."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * {@code person} must not already exist in the database."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * {@code target} must exist in the database."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the database."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    void updatePerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Returns true if the model has previous database states to restore."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canUndoAddressBook();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Returns true if the model has undone database states to restore."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canRedoAddressBook();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Restores the model\u0027s database to its previous state."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    void undoAddressBook();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Restores the model\u0027s database to its previously undone state."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    void redoAddressBook();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Saves the current database state for undo/redo."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    void commitAddressBook();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * Records the user\u0027s input when an intuitive command is executing"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @param entry User\u0027s input for the current intuitive prompted field"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @return The next instruction prompt (for the next field to be recorded)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    String addIntuitiveEntry(String entry) throws CommandException;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * Removes the user\u0027s most recent input during an intuitive command."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * Invoked when user wants to undo their most recent entry/input."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @return The previous field\u0027s instruction prompt"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    String removeIntuitiveEntry();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    boolean isIntuitiveMode();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    boolean areIntuitiveArgsAvailable();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * Retrieves all stored arguments input by the user throughout the intuitive command"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * and returns the arguments as a concatenated string, ready for normal command parsing."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * Invoked when the intuitive command ends."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @return Concatenated string of all arguments input by the user during intuitive command"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    String retrieveIntuitiveArguments();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * Cancels the currently executing intuitive command, if any."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    void cancelIntuitiveCommand();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tristonpang": 32,
      "guestuser0123": 23,
      "-": 68,
      "nelvintan": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.commons.events.model.PersonChangedEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager extends ComponentManager implements Model {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final VersionedAddressBook versionedAddressBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private final IntuitivePromptManager intuitivePromptManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook \u003d new VersionedAddressBook(addressBook);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(versionedAddressBook.getPersonList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager \u003d new IntuitivePromptManager();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.resetData(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        indicatePersonChanged();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Raises an event to indicate the model has changed */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private void indicateAddressBookChanged() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new AddressBookChangedEvent(versionedAddressBook));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /** Raises an event to indicate the person data has changed */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private void indicatePersonChanged(Person original, Person editedPerson) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        raise(new PersonChangedEvent(original, editedPerson));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /** Raise an event to indicate the person has been removed or reset to previous version*/"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private void indicatePersonChanged() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        raise(new PersonChangedEvent(null, null));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.hasPerson(person);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public boolean hasSuchPerson(Name name, Nric nric) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        requireAllNonNull(name, nric);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return versionedAddressBook.hasSuchPerson(name, nric);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public boolean hasSuchPatient(Name name, Nric nric) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        requireAllNonNull(name, nric);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return versionedAddressBook.hasSuchPatient(name, nric);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public boolean hasSuchDoctor(Name name, Nric nric) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        requireAllNonNull(name, nric);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return versionedAddressBook.hasSuchDoctor(name, nric);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public Optional\u003cPerson\u003e getPerson(Nric nric) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        requireNonNull(nric);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return versionedAddressBook.getPerson(nric);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.removePerson(target);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        indicatePersonChanged();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.addPerson(person);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.updatePerson(target, editedPerson);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        indicatePersonChanged(target, editedPerson);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredPersons);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canUndo();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canRedo();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undoAddressBook() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        indicatePersonChanged();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redoAddressBook() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        indicatePersonChanged();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commitAddressBook() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.equals(other.versionedAddressBook)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public String addIntuitiveEntry(String entry) throws CommandException {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(entry);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return intuitivePromptManager.getInstruction();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public String removeIntuitiveEntry() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.removeArgument();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return intuitivePromptManager.getInstruction();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public boolean isIntuitiveMode() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return intuitivePromptManager.isIntuitiveMode();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public String retrieveIntuitiveArguments() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return intuitivePromptManager.retrieveArguments();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public boolean areIntuitiveArgsAvailable() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return intuitivePromptManager.areArgsAvailable();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public void cancelIntuitiveCommand() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.cancelIntuitiveCommand();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tristonpang": 37,
      "guestuser0123": 31,
      "-": 150,
      "nelvintan": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/argumentmanagers/AddArgumentManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "package seedu.address.model.argumentmanagers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICAL_DEPARTMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static seedu.address.model.IntuitivePromptManager.SKIP_COMMAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static seedu.address.model.IntuitivePromptManager.SKIP_INSTRUCTION;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.model.doctor.MedicalDepartment;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.model.person.Role;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tristonpang"
        },
        "content": " * ArgumentManager that handles management and recording of arguments for an intuitive \u0027add\u0027 command."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tristonpang"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "public class AddArgumentManager extends ArgumentManager {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String ROLE_INSTRUCTION \u003d \"Is this a patient or a doctor? \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            + \"(Please enter patient or doctor)\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String NAME_INSTRUCTION \u003d \"Please enter person\u0027s name\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String EMAIL_INSTRUCTION \u003d \"Please enter person\u0027s email\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String PHONE_INSTRUCTION \u003d \"Please enter person\u0027s phone number\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String ADDRESS_INSTRUCTION \u003d \"Please enter person\u0027s address\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String TAGS_INSTRUCTION \u003d \"Please enter person\u0027s tags, \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            + \"separated by commas (with no spaces after a comma)\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String NRIC_INSTRUCTION \u003d \"Please enter patient\u0027s NRIC\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String DEPT_INSTRUCTION \u003d \"Please enter doctor\u0027s medical department\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String PATIENT_ARG_IDENTIFIER \u003d \"patient\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String DOCTOR_ARG_IDENTIFIER \u003d \"doctor\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int ADD_MAX_ARGUMENTS \u003d 8;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int ADD_ROLE_INDEX \u003d 0;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int ADD_NAME_INDEX \u003d 1;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int ADD_PHONE_INDEX \u003d 2;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int ADD_EMAIL_INDEX \u003d 3;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int ADD_ADDRESS_INDEX \u003d 4;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int ADD_TAGS_INDEX \u003d 5;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int ADD_NRIC_INDEX \u003d 6;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int ADD_DEPT_INDEX \u003d 7;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public int addArgumentForCommand(List\u003cString\u003e arguments, int argumentIndex, String userInput) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        arguments.add(userInput);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        if (!isDoctor(arguments) \u0026\u0026 !isPatient(arguments)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            throw new Error(UNEXPECTED_SCENARIO_MESSAGE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        if (argumentIndex \u003d\u003d ADD_NRIC_INDEX \u0026\u0026 isPatient(arguments)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return ADD_MAX_ARGUMENTS;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return argumentIndex + 1;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private boolean isPatient(List\u003cString\u003e arguments) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return arguments.get(ADD_ROLE_INDEX).equals(PATIENT_ARG_IDENTIFIER);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private boolean isDoctor(List\u003cString\u003e arguments) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return arguments.get(ADD_ROLE_INDEX).equals(DOCTOR_ARG_IDENTIFIER);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public String retrieveInstruction(List\u003cString\u003e arguments, int argumentIndex) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        switch (argumentIndex) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case ADD_ROLE_INDEX:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return ROLE_INSTRUCTION;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case ADD_NAME_INDEX:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return NAME_INSTRUCTION;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case ADD_EMAIL_INDEX:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return EMAIL_INSTRUCTION;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case ADD_PHONE_INDEX:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return PHONE_INSTRUCTION;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case ADD_ADDRESS_INDEX:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return ADDRESS_INSTRUCTION;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case ADD_TAGS_INDEX:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return TAGS_INSTRUCTION + String.format(SKIP_INSTRUCTION, SKIP_COMMAND);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case ADD_NRIC_INDEX:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return NRIC_INSTRUCTION;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case ADD_DEPT_INDEX:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return DEPT_INSTRUCTION;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case ADD_MAX_ARGUMENTS:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return COMMAND_COMPLETE_MESSAGE;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            throw new Error(UNEXPECTED_SCENARIO_MESSAGE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public int removeArgumentForCommand(List\u003cString\u003e arguments, int argumentIndex) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        arguments.remove(argumentIndex - 1);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return argumentIndex - 1;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public int getMaximumArguments() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return ADD_MAX_ARGUMENTS;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public String prepareArguments(List\u003cString\u003e arguments) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        String preparedString \u003d \"\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        preparedString +\u003d AddCommand.COMMAND_WORD + \" \";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        int index \u003d MIN_ARGUMENT_INDEX;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        for (String argument : arguments) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            if (argument.isEmpty()) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                index++;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            preparedString +\u003d prefixAddArgument(index, argument); //TODO: optimise with StringBuilder"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            preparedString +\u003d \" \";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return preparedString.trim();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * Given an argument and an index that represents which field this argument belongs to in the \u0027add\u0027 command,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * prefix and return the edited argument."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @param index    the index that represents which field the argument belongs to in the \u0027add\u0027 command"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @param argument the specified argument"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @return the prefixed argument"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private String prefixAddArgument(int index, String argument) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        switch (index) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case ADD_ROLE_INDEX:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return PREFIX_ROLE + argument;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case ADD_NAME_INDEX:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return PREFIX_NAME + argument;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case ADD_EMAIL_INDEX:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return PREFIX_EMAIL + argument;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case ADD_PHONE_INDEX:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return PREFIX_PHONE + argument;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case ADD_ADDRESS_INDEX:"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return PREFIX_ADDRESS + argument;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case ADD_TAGS_INDEX:"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            String resultArg \u003d PREFIX_TAG + argument;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return resultArg.replace(\",\", \" \" + PREFIX_TAG).trim();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case ADD_NRIC_INDEX:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return PREFIX_NRIC + argument;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case ADD_DEPT_INDEX:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            if (argument.isEmpty()) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                return \"\";"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return PREFIX_MEDICAL_DEPARTMENT + argument;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public boolean isArgumentValid(List\u003cString\u003e arguments, int argumentIndex, String userInput) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        switch (argumentIndex) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case ADD_ROLE_INDEX:"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return Role.isValidRole(userInput);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case ADD_NAME_INDEX:"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return Name.isValidName(userInput);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case ADD_PHONE_INDEX:"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return Phone.isValidPhone(userInput);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case ADD_EMAIL_INDEX:"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return Email.isValidEmail(userInput);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case ADD_ADDRESS_INDEX:"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return Address.isValidAddress(userInput);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case ADD_TAGS_INDEX:"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            for (String tag : userInput.split(\",\")) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                if (!Tag.isValidTagName(tag)) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case ADD_NRIC_INDEX:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return Nric.isValidNric(userInput);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case ADD_DEPT_INDEX:"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return MedicalDepartment.isValidMedDept(userInput);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            throw new Error(UNEXPECTED_SCENARIO_MESSAGE);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public String retrieveInvalidArgumentExceptionMessage(List\u003cString\u003e arguments, int argumentIndex) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        switch (argumentIndex) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case ADD_ROLE_INDEX:"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return Role.MESSAGE_ROLE_CONSTRAINTS;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case ADD_NAME_INDEX:"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return Name.MESSAGE_NAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case ADD_PHONE_INDEX:"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return Phone.MESSAGE_PHONE_CONSTRAINTS;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case ADD_EMAIL_INDEX:"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return Email.MESSAGE_EMAIL_CONSTRAINTS;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case ADD_ADDRESS_INDEX:"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return Address.MESSAGE_ADDRESS_CONSTRAINTS;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case ADD_TAGS_INDEX:"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return Tag.MESSAGE_TAG_CONSTRAINTS;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case ADD_NRIC_INDEX:"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return Nric.MESSAGE_NRIC_CONSTRAINTS;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case ADD_DEPT_INDEX:"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return MedicalDepartment.MESSAGE_DEPTNAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            throw new Error(UNEXPECTED_SCENARIO_MESSAGE);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public boolean isCurrentFieldSkippable(int argumentIndex) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return argumentIndex \u003d\u003d ADD_TAGS_INDEX;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tristonpang": 264
    }
  },
  {
    "path": "src/main/java/seedu/address/model/argumentmanagers/ArgumentManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "package seedu.address.model.argumentmanagers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tristonpang"
        },
        "content": " * Class that determines how arguments are stored and keeps track of respective instructions."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tristonpang"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "public abstract class ArgumentManager {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final int MIN_ARGUMENT_INDEX \u003d 0;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    protected static final String COMMAND_COMPLETE_MESSAGE \u003d \"All required inputs received, processing...\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    protected static final String UNEXPECTED_SCENARIO_MESSAGE \u003d \"ArgumentManager: \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            + \"Unexpected scenario has occurred in switch-case block\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * Handles the adding of the user\u0027s input as an argument, depending on"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * the type of command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @param arguments the container of arguments to be added to"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @param argumentIndex the current argument index"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @param userInput the user\u0027s input to be added as an argument"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @return the newly incremented argumentIndex"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public abstract int addArgumentForCommand(List\u003cString\u003e arguments, int argumentIndex, String userInput);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * Retrieves corresponding instruction for a field (specified by the current argument index)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * for the intuitive command."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @param arguments the current container of arguments"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @return the corresponding string instruction for the specified field"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public abstract String retrieveInstruction(List\u003cString\u003e arguments, int argumentIndex);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * Removes the latest stored argument of the currently executing intuitive command."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @param arguments the current container of arguments"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @param argumentIndex the current argument index"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @return the newly decremented argument index"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public abstract int removeArgumentForCommand(List\u003cString\u003e arguments, int argumentIndex);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * Retrieves the maximum number of arguments that the intuitive command takes in."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @return the maximum number of arguments that the command takes in"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public abstract int getMaximumArguments();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * Prepares a string represents a single line (non-intuitive) command based on all"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * the past arguments entered by the user during the execution of the intuitive command."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @param arguments the current container of arguments"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @return a string that is the non-intuitive version of the command, containing entered arguments of the"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * past executed intuitive command"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public abstract String prepareArguments(List\u003cString\u003e arguments);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * Checks if given input is a valid argument for the intuitive command."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @param arguments the current container of arguments"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @param userInput the given input"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @param argumentIndex the current argument index"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @return true if the input is a valid argument, false otherwise"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public abstract boolean isArgumentValid(List\u003cString\u003e arguments, int argumentIndex, String userInput);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * Retrieves message to be thrown with exception when an invalid argument is detected."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @param arguments the current container of arguments"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @param argumentIndex the current argument index"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @return string message to be thrown with exception"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public abstract String retrieveInvalidArgumentExceptionMessage(List\u003cString\u003e arguments, int argumentIndex);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public abstract boolean isCurrentFieldSkippable(int argumentIndex);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tristonpang": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/model/argumentmanagers/DeleteArgumentManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "package seedu.address.model.argumentmanagers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tristonpang"
        },
        "content": " * ArgumentManager that handles management and recording of arguments for an intuitive \u0027delete\u0027 command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tristonpang"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "public class DeleteArgumentManager extends ArgumentManager {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String DELETE_TARGET_INSTRUCTION \u003d \"Please enter the index of the person to be deleted\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String DELETE_INVALID_ARGUMENT_MESSAGE \u003d \"Index must be a non-zero positive integer\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final String UNEXPECTED_CALL_ERROR \u003d \"DeleteArgumentManager: \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            + \"removeArgumentForCommand(..) should not be called!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int DELETE_MAX_ARGUMENTS \u003d 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int DELETE_TARGET_INDEX \u003d 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public int addArgumentForCommand(List\u003cString\u003e arguments, int argumentIndex, String userInput) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        arguments.add(userInput);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return argumentIndex + 1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public String retrieveInstruction(List\u003cString\u003e arguments, int argumentIndex) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        switch (argumentIndex) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case DELETE_TARGET_INDEX:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return DELETE_TARGET_INSTRUCTION;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case DELETE_MAX_ARGUMENTS:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return COMMAND_COMPLETE_MESSAGE;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            throw new Error(UNEXPECTED_SCENARIO_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public int removeArgumentForCommand(List\u003cString\u003e arguments, int argumentIndex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        throw new Error(UNEXPECTED_CALL_ERROR);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public int getMaximumArguments() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return DELETE_MAX_ARGUMENTS;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public String prepareArguments(List\u003cString\u003e arguments) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        String preparedString \u003d \"\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        preparedString +\u003d DeleteCommand.COMMAND_WORD + \" \";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        String targetIndex \u003d arguments.get(DELETE_TARGET_INDEX);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        preparedString +\u003d targetIndex;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return preparedString;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public boolean isArgumentValid(List\u003cString\u003e arguments, int argumentIndex, String userInput) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return StringUtil.isNonZeroUnsignedInteger(userInput);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public String retrieveInvalidArgumentExceptionMessage(List\u003cString\u003e arguments, int argumentIndex) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return DELETE_INVALID_ARGUMENT_MESSAGE;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public boolean isCurrentFieldSkippable(int argumentIndex) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tristonpang": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/model/argumentmanagers/EditArgumentManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "package seedu.address.model.argumentmanagers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tristonpang"
        },
        "content": " * ArgumentManager that handles management and recording of arguments for an intuitive \u0027edit\u0027 command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tristonpang"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "public class EditArgumentManager extends ArgumentManager {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String EDIT_CLEAR_TAGS_COMMAND \u003d \"--\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String EDIT_TARGET_INSTRUCTION \u003d \"Please enter the index of the person to be edited\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String EDIT_FIELDS_INSTRUCTION \u003d \"Please indicate which fields you want to edit, by typing\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            + \"down the corresponding numbers, separated by spaces:\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            + \"1. Name\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            + \"2. Phone\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            + \"3. Email\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            + \"4. Address\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            + \"5. Tags\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String EDIT_NAME_INSTRUCTION \u003d \"Please enter person\u0027s new name\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String EDIT_EMAIL_INSTRUCTION \u003d \"Please enter person\u0027s new email\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String EDIT_PHONE_INSTRUCTION \u003d \"Please enter person\u0027s new phone number\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String EDIT_ADDRESS_INSTRUCTION \u003d \"Please enter person\u0027s new address\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String EDIT_TAGS_INSTRUCTION \u003d \"Please enter person\u0027s new tags, \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            + \"separated by commas (with no spaces after a comma) (Type %1$s to clear tags)\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String EDIT_INVALID_FIELDS_MESSAGE \u003d \"Index must be a non-zero positive integer \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            + \"and must be between %1$s and %2$s\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String EDIT_INVALID_INDEX_MESSAGE \u003d \"Index must be a non-zero positive integer\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int EDIT_MAX_ARGUMENTS \u003d 7;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int EDIT_TARGET_INDEX \u003d 0;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int EDIT_FIELDS_INDEX \u003d 1;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int EDIT_NAME_INDEX \u003d 2;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int EDIT_PHONE_INDEX \u003d 3;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int EDIT_EMAIL_INDEX \u003d 4;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int EDIT_ADDRESS_INDEX \u003d 5;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int EDIT_TAGS_INDEX \u003d 6;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int EDIT_INDEX_OFFSET \u003d 1;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public int addArgumentForCommand(List\u003cString\u003e arguments, int argumentIndex, String userInput) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        if (argumentIndex \u003e\u003d EDIT_FIELDS_INDEX) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            arguments.add(userInput);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            if (arguments.get(EDIT_FIELDS_INDEX).isEmpty()) { //no more edit indexes"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                //all remaining unselected fields are empty"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                for (int index \u003d argumentIndex + 1; index \u003c EDIT_MAX_ARGUMENTS; index++) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                    arguments.add(\"\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                return EDIT_MAX_ARGUMENTS;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            //first element is the next edit index, second element is the remaining indexes"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            String[] firstIndexAndRemainingIndexes \u003d arguments.get(EDIT_FIELDS_INDEX)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                    .split(\" \", 2);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            int nextIndex \u003d Integer.valueOf(firstIndexAndRemainingIndexes[0].trim());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            nextIndex +\u003d EDIT_INDEX_OFFSET;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            //the unselected indexes in between the current index and the next index are empty"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            for (int index \u003d argumentIndex + 1; index \u003c nextIndex; index++) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                arguments.add(\"\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            //update remaining indexes"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            arguments.remove(EDIT_FIELDS_INDEX);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            if (firstIndexAndRemainingIndexes.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                arguments.add(EDIT_FIELDS_INDEX, \"\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                return nextIndex;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            String remainingIndexes \u003d firstIndexAndRemainingIndexes[1];"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            arguments.add(EDIT_FIELDS_INDEX, remainingIndexes);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return nextIndex;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        arguments.add(userInput);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return argumentIndex + 1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public String retrieveInstruction(List\u003cString\u003e arguments, int argumentIndex) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        switch (argumentIndex) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case EDIT_TARGET_INDEX:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return EDIT_TARGET_INSTRUCTION;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case EDIT_FIELDS_INDEX:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return EDIT_FIELDS_INSTRUCTION;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case EDIT_NAME_INDEX:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return EDIT_NAME_INSTRUCTION;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case EDIT_PHONE_INDEX:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return EDIT_PHONE_INSTRUCTION;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case EDIT_EMAIL_INDEX:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return EDIT_EMAIL_INSTRUCTION;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case EDIT_ADDRESS_INDEX:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return EDIT_ADDRESS_INSTRUCTION;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case EDIT_TAGS_INDEX:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return String.format(EDIT_TAGS_INSTRUCTION, EDIT_CLEAR_TAGS_COMMAND);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case EDIT_MAX_ARGUMENTS:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return COMMAND_COMPLETE_MESSAGE;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            throw new Error(UNEXPECTED_SCENARIO_MESSAGE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public int removeArgumentForCommand(List\u003cString\u003e arguments, int argumentIndex) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        if (argumentIndex \u003d\u003d EDIT_FIELDS_INDEX) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            arguments.remove(argumentIndex - 1);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return argumentIndex - 1;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        String targetIndex \u003d arguments.get(EDIT_TARGET_INDEX);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        arguments.clear();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        arguments.add(targetIndex);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return EDIT_FIELDS_INDEX;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public int getMaximumArguments() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return EDIT_MAX_ARGUMENTS;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public String prepareArguments(List\u003cString\u003e arguments) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        String preparedString \u003d \"\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        preparedString +\u003d EditCommand.COMMAND_WORD + \" \";"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        for (int index \u003d MIN_ARGUMENT_INDEX; index \u003c EDIT_MAX_ARGUMENTS; index++) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            if (index \u003d\u003d EDIT_FIELDS_INDEX) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            String argument \u003d arguments.get(index);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            if (argument.isEmpty()) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            preparedString +\u003d prefixEditArgument(index, argument); //TODO: optimise with StringBuilder"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            preparedString +\u003d \" \";"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return preparedString.trim();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * Given an argument and an index that represents which field this argument belongs to in the \u0027edit\u0027 command,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * prefix and return the edited argument."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @param index    the index that represents which field the argument belongs to in the \u0027edit\u0027 command"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @param argument the specified argument"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @return the prefixed argument"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private String prefixEditArgument(int index, String argument) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        switch (index) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case EDIT_TARGET_INDEX:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return argument;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case EDIT_NAME_INDEX:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return PREFIX_NAME + argument;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case EDIT_EMAIL_INDEX:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return PREFIX_EMAIL + argument;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case EDIT_PHONE_INDEX:"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return PREFIX_PHONE + argument;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case EDIT_ADDRESS_INDEX:"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return PREFIX_ADDRESS + argument;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case EDIT_TAGS_INDEX:"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            String resultArg \u003d PREFIX_TAG + argument;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            if (argument.equals(EDIT_CLEAR_TAGS_COMMAND)) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                resultArg \u003d PREFIX_TAG + \"\";"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return resultArg.replace(\",\", \" \" + PREFIX_TAG).trim();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            throw new Error(UNEXPECTED_SCENARIO_MESSAGE);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public boolean isArgumentValid(List\u003cString\u003e arguments, int argumentIndex, String userInput) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        switch (argumentIndex) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case EDIT_TARGET_INDEX:"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return StringUtil.isNonZeroUnsignedInteger(userInput);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case EDIT_FIELDS_INDEX:"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            for (String index : userInput.split(\" \")) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                if (!StringUtil.isNonZeroUnsignedInteger(index)"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                        || Integer.valueOf(index) \u003e\u003d EDIT_TAGS_INDEX) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case EDIT_NAME_INDEX:"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return Name.isValidName(userInput);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case EDIT_PHONE_INDEX:"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return Phone.isValidPhone(userInput);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case EDIT_EMAIL_INDEX:"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return Email.isValidEmail(userInput);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case EDIT_ADDRESS_INDEX:"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return Address.isValidAddress(userInput);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case EDIT_TAGS_INDEX:"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            if (userInput.equals(EDIT_CLEAR_TAGS_COMMAND)) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            for (String tag : userInput.split(\",\")) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                if (!Tag.isValidTagName(tag)) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            throw new Error(UNEXPECTED_SCENARIO_MESSAGE);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public String retrieveInvalidArgumentExceptionMessage(List\u003cString\u003e arguments, int argumentIndex) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        switch (argumentIndex) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case EDIT_TARGET_INDEX:"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return EDIT_INVALID_INDEX_MESSAGE;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case EDIT_FIELDS_INDEX:"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return String.format(EDIT_INVALID_FIELDS_MESSAGE,"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                    EDIT_NAME_INDEX - EDIT_INDEX_OFFSET,"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                    EDIT_TAGS_INDEX - EDIT_INDEX_OFFSET);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case EDIT_NAME_INDEX:"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return Name.MESSAGE_NAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case EDIT_PHONE_INDEX:"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return Phone.MESSAGE_PHONE_CONSTRAINTS;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case EDIT_EMAIL_INDEX:"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return Email.MESSAGE_EMAIL_CONSTRAINTS;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case EDIT_ADDRESS_INDEX:"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return Address.MESSAGE_ADDRESS_CONSTRAINTS;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case EDIT_TAGS_INDEX:"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return Tag.MESSAGE_TAG_CONSTRAINTS;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            throw new Error(UNEXPECTED_SCENARIO_MESSAGE);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public boolean isCurrentFieldSkippable(int argumentIndex) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tristonpang": 288
    }
  },
  {
    "path": "src/main/java/seedu/address/model/argumentmanagers/FindArgumentManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "package seedu.address.model.argumentmanagers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tristonpang"
        },
        "content": " * ArgumentManager that handles management and recording of arguments for an intuitive \u0027find\u0027 command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tristonpang"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "public class FindArgumentManager extends ArgumentManager {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String FIND_SEARCH_FIELDS_INSTRUCTION \u003d \"Please select what fields to search in, by typing\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            + \"down the corresponding numbers, separated by spaces:\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            + \"1. Global Search\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            + \"2. Search by Name\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            + \"3. Search by Phone\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            + \"4. Search by Email\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            + \"5. Search by Address\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            + \"6. Search by Tags\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String FIND_GLOBAL_INSTRUCTION \u003d \"Please enter keywords to be searched everywhere, \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            + \"separated only by commas\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String FIND_NAME_INSTRUCTION \u003d \"Please enter keywords to be searched for (by name), \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            + \"separated only by commas\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String FIND_PHONE_INSTRUCTION \u003d \"Please enter keywords to be searched for (by phone number), \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            + \"separated only by commas\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String FIND_EMAIL_INSTRUCTION \u003d \"Please enter keywords to be searched for (by email), \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            + \"separated only by commas\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String FIND_ADDRESS_INSTRUCTION \u003d \"Please enter keywords to be searched for (by address), \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            + \"separated only by commas\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String FIND_TAGS_INSTRUCTION \u003d \"Please enter keywords to be searched for (by tags), \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            + \"separated only by commas\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String FIND_INVALID_FIELDS_MESSAGE \u003d \"Index must be a non-zero positive integer \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            + \"from %1$s to %2$s\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int FIND_MAX_ARGUMENTS \u003d 7;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int FIND_SEARCH_FIELDS_INDEX \u003d 0;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int FIND_GLOBAL_INDEX \u003d 1;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int FIND_NAME_INDEX \u003d 2;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int FIND_PHONE_INDEX \u003d 3;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int FIND_EMAIL_INDEX \u003d 4;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int FIND_ADDRESS_INDEX \u003d 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int FIND_TAGS_INDEX \u003d 6;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public int addArgumentForCommand(List\u003cString\u003e arguments, int argumentIndex, String userInput) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        arguments.add(userInput);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        if (arguments.get(FIND_SEARCH_FIELDS_INDEX).isEmpty()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            //all remaining unselected fields are empty"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            for (int index \u003d argumentIndex + 1; index \u003c FIND_MAX_ARGUMENTS; index++) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                arguments.add(\"\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return FIND_MAX_ARGUMENTS;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        //first element is the next edit index, second element is the remaining indexes"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        String[] firstIndexAndRemainingIndexes \u003d arguments.get(FIND_SEARCH_FIELDS_INDEX)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                .split(\" \", 2);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        int nextIndex \u003d Integer.valueOf(firstIndexAndRemainingIndexes[0].trim());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        //the unselected indexes in between the current index and the next index are empty"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        for (int index \u003d argumentIndex + 1; index \u003c nextIndex; index++) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            arguments.add(\"\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        //update remaining indexes"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        arguments.remove(FIND_SEARCH_FIELDS_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        if (firstIndexAndRemainingIndexes.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            arguments.add(FIND_SEARCH_FIELDS_INDEX, \"\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return nextIndex;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        String remainingIndexes \u003d firstIndexAndRemainingIndexes[1];"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        arguments.add(FIND_SEARCH_FIELDS_INDEX, remainingIndexes);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return nextIndex;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public String retrieveInstruction(List\u003cString\u003e arguments, int argumentIndex) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        switch (argumentIndex) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case FIND_SEARCH_FIELDS_INDEX:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return FIND_SEARCH_FIELDS_INSTRUCTION;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case FIND_GLOBAL_INDEX:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return FIND_GLOBAL_INSTRUCTION;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case FIND_NAME_INDEX:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return FIND_NAME_INSTRUCTION;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case FIND_PHONE_INDEX:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return FIND_PHONE_INSTRUCTION;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case FIND_EMAIL_INDEX:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return FIND_EMAIL_INSTRUCTION;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case FIND_ADDRESS_INDEX:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return FIND_ADDRESS_INSTRUCTION;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case FIND_TAGS_INDEX:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return FIND_TAGS_INSTRUCTION;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case FIND_MAX_ARGUMENTS:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return COMMAND_COMPLETE_MESSAGE;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            throw new Error(UNEXPECTED_SCENARIO_MESSAGE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public int removeArgumentForCommand(List\u003cString\u003e arguments, int argumentIndex) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        arguments.clear();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return FIND_SEARCH_FIELDS_INDEX;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public int getMaximumArguments() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return FIND_MAX_ARGUMENTS;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public String prepareArguments(List\u003cString\u003e arguments) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        String preparedString \u003d \"\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        preparedString +\u003d FindCommand.COMMAND_WORD + \" \";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        for (int index \u003d MIN_ARGUMENT_INDEX; index \u003c FIND_MAX_ARGUMENTS; index++) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            if (index \u003d\u003d FIND_SEARCH_FIELDS_INDEX) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            String argument \u003d arguments.get(index);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            if (argument.isEmpty()) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            preparedString +\u003d prefixFindArgument(index, argument); //TODO: optimise with StringBuilder"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            preparedString +\u003d \" \";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return preparedString.trim();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * Given an argument and an index that represents which field this argument belongs to in the \u0027find\u0027 command,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * prefix and return the edited argument."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @param index    the index that represents which field the argument belongs to in the \u0027find\u0027 command"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @param argument the specified argument"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @return the prefixed argument"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private String prefixFindArgument(int index, String argument) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        String resultArg;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        switch (index) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case FIND_GLOBAL_INDEX:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return argument.replace(\",\", \" \").trim();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case FIND_NAME_INDEX:"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            resultArg \u003d PREFIX_NAME + argument;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return resultArg.replace(\",\", \" \" + PREFIX_NAME).trim();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case FIND_PHONE_INDEX:"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            resultArg \u003d PREFIX_PHONE + argument;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return resultArg.replace(\",\", \" \" + PREFIX_PHONE).trim();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case FIND_EMAIL_INDEX:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            resultArg \u003d PREFIX_EMAIL + argument;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return resultArg.replace(\",\", \" \" + PREFIX_EMAIL).trim();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case FIND_ADDRESS_INDEX:"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            resultArg \u003d PREFIX_ADDRESS + argument;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return resultArg.replace(\",\", \" \" + PREFIX_ADDRESS).trim();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case FIND_TAGS_INDEX:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            resultArg \u003d PREFIX_TAG + argument;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return resultArg.replace(\",\", \" \" + PREFIX_TAG).trim();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            throw new Error(UNEXPECTED_SCENARIO_MESSAGE);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public boolean isArgumentValid(List\u003cString\u003e arguments, int argumentIndex, String userInput) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        switch (argumentIndex) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case FIND_SEARCH_FIELDS_INDEX:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            for (String index : userInput.split(\" \")) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                if (!StringUtil.isNonZeroUnsignedInteger(index)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                        || Integer.valueOf(index) \u003e FIND_TAGS_INDEX) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public String retrieveInvalidArgumentExceptionMessage(List\u003cString\u003e arguments, int argumentIndex) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        switch (argumentIndex) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case FIND_SEARCH_FIELDS_INDEX:"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return String.format(FIND_INVALID_FIELDS_MESSAGE,"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                    FIND_GLOBAL_INDEX,"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                    FIND_TAGS_INDEX);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            throw new Error(UNEXPECTED_SCENARIO_MESSAGE);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public boolean isCurrentFieldSkippable(int argumentIndex) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tristonpang": 231
    }
  },
  {
    "path": "src/main/java/seedu/address/model/argumentmanagers/ScheduleArgumentManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "package seedu.address.model.argumentmanagers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DOCTOR_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DOCTOR_NRIC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PATIENT_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PATIENT_NRIC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.logic.commands.ScheduleCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.model.person.Date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tristonpang"
        },
        "content": " * ArgumentManager that handles management and recording of arguments for an intuitive \u0027schedule\u0027 command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tristonpang"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "public class ScheduleArgumentManager extends ArgumentManager {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String SCHEDULE_TARGET_INSTRUCTION \u003d \"Please the enter the index of the person to \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            + \"schedule an appointment for (can be patient or doctor)\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String SCHEDULE_DATE_INSTRUCTION \u003d \"Please enter the date of the appointment to be scheduled\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String SCHEDULE_START_TIME_INSTRUCTION \u003d \"Please enter the start time of the appointment\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String SCHEDULE_END_TIME_INSTRUCTION \u003d \"Please enter the end time of the appointment\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String SCHEDULE_DOCTOR_NAME_INSTRUCTION \u003d \"Please enter the doctor\u0027s name\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String SCHEDULE_DOCTOR_NRIC_INSTRUCTION \u003d \"Please enter the doctor\u0027s NRIC\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String SCHEDULE_PATIENT_NAME_INSTRUCTION \u003d \"Please enter the patient\u0027s name\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String SCHEDULE_PATIENT_NRIC_INSTRUCTION \u003d \"Please enter the patient\u0027s NRIC\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String SCHEDULE_INVALID_INDEX_MESSAGE \u003d \"Index must be a non-zero positive integer\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String SCHEDULE_INVALID_DATE_MESSAGE \u003d \"Invalid date. Please enter an existing date \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            + \"in the format DD.MM.YYYY\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String SCHEDULE_INVALID_START_TIME_MESSAGE \u003d \"Invalid time. Please enter a valid \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            + \"24-hour clock time (e.g. 1500)\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String SCHEDULE_INVALID_END_TIME_MESSAGE \u003d \"Invalid time. Please enter a valid \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            + \"24-hour clock time and ensure that it is after %1$s\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int SCHEDULE_MAX_ARGUMENTS \u003d 8;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int SCHEDULE_TARGET_INDEX \u003d 0;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int SCHEDULE_DATE_INDEX \u003d 1;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int SCHEDULE_START_TIME_INDEX \u003d 2;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int SCHEDULE_END_TIME_INDEX \u003d 3;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int SCHEDULE_DOCTOR_NAME_INDEX \u003d 4;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int SCHEDULE_DOCTOR_NRIC_INDEX \u003d 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int SCHEDULE_PATIENT_NAME_INDEX \u003d 6;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int SCHEDULE_PATIENT_NRIC_INDEX \u003d 7;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public int addArgumentForCommand(List\u003cString\u003e arguments, int argumentIndex, String userInput) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        arguments.add(userInput);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return argumentIndex + 1;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public String retrieveInstruction(List\u003cString\u003e arguments, int argumentIndex) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        switch (argumentIndex) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case SCHEDULE_TARGET_INDEX:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return SCHEDULE_TARGET_INSTRUCTION;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case SCHEDULE_DATE_INDEX:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return SCHEDULE_DATE_INSTRUCTION;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case SCHEDULE_START_TIME_INDEX:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return SCHEDULE_START_TIME_INSTRUCTION;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case SCHEDULE_END_TIME_INDEX:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return SCHEDULE_END_TIME_INSTRUCTION;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case SCHEDULE_DOCTOR_NAME_INDEX:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return SCHEDULE_DOCTOR_NAME_INSTRUCTION;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case SCHEDULE_DOCTOR_NRIC_INDEX:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return SCHEDULE_DOCTOR_NRIC_INSTRUCTION;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case SCHEDULE_PATIENT_NAME_INDEX:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return SCHEDULE_PATIENT_NAME_INSTRUCTION;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case SCHEDULE_PATIENT_NRIC_INDEX:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return SCHEDULE_PATIENT_NRIC_INSTRUCTION;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case SCHEDULE_MAX_ARGUMENTS:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return COMMAND_COMPLETE_MESSAGE;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            throw new Error(UNEXPECTED_SCENARIO_MESSAGE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public int removeArgumentForCommand(List\u003cString\u003e arguments, int argumentIndex) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        arguments.remove(argumentIndex - 1);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return argumentIndex - 1;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public int getMaximumArguments() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return SCHEDULE_MAX_ARGUMENTS;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public String prepareArguments(List\u003cString\u003e arguments) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        String preparedString \u003d \"\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        preparedString +\u003d ScheduleCommand.COMMAND_WORD + \" \";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        int index \u003d MIN_ARGUMENT_INDEX;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        for (String argument : arguments) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            if (argument.isEmpty()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                index++;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            preparedString +\u003d prefixScheduleArgument(index, argument); //TODO: optimise with StringBuilder"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            preparedString +\u003d \" \";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return preparedString.trim();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * Given an argument and an index that represents which field this argument belongs to in the \u0027schedule\u0027 command,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * prefix and return the edited argument."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @param index    the index that represents which field the argument belongs to in the \u0027schedule\u0027 command"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @param argument the specified argument"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @return the prefixed argument"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private String prefixScheduleArgument(int index, String argument) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        switch (index) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case SCHEDULE_TARGET_INDEX:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return argument;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case SCHEDULE_DATE_INDEX:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return PREFIX_DATE + argument;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case SCHEDULE_START_TIME_INDEX:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return PREFIX_START_TIME + argument;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case SCHEDULE_END_TIME_INDEX:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return PREFIX_END_TIME + argument;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case SCHEDULE_DOCTOR_NAME_INDEX:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return PREFIX_DOCTOR_NAME + argument;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case SCHEDULE_DOCTOR_NRIC_INDEX:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return PREFIX_DOCTOR_NRIC + argument;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case SCHEDULE_PATIENT_NAME_INDEX:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return PREFIX_PATIENT_NAME + argument;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case SCHEDULE_PATIENT_NRIC_INDEX:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return PREFIX_PATIENT_NRIC + argument;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            throw new Error(UNEXPECTED_SCENARIO_MESSAGE);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public boolean isArgumentValid(List\u003cString\u003e arguments, int argumentIndex, String userInput) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        switch (argumentIndex) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case SCHEDULE_TARGET_INDEX:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return StringUtil.isNonZeroUnsignedInteger(userInput);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case SCHEDULE_DATE_INDEX:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return Date.isValidDate(userInput);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case SCHEDULE_START_TIME_INDEX:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return Time.isValidTime(userInput);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case SCHEDULE_END_TIME_INDEX:"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            Time startTime \u003d new Time(arguments.get(SCHEDULE_START_TIME_INDEX));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            Time endTime \u003d new Time(userInput);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return Time.isValidTime(userInput) \u0026\u0026 startTime.comesBeforeStrictly(endTime);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case SCHEDULE_DOCTOR_NAME_INDEX:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case SCHEDULE_PATIENT_NAME_INDEX:"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return Name.isValidName(userInput);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case SCHEDULE_DOCTOR_NRIC_INDEX:"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case SCHEDULE_PATIENT_NRIC_INDEX:"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return Nric.isValidNric(userInput);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            throw new Error(UNEXPECTED_SCENARIO_MESSAGE);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public String retrieveInvalidArgumentExceptionMessage(List\u003cString\u003e arguments, int argumentIndex) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        switch (argumentIndex) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case SCHEDULE_TARGET_INDEX:"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return SCHEDULE_INVALID_INDEX_MESSAGE;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case SCHEDULE_DATE_INDEX:"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return SCHEDULE_INVALID_DATE_MESSAGE;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case SCHEDULE_START_TIME_INDEX:"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return SCHEDULE_INVALID_START_TIME_MESSAGE;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case SCHEDULE_END_TIME_INDEX:"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return String.format(SCHEDULE_INVALID_END_TIME_MESSAGE, arguments.get(SCHEDULE_START_TIME_INDEX));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case SCHEDULE_DOCTOR_NAME_INDEX:"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case SCHEDULE_PATIENT_NAME_INDEX:"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return Name.MESSAGE_NAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case SCHEDULE_DOCTOR_NRIC_INDEX:"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case SCHEDULE_PATIENT_NRIC_INDEX:"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return Nric.MESSAGE_NRIC_CONSTRAINTS;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            throw new Error(UNEXPECTED_SCENARIO_MESSAGE);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public boolean isCurrentFieldSkippable(int argumentIndex) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tristonpang": 239
    }
  },
  {
    "path": "src/main/java/seedu/address/model/doctor/Doctor.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "package seedu.address.model.doctor;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.model.person.Appointment;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.AppointmentManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.storage.XmlAdaptedDoctor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.storage.XmlAdaptedPerson;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " * Represents a Doctor in the address book."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "public class Doctor extends Person {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String IS_AVAILABLE \u003d \"AVAILABLE\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String NOT_AVAILABLE \u003d \"BUSY\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private final MedicalDepartment dept;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Creates a new Doctor object based on given details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * All field must be present and non-null."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public Doctor(Name name, Nric nric, Phone phone, Email email, Address address, Set\u003cTag\u003e tags,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                  MedicalDepartment dept) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        super(name, nric, phone, email, address, tags);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        requireAllNonNull(dept);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.dept \u003d dept;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Creates a new Doctor object based on given details."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * All field must be present and non-null."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public Doctor(Name name, Nric nric, Phone phone, Email email, Address address, Set\u003cTag\u003e tags,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                  ArrayList\u003cAppointment\u003e appointmentList, MedicalDepartment modelMedicalDept) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        super(name, nric, phone, email, address, tags, appointmentList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        requireAllNonNull(modelMedicalDept);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        this.dept \u003d modelMedicalDept;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * Creates a new Doctor object based on given details."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * All field must be present and non-null."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public Doctor(Name name, Nric nric, Phone phone, Email email, Address address, Set\u003cTag\u003e tags,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                  Appointment appointment, MedicalDepartment modelMedicalDept) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        super(name, nric, phone, email, address, tags, appointment);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        requireAllNonNull(modelMedicalDept);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.dept \u003d modelMedicalDept;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Returns Medical Department of this doctor."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public MedicalDepartment getMedicalDepartment() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return this.dept;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Returns the availability status of the Doctor, whether free or busy at the moment."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public String currentAvailStatus() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (AppointmentManager.isAnyAppointmentOngoing(this.getAppointmentList())) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return NOT_AVAILABLE;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return IS_AVAILABLE;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (obj instanceof Doctor) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            Doctor otherDoctor \u003d (Doctor) obj;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return super.equals(otherDoctor) \u0026\u0026 otherDoctor.getMedicalDepartment().equals(getMedicalDepartment());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return Objects.hash(getName(), getNric(), getPhone(), getEmail(), getAddress(), dept, getTags());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .append(\" NRIC: \")"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .append(getNric())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .append(\" Medical Department: \")"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .append(getMedicalDepartment())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .append(\" Latest Appointment: \")"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .append(getAppointment())"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .append(\" AppointmentList: \")"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .append(getAppointmentList())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Returns a Xml Adapted version of this doctor object."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Overwrites the method in the super class, {@code Person}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Asserts that this person is an instance of a Doctor."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public XmlAdaptedPerson toXmlVersion(Person source) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assert source instanceof Doctor;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return XmlAdaptedDoctor.adaptToXml((Doctor) source);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 121,
      "nelvintan": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/doctor/MedicalDepartment.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "package seedu.address.model.doctor;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " * Represents a Doctor\u0027s Medical Department in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "public class MedicalDepartment {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String MESSAGE_DEPTNAME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            \"Medical Department should only contain alphabetic characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String DEPTNAME_VALIDATION_REGEX \u003d \"[\\\\p{Alpha}][\\\\p{Alpha} ]*\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public final String deptName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Constructs a {@code MedicalDepartment}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * @param deptName A valid medical department."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public MedicalDepartment(String deptName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        requireNonNull(deptName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        checkArgument(isValidMedDept(deptName), MESSAGE_DEPTNAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.deptName \u003d deptName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Checks if the string is a valid medical department name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * @param medDept Medical Department name."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * @return True if it is a valid name as a medical department."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static boolean isValidMedDept(String medDept) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return medDept.matches(DEPTNAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (obj instanceof MedicalDepartment) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            MedicalDepartment department \u003d (MedicalDepartment) obj;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return (department.deptName.equalsIgnoreCase(this.deptName));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        return deptName;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngkangtze": 1,
      "guestuser0123": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/Diagnosis.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": " * Represents a diagnosis in a medical record."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "public class Diagnosis {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     * The first character of the diagnosis must not be a whitespace,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public static final String DIAGNOSIS_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public static final String MESSAGE_DIAGNOSIS_CONSTRAINTS \u003d \"Diagnosis can take any values, \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            + \"and should not be blank.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    /** String representation of the diagnosis */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    private String diagnosis;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public Diagnosis (String diagnosis) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        this.diagnosis \u003d diagnosis;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     * @return whether this diagnosis is a valid diagnosis."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public boolean isValid() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        return this.diagnosis.matches(DIAGNOSIS_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public String getFailureReason() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        assert(!isValid());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        return MESSAGE_DIAGNOSIS_CONSTRAINTS;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        if (obj instanceof Diagnosis) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            Diagnosis otherDiagnosis \u003d (Diagnosis) obj;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            return diagnosis.equals(otherDiagnosis.diagnosis);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        return this.diagnosis;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GaryGohYP": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/MedicalRecord.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import seedu.address.model.person.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import seedu.address.model.person.DisplayableAttribute;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": " * Represents a Person\u0027s Medical Record in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "public class MedicalRecord extends DisplayableAttribute {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public static final String MESSAGE_MEDICAL_RECORD_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            \"Person medical record can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public final Date date;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public final Diagnosis diagnosis;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public final Treatment treatment;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public final String comments;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     * Validates given medical record. Used during junit testing."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public MedicalRecord(String medicalRecord) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        requireNonNull(medicalRecord);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        this.value \u003d medicalRecord;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        List\u003cString\u003e valueList \u003d Arrays.asList(value.split(\",\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        this.date \u003d new Date(valueList.get(0));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        this.diagnosis \u003d new Diagnosis(valueList.get(1).substring(12));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        this.treatment \u003d new Treatment(valueList.get(2).substring(12));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        this.comments \u003d valueList.get(3).substring(11);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     * Validates given descriptions. Used when taking in inputs from parser."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public MedicalRecord(String date, String diagnosis, String treatment, String comments) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        requireAllNonNull(date, diagnosis, treatment);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        String actualComments \u003d comments;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        if (actualComments \u003d\u003d null || actualComments.equals(\"\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            actualComments \u003d \"-\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        this.date \u003d new Date(date);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        this.diagnosis \u003d new Diagnosis(diagnosis);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        this.treatment \u003d new Treatment(treatment);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        this.comments \u003d actualComments;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        this.value \u003d date + \",\" + \" Diagnosis: \" + diagnosis + \", Treatment: \" + treatment + \", Comments: \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                + actualComments;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public boolean isValidMedicalRecord() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        return this.value !\u003d null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public String getFailureReason() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        assert(!isValid());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        String reason;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        if (!hasValidDate()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            reason \u003d Date.getFailureReason(date.toString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        } else if (!hasValidDiagnosis()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            reason \u003d diagnosis.getFailureReason();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            reason \u003d treatment.getFailureReason();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        return reason;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public boolean isValid() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        return hasValidDate()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                \u0026\u0026 hasValidDiagnosis()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                \u0026\u0026 hasValidTreatment();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public boolean hasValidDate() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return Date.isValidDate(this.date.toString());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public boolean hasValidDiagnosis() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        return this.diagnosis.isValid();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public boolean hasValidTreatment() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        return this.treatment.isValid();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        return this.date.toString();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public String getDiagnosis() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        return this.diagnosis.toString();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public String getTreatment() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        return this.treatment.toString();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public String getComments() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        return this.comments;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                || (other instanceof MedicalRecord // instanceof handles nulls"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                \u0026\u0026 this.value.equals(((MedicalRecord) other).value)); // state check"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 4,
      "GaryGohYP": 120,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/Patient.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.model.person.Appointment;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.storage.XmlAdaptedPatient;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.storage.XmlAdaptedPerson;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " * Represents a Patient in the address book."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "public class Patient extends Person {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    private ArrayList\u003cMedicalRecord\u003e medicalRecordLibrary \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    private MedicalRecord latestMedicalRecord;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Creates a new Patient object based on given details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * An empty {@code MedicalRecord} will be created by default for the patient."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * All field must be present and non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public Patient(Name name, Nric nric, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        super(name, nric, phone, email, address, tags);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.latestMedicalRecord \u003d new MedicalRecord(\"\", \"\", \"\", \"\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        this.medicalRecordLibrary \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     * Creates a Patient object based on given details."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * All field must be present and non-null."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public Patient(Name name, Nric nric, Phone phone, Email email, Address address, Set\u003cTag\u003e tags,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                   ArrayList\u003cAppointment\u003e appointmentList, MedicalRecord medicalRecord) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        super(name, nric, phone, email, address, tags, appointmentList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        this.latestMedicalRecord \u003d medicalRecord;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        this.medicalRecordLibrary.add(medicalRecord);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public Patient(Name name, Nric nric, Phone phone, Email email, Address address, Set\u003cTag\u003e tags,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                   MedicalRecord medicalRecord) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        super(name, nric, phone, email, address, tags);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        this.latestMedicalRecord \u003d medicalRecord;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        this.medicalRecordLibrary.add(medicalRecord);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public Patient(Name name, Nric nric, Phone phone, Email email, Address address, Set\u003cTag\u003e tags,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                   ArrayList\u003cAppointment\u003e appointmentList, MedicalRecord medicalRecord,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                   ArrayList\u003cMedicalRecord\u003e medicalRecordLibrary) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        super(name, nric, phone, email, address, tags, appointmentList);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        this.latestMedicalRecord \u003d medicalRecord;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        this.medicalRecordLibrary \u003d medicalRecordLibrary;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public Patient(Name name, Nric nric, Phone phone, Email email, Address address, Set\u003cTag\u003e tags,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                   ArrayList\u003cAppointment\u003e appointmentList, ArrayList\u003cMedicalRecord\u003e medicalRecordLibrary) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        super(name, nric, phone, email, address, tags, appointmentList);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        this.medicalRecordLibrary \u003d medicalRecordLibrary;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        if (!medicalRecordLibrary.isEmpty()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            latestMedicalRecord \u003d medicalRecordLibrary.get(0);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            // TODO: this is a quick fix for null MR error"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            latestMedicalRecord \u003d new MedicalRecord(\"\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public Patient(Name name, Nric nric, Phone phone, Email email, Address address, Set\u003cTag\u003e tags,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                   ArrayList\u003cMedicalRecord\u003e medicalRecordLibrary) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        super(name, nric, phone, email, address, tags);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        this.medicalRecordLibrary \u003d medicalRecordLibrary;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        if (!medicalRecordLibrary.isEmpty()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            latestMedicalRecord \u003d medicalRecordLibrary.get(0);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            // TODO: this is a quick fix for null MR error"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            latestMedicalRecord \u003d new MedicalRecord(\"\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * Creates a new Patient object based on given details."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * All field must be present and non-null."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public Patient(Name name, Nric nric, Phone phone, Email email, Address address, Set\u003cTag\u003e tags,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                   Appointment appointment, MedicalRecord medicalRecord) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        super(name, nric, phone, email, address, tags, appointment);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        this.latestMedicalRecord \u003d medicalRecord;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        this.medicalRecordLibrary \u003d new ArrayList\u003c\u003e(Arrays.asList(medicalRecord));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public MedicalRecord getMedicalRecord() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        return this.latestMedicalRecord;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public ArrayList\u003cMedicalRecord\u003e getMedicalRecordLibrary() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        return this.medicalRecordLibrary;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a keyword array for the {@code Patient}\u0027s {@code MedicalRecord} that lists all the relevant details."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * For use in {@code PersonContainsKeywordPredicate}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public ArrayList\u003cString\u003e getMedicalRecordKeywords() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cString\u003e keywordsList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        for (MedicalRecord record : this.medicalRecordLibrary) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            keywordsList.add(record.getDate());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            keywordsList.add(record.getDiagnosis());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            keywordsList.add(record.getTreatment());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            keywordsList.add(record.getComments());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywordsList;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Check if the patient is the same as other patient."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * @param otherPatient The other patient to compare to."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * @return True if the two patient are the same."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public boolean isSamePerson(Patient otherPatient) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        if (otherPatient \u003d\u003d this) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            return otherPatient !\u003d null \u0026\u0026 otherPatient.getNric().equals(getNric());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (obj instanceof Patient) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            Patient otherPatient \u003d (Patient) obj;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return super.equals(otherPatient);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        return Objects.hash(getName(), getNric(), getPhone(), getEmail(), getAddress(), getMedicalRecord(),"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                getMedicalRecordLibrary(), getTags());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .append(\" NRIC: \")"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .append(getNric())"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .append(\" Medical Records: \")"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .append(getMedicalRecord())"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .append(\" Latest Appointment: \")"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .append(getAppointment())"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .append(\" AppointmentList: \")"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .append(getAppointmentList())"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Returns a Xml Adapted version of this patient object."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Overwrites the method in the super class, {@code Person}."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Asserts that this person is an instance of a Patient."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public XmlAdaptedPerson toXmlVersion(Person source) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assert source instanceof Patient;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return XmlAdaptedPatient.adaptToXml((Patient) source);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 110,
      "GaryGohYP": 35,
      "nelvintan": 27,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/Treatment.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": " * Represents a diagnosis in a medical record."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "public class Treatment {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     * The first character of the treatment must not be a whitespace,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public static final String TREATMENT_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public static final String MESSAGE_TREATMENT_CONSTRAINTS \u003d \"Treatments can take any values, \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            + \"and should not be blank.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    /** String representation of the treatment */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    private String treatment;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public Treatment (String treatment) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        this.treatment \u003d treatment;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     * @return whether this treatment is a valid treatment."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public boolean isValid() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        return this.treatment.matches(TREATMENT_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public String getFailureReason() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        assert(!isValid());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        return MESSAGE_TREATMENT_CONSTRAINTS;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        if (obj instanceof Treatment) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            Treatment otherTreatment \u003d (Treatment) obj;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            return treatment.equals(otherTreatment.treatment);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        return this.treatment;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GaryGohYP": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Appointment.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " * Represents a Person\u0027s Appointment in the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "public class Appointment extends DisplayableAttribute {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /** Number of parts of an appointment */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    private static int numberOfParts \u003d 7;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /** String value of whole appointment **/"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /** Date of appointment */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /** Starting time of appointment */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    private Time startTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /** Ending time of appointment */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    private Time endTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /** Name of doctor */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    private Name doctorName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /** Medical department of doctorName */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    private Nric doctorNric;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /** Name of patient */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    private Name patientName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /** nric of patient */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    private Nric patientNric;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    // Constructor used during junit testing."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public Appointment(String appointment) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        requireNonNull(appointment);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        value \u003d appointment;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        String[] parts \u003d value.split(\",\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        if (parts.length \u003d\u003d numberOfParts) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            date \u003d new Date(parts[0].trim());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            startTime \u003d new Time(parts[1].trim());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            endTime \u003d new Time(parts[2].trim());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            doctorName \u003d new Name(parts[3].trim());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            doctorNric \u003d new Nric(parts[4].trim());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            patientName \u003d new Name(parts[5].trim());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            patientNric \u003d new Nric(parts[6].trim());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public Appointment(Date date, Time startTime, Time endTime, Name doctorName, Nric doctorNric, Name patientName,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                       Nric patientNric) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.doctorName \u003d doctorName;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.doctorNric \u003d doctorNric;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.patientName \u003d patientName;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.patientNric \u003d patientNric;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        value \u003d date.toString() + \",\" + startTime.toString() + \",\" + endTime.toString()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + \",\" + doctorName.toString() + \",\" + doctorNric.toString() + \",\" + patientName.toString()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + \",\" + patientNric.toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    // Constructor used when taking in inputs from parser."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public Appointment(String date, String startTime, String endTime,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                       String doctorName, String doctorNric, String patientName, String patientNric) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        value \u003d date + \",\" + startTime + \",\" + endTime"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                + \",\" + doctorName + \",\" + doctorNric + \",\" + patientName + \",\" + patientNric;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        this.date \u003d new Date(date);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        this.startTime \u003d new Time(startTime);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        this.endTime \u003d new Time(endTime);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        this.doctorName \u003d new Name(doctorName);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        this.doctorNric \u003d new Nric(doctorNric);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        this.patientName \u003d new Name(patientName);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        this.patientNric \u003d new Nric(patientNric);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public String getDateString() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return date.toString();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public String getStartTimeString() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return startTime.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public String getEndTimeString() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return endTime.toString();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public String getDoctorNameString() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return doctorName.toString();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public String getDoctorNricString() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return doctorNric.toString();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public Name getDoctorName() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return doctorName;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public Nric getDoctorNric() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return doctorNric;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public String getPatientNameString() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return patientName.toString();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public Name getPatientName() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return patientName;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public Nric getPatientNric() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return patientNric;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public String getPatientNricString() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return patientNric.toString();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * Checks if there are any clashes between another appointment"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * compared to this appointment."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @param otherAppointment another appointment"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @return Boolean if there is any clash."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public boolean isClash(Appointment otherAppointment) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // different date means definitely no clash"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        if (!date.equals(otherAppointment.date)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Time otherStartTime \u003d otherAppointment.startTime;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Time otherEndTime \u003d otherAppointment.endTime;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // 3 Cases where other appointment clashes with current appointment"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        if (otherStartTime.comesBefore(startTime) \u0026\u0026 otherEndTime.comesAfter(endTime)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            // Case 1: other appointment\u0027s start time is before current appointment\u0027s start time"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            // and other appointment\u0027s end time is after current appointment\u0027s end time"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        } else if (otherStartTime.comesAfter(startTime) \u0026\u0026 otherStartTime.comesBefore(endTime)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            // Case 2: other appointment\u0027s start time is after current appointment\u0027s start time"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            // and before current appointment\u0027s end time"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        } else if (otherEndTime.comesBefore(endTime) \u0026\u0026 otherEndTime.comesAfter(startTime)) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            // Case 3: Other appointment\u0027s end time is before current appointment\u0027s end time"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            // and after current appointment\u0027s start time"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @param time a given time input"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @return whether the appointment is ongoing at the given date and time."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public boolean isOngoing(String date, String time) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // If different date, we know for sure Appointment is not ongoing."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        if (!this.date.equals(new Date(date))) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Time givenTime \u003d new Time(time);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return (givenTime.comesAfter(startTime) \u0026\u0026 givenTime.comesBefore(endTime));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Returns true if instance is a valid Appointment object."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public boolean isOfCorrectNumberOfParts() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        String[] parts \u003d value.split(\",\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return (\"\".equals(value) || parts.length \u003d\u003d Appointment.numberOfParts);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @param person to be tested"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @return boolean on whether the person is a valid doctor."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public boolean hasValidDoctor(Person person) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Doctor doctor \u003d (Doctor) person;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Name name \u003d doctor.getName();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Nric doctorNric \u003d doctor.getNric();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        if (doctorName.equals(name) \u0026\u0026 this.doctorNric.equals(doctorNric)) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @param person to be tested."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @return boolean on whether the person is a valid patient."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public boolean hasValidPatient(Person person) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Patient patient \u003d (Patient) person;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Name name \u003d patient.getName();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Nric nric \u003d patient.getNric();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        if (patientName.equals(name) \u0026\u0026 patientNric.equals(nric)) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @return boolean on whether the start time comes strictly before end time."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public boolean hasValidStartandEndTime() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return (startTime.comesBeforeStrictly(endTime));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * Test only used in junit testing."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @return whether an appointment is valid or not."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public boolean isValidAppointment() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        if (\"\".equals(value)) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            // For junit testing."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return isOfCorrectNumberOfParts() \u0026\u0026 hasValidStartandEndTime();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        if (obj instanceof Appointment) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            Appointment appointment \u003d (Appointment) obj;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return appointment.value.toUpperCase().equals(this.value.toUpperCase());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 30,
      "nelvintan": 222
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/AppointmentManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " * Manages {@code Appointment} objects to check for clashes."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "public class AppointmentManager {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * Checks if there are any clashes between another appointment"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * compared to all the appoinments in the appointment list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @param appointmentList list of appointments"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @param otherAppointment  another appointment"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @return Boolean if there is any clash between other appointment and the list of appointments."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public static boolean isClash(ArrayList\u003cAppointment\u003e appointmentList, Appointment otherAppointment) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        for (Appointment currentAppointment : appointmentList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            if (currentAppointment.isClash(otherAppointment)) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Checks if there are any clashes between another appointment."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * @param appointment current appointment"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * @param otherAppointment  another appointment"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * @return Boolean if there is any clash between other appointment and current appointment"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static boolean isClash(Appointment appointment, Appointment otherAppointment) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (appointment.isClash(otherAppointment)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public static void displaySchedule(ArrayList\u003cAppointment\u003e appointmentList) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return; // connect to UI somehow?!?"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * Adds an appointment to a list of appointments."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @param appointmentList list of appointments"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @param appointment  another appointment"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @return appointment list with the new appointment added."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public static ArrayList\u003cAppointment\u003e add(ArrayList\u003cAppointment\u003e appointmentList, Appointment appointment) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointmentList.add(appointment);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return appointmentList;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * Deletes an appointment from a list of appointments if it"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * matches any appointment in the list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @param appointmentList list of appointments"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @param appointment  another appointment"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @return appointment list without the matched appointment if it is found."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public static ArrayList\u003cAppointment\u003e delete(ArrayList\u003cAppointment\u003e appointmentList, Appointment appointment) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointmentList.remove(appointment);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return appointmentList;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @param appointmentList a list of Appointments."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @return a boolean stating if there exists any appointment ongoing at the current time."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public static boolean isAnyAppointmentOngoing(ArrayList\u003cAppointment\u003e appointmentList) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (appointmentList \u003d\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // We first retrieve the current date and time in the same format as Appointment\u0027s."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        String[] dateAndTime \u003d getCurrentDateAndTime().split(\",\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        String currentDate \u003d dateAndTime[0];"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        String currentTime \u003d dateAndTime[1];"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // System.out.println(currentDate + \" \" + currentTime);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // We check if the current time lies in the time interval of any Appointment."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        for (Appointment appt : appointmentList) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            if (appt.value.equals(\"\")) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            } else if (appt.isOngoing(currentDate, currentTime)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * Extracts the current date and time from the java API for Singapore\u0027s timezone."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * Afterwards, format of date and time will be changed to that of Appointment\u0027s for easy comparison."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @return a String containing the current date and time that aligns with the same format as Appointment."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    private static String getCurrentDateAndTime() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return Date.getCurrentDate().toString() + \",\" + Time.getCurrentTime().toString();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 25,
      "nelvintan": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Date.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import java.time.ZonedDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": " * Represents a date in the address book."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "public class Date {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     * Dates should be in DD.MM.YYYY format. Date and month can be 1 or 2 digits long"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public static final String DATE_VALIDATION_REGEX \u003d \"^\\\\d{1,2}\\\\.\\\\d{1,2}\\\\.\\\\d{4}\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public static final String MESSAGE_DATE_INVALID_FORMAT_CONSTRAINTS \u003d \"Dates should be entered in DD.MM.YYYY format.\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            + \" Date and month can have 1 or 2 digits, but the year must be 4 digits.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public static final String MESSAGE_DATE_INVALID_IN_THE_PAST \u003d \"This date is in the past and not in the future: \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public static final String MESSAGE_DATE_INVALID_DOES_NOT_EXIST \u003d \"This date does not exist: \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final ArrayList\u003cInteger\u003e monthsWithThirtyOneDays \u003d new ArrayList\u003c\u003e(Arrays.asList(1, 3, 5, 7, 8, 10,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            12));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final ArrayList\u003cInteger\u003e monthsWithThirtyDays \u003d new ArrayList\u003c\u003e(Arrays.asList(4, 6, 9, 11));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    /** String representation of the date */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public Date(String date) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     * Checks if the date is a valid date."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     * @return whether this date is a valid date."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static boolean isValidDate(String date) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return isCorrectFormat(date) \u0026\u0026 !isInThePast(date) \u0026\u0026 doesExist(date);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static boolean isCorrectFormat(String date) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return date.matches(DATE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     * Checks if a given date in the correct format exists."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     * @return whether given date exists."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static boolean doesExist(String dateToCheck) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (!isCorrectFormat(dateToCheck)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        boolean result \u003d true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        List\u003cString\u003e valueList \u003d Arrays.asList(dateToCheck.split(\"\\\\.\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        int date \u003d Integer.parseInt(valueList.get(0));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        int month \u003d Integer.parseInt(valueList.get(1));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        int year \u003d Integer.parseInt(valueList.get(2));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        System.out.println(monthsWithThirtyOneDays.contains(month));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        if (date \u003c 1) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            result \u003d false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        } else if (monthsWithThirtyDays.contains(month) \u0026\u0026 (date \u003e 30)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            result \u003d false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        } else if (monthsWithThirtyOneDays.contains(month) \u0026\u0026 (date \u003e 31)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            result \u003d false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        } else if (month \u003d\u003d 2 \u0026\u0026 isLeapYear(year) \u0026\u0026 (date \u003e 29)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            result \u003d false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        } else if (month \u003d\u003d 2 \u0026\u0026 !isLeapYear(year) \u0026\u0026 (date \u003e 28)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            result \u003d false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * Checks if the given date is in the past based on current date in Singapore\u0027s time zone."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @return whether the given date is in the past."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static boolean isInThePast(String givenDate) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        ZonedDateTime zonedDateTime \u003d ZonedDateTime.now(ZoneId.of(\"Asia/Singapore\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        String stringZonedDateTime \u003d zonedDateTime.toString();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // Splitting output from API into a date part and a time part."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        String[] dateAndTimeParts \u003d stringZonedDateTime.split(\"T\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // Reformatting the order of the date."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        String currentDate \u003d dateAndTimeParts[0];"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        String[] dateParts \u003d currentDate.split(\"-\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        String year \u003d dateParts[0];"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        String month \u003d dateParts[1];"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        String day \u003d dateParts[2];"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        currentDate \u003d day + \".\" + month + \".\" + year;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return (isBefore(currentDate, givenDate));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * Checks if the given date is strictly before the current date."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @param currentDate"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @return whether the given date comes before the current date."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static boolean isBefore(String currentDate, String givenDate) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        List\u003cString\u003e dateParts \u003d Arrays.asList(givenDate.split(\"\\\\.\"));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        int day \u003d Integer.parseInt(dateParts.get(0));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        int month \u003d Integer.parseInt(dateParts.get(1));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        int year \u003d Integer.parseInt(dateParts.get(2));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        List\u003cString\u003e currentDateParts \u003d Arrays.asList(currentDate.split(\"\\\\.\"));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        int currentDay \u003d Integer.parseInt(currentDateParts.get(0));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        int currentMonth \u003d Integer.parseInt(currentDateParts.get(1));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        int currentYear \u003d Integer.parseInt(currentDateParts.get(2));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        if (year \u003c currentYear) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        } else if (month \u003c currentMonth) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        } else if (month \u003e currentMonth) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        } else if (day \u003c currentDay) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static boolean isLeapYear(int year) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        return (year % 4 \u003d\u003d 0) \u0026\u0026 (year % 100 !\u003d 0 || year % 400 \u003d\u003d 0);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static String getFailureReason(String date) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (isValidDate(date)) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            return \"Date is valid.\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        String reason;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (!isCorrectFormat(date)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            reason \u003d MESSAGE_DATE_INVALID_FORMAT_CONSTRAINTS;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        } else if (isInThePast(date)) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            reason \u003d MESSAGE_DATE_INVALID_IN_THE_PAST + date;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            reason \u003d MESSAGE_DATE_INVALID_DOES_NOT_EXIST + date;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        return reason;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static Date getCurrentDate() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        ZonedDateTime zonedDateTime \u003d ZonedDateTime.now(ZoneId.of(\"Asia/Singapore\"));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String stringZonedDateTime \u003d zonedDateTime.toString();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // Splitting output from API into a date part and a time part."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String[] dateAndTimeParts \u003d stringZonedDateTime.split(\"T\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // Reformatting the order of the date."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String currentDate \u003d dateAndTimeParts[0];"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String[] dateParts \u003d currentDate.split(\"-\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String year \u003d dateParts[0];"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String month \u003d dateParts[1];"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String day \u003d dateParts[2];"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        currentDate \u003d day + \".\" + month + \".\" + year;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return new Date(currentDate);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        if (obj instanceof Date) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            Date otherDate \u003d (Date) obj;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            return date.equals(otherDate.date);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 42,
      "GaryGohYP": 91,
      "nelvintan": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/DisplayableAttribute.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": " * Classes that extend this class can be displayed on the display panel"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "public abstract class DisplayableAttribute {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    //No fields yet, may want to consider adding fields and methods."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "GaryGohYP": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Nric.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " * Represents a Patient\u0027s NRIC in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "public class Nric {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String MESSAGE_NRIC_CONSTRAINTS \u003d \"NRIC should contain only alphanumeric \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            + \"characters and should not be left blank.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String NRIC_VALIDATION_REGEX \u003d \"(?i)^[STFG]\\\\d{7}[A-Z]\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public final String code;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Constructs a {@code NRIC}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * @param code A NRIC with valid format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public Nric(String code) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        requireNonNull(code);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        checkArgument(isValidNric(code), MESSAGE_NRIC_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.code \u003d code;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Returns true if a given string has a valid NRIC format."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static boolean isValidNric(String code) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return code.matches(NRIC_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return this.code;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return obj \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                || (obj instanceof Nric // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \u0026\u0026 code.equalsIgnoreCase(((Nric) obj).code)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return code.hashCode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.storage.XmlAdaptedPerson;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private final Nric nric;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    // Common Data fields"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    private Appointment appointment \u003d new Appointment(\"\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    private ArrayList\u003cAppointment\u003e appointmentList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * An empty {@code Appointment} will be created by default."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public Person(Name name, Nric nric, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        requireAllNonNull(name, phone, email, address, nric, tags);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public Person(Name name, Nric nric, Phone phone, Email email, Address address, Set\u003cTag\u003e tags,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                  Appointment appointment) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags, nric, appointment);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        this.appointment \u003d appointment;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointmentList.add(appointment);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public Person(Name name, Nric nric, Phone phone, Email email, Address address,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                  Set\u003cTag\u003e tags, ArrayList\u003cAppointment\u003e appointmentList) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags, appointmentList);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        this.appointmentList \u003d appointmentList;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // Set appointment to be the last scheduled appointment"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        if (!this.appointmentList.isEmpty()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            appointment \u003d this.appointmentList.get(this.appointmentList.size() - 1);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public Nric getNric() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return nric;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public Appointment getAppointment() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return appointment;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public ArrayList\u003cAppointment\u003e getAppointmentList() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return appointmentList;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * Empties out the AppointmentList to assist junit testing."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * This prevents appointments collected from different tests to clash."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public void clearAppointmentList() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointmentList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Checks for clash with the appointment that is to be scheduled."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public boolean hasClash(Appointment newAppointment) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return AppointmentManager.isClash(appointmentList, newAppointment);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return otherPerson !\u003d null \u0026\u0026 otherPerson.getNric().equals(this.getNric());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Returns an Xml version of this Person instance."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * This method is to be overwritten by {@code Patient} and {@code Doctor} class."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public XmlAdaptedPerson toXmlVersion(Person source) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return XmlAdaptedPerson.adaptToXml(source);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \u0026\u0026 otherPerson.getNric().equals(getNric())"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return Objects.hash(name, phone, email, address, nric, tags, appointmentList);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .append(\" NRIC: \")"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .append(getNric())"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .append(\" Latest Appointment: \")"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .append(getAppointment())"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .append(\" AppointmentList: \")"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .append(getAppointmentList())"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 36,
      "-": 121,
      "nelvintan": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/PersonContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GLOBAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICAL_DEPARTMENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICAL_RECORD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": " * Tests that a {@code Person}\u0027s attributes matches any of the keywords given."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "public class PersonContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e personSearchKeywords;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public PersonContainsKeywordsPredicate(Map\u003cPrefix, List\u003cString\u003e\u003e personSearchKeywords) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.personSearchKeywords \u003d personSearchKeywords;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(person.getName()).append(\" \")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .append(person.getNric()).append(\" \")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(person.getPhone()).append(\" \")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(person.getEmail()).append(\" \")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(person.getAddress().toString().replaceAll(\",\", \"\")).append(\" \")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(person.getClass().getSimpleName()).append(\" \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        person.getTags().stream()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .map(x -\u003e x.toString().replaceAll(\"[\\\\[\\\\]]\", \"\"))"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(x -\u003e x + \" \")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .forEach(builder::append);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        if (person instanceof Doctor) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(((Doctor) person).getMedicalDepartment()).append(\" \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        } else if (person instanceof Patient) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(person.getNric()).append(\" \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            for (String s : ((Patient) person).getMedicalRecordKeywords()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                builder.append(s + \" \");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean isAnyKeywordMatch \u003d personSearchKeywords.get(PREFIX_GLOBAL) \u003d\u003d null"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || personSearchKeywords.get(PREFIX_GLOBAL).stream().anyMatch(keyword -\u003e {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                    return StringUtil.containsQueryIgnoreCase(builder.toString().replaceAll(\",\", \" \"),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                            keyword);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                });"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean isAnyNameMatch \u003d personSearchKeywords.get(PREFIX_NAME) \u003d\u003d null"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                || personSearchKeywords.get(PREFIX_NAME).stream()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(name -\u003e StringUtil.containsQueryIgnoreCase(person.getName().toString(), name));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean isAnyNricMatch \u003d personSearchKeywords.get(PREFIX_NRIC) \u003d\u003d null"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                || personSearchKeywords.get(PREFIX_NRIC).stream()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(nric -\u003e StringUtil.containsQueryIgnoreCase(person.getNric().toString(), nric));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean isAnyPhoneMatch \u003d personSearchKeywords.get(PREFIX_PHONE) \u003d\u003d null"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                || personSearchKeywords.get(PREFIX_PHONE).stream()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(phone -\u003e StringUtil.containsQueryIgnoreCase(person.getPhone().toString(), phone));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean isAnyEmailMatch \u003d personSearchKeywords.get(PREFIX_EMAIL) \u003d\u003d null"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                || personSearchKeywords.get(PREFIX_EMAIL).stream()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(email -\u003e StringUtil.containsQueryIgnoreCase(person.getEmail().toString(), email));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean isAnyAddressMatch \u003d personSearchKeywords.get(PREFIX_ADDRESS) \u003d\u003d null"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                || personSearchKeywords.get(PREFIX_ADDRESS).stream()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(address -\u003e StringUtil.containsQueryIgnoreCase(person.getAddress().toString(), address));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean isAnyRoleMatch \u003d personSearchKeywords.get(PREFIX_ROLE) \u003d\u003d null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                || personSearchKeywords.get(PREFIX_ROLE).stream()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(role -\u003e StringUtil.containsQueryIgnoreCase(person.getClass().getSimpleName(), role));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean isAnyTagMatch \u003d personSearchKeywords.get(PREFIX_TAG) \u003d\u003d null"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                || personSearchKeywords.get(PREFIX_TAG).stream()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(tag -\u003e StringUtil.containsQueryIgnoreCase(person.getTags().toString(), tag));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean isAnyMedicalDepartmentMatch \u003d personSearchKeywords.get(PREFIX_MEDICAL_DEPARTMENT) \u003d\u003d null"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                || person instanceof Doctor \u0026\u0026 personSearchKeywords.get(PREFIX_MEDICAL_DEPARTMENT).stream()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .anyMatch(medicalDepartment -\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                        StringUtil.containsQueryIgnoreCase(((Doctor) person).getMedicalDepartment().toString(),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                                medicalDepartment));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean isAnyMedicalRecordMatch \u003d personSearchKeywords.get(PREFIX_MEDICAL_RECORD) \u003d\u003d null;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (person instanceof Patient \u0026\u0026 personSearchKeywords.get(PREFIX_MEDICAL_RECORD) !\u003d null) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            for (String keywords : personSearchKeywords.get(PREFIX_MEDICAL_RECORD)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                for (String medicalRecord : ((Patient) person).getMedicalRecordKeywords()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                    isAnyMedicalRecordMatch \u003d isAnyMedicalRecordMatch"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                            || StringUtil.containsQueryIgnoreCase(medicalRecord, keywords);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return isAnyKeywordMatch"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 isAnyNameMatch"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 isAnyNricMatch"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 isAnyPhoneMatch"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 isAnyEmailMatch"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 isAnyAddressMatch"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 isAnyRoleMatch"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 isAnyTagMatch"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 isAnyMedicalDepartmentMatch"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 isAnyMedicalRecordMatch;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                || (other instanceof PersonContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \u0026\u0026 personSearchKeywords.equals(((PersonContainsKeywordsPredicate) other)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .personSearchKeywords)); // state check"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngkangtze": 34,
      "guestuser0123": 36,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Role.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " * Represents the roles that a person can be, i.e. Either a Patient or a Doctor."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "public enum Role {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    DOCTOR,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    PATIENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String MESSAGE_ROLE_CONSTRAINTS \u003d \"Role should only be \u0027Doctor\u0027 or \u0027Patient\u0027\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Checks that the given string is a valid {@code Role}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * @param role Given input to check."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * @return True if given string is a valid role (case-insensitive)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static boolean isValidRole(String role) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return Arrays.stream(Role.values()).anyMatch(modelRole -\u003e modelRole.toString().equals(role.toUpperCase()));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Time.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import java.time.ZonedDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nelvintan"
        },
        "content": " * Represents a time in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nelvintan"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "public class Time {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     * Time should be in 24 hour format, HHMM."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public static final String TIME_VALIDATION_REGEX \u003d \"^\\\\d{4}\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public static final String MESSAGE_TIME_INVALID_FORMAT_CONSTRAINTS \u003d \"Time should be entered in 24 hr clock format.\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            + \" e.g. 1330 represents 1:30 pm. \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public static final String MESSAGE_TIME_INVALID_DOES_NOT_EXIST \u003d \"This time does not exist: \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    /** String representation of the time **/"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    private String time;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public Time(String time) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * Checks loosely if current time is before other time."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * Loosely means if the 2 times are equal, the method will still"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * return true."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @param otherTiming"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @return boolean stating if current time comes before otherTiming"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public boolean comesBefore(Time otherTiming) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        int currentTime \u003d Integer.parseInt(time.trim());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        int otherTime \u003d Integer.parseInt(otherTiming.time.trim());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return (currentTime \u003c\u003d otherTime);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * Checks loosely if current time is after other time."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * Loosely means if the 2 times are equal, the method will still"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * return true."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @param otherTiming"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @return oolean stating if current time comes after otherTiming"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public boolean comesAfter(Time otherTiming) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        int currentTime \u003d Integer.parseInt(time.trim());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        int otherTime \u003d Integer.parseInt(otherTiming.time.trim());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return (currentTime \u003e\u003d otherTime);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * Checks strictly if current time is before other time."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * Strictly means current time must be strictly less than other time"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * for the method to return true."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @param otherTiming"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @return boolean stating if current time comes before otherTiming"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public boolean comesBeforeStrictly(Time otherTiming) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        int currentTime \u003d Integer.parseInt(time.trim());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        int otherTime \u003d Integer.parseInt(otherTiming.time.trim());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return (currentTime \u003c otherTime);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * Checks loosely if current time is after other time."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * Strictly means current time must be strictly greater than other time"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * for the method to return true."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @param otherTiming"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public boolean comesAfterStrictly(Time otherTiming) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        int currentTime \u003d Integer.parseInt(time.trim());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        int otherTime \u003d Integer.parseInt(otherTiming.time.trim());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return (currentTime \u003e otherTime);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @return whether this time is a valid time."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static boolean isValidTime(String time) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return isCorrectFormat(time) \u0026\u0026 doesExist(time);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static boolean isCorrectFormat(String time) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return time.matches(TIME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     * Checks if a given time in the correct format exists."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     * @return whether the given time exists."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static boolean doesExist(String time) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (!isCorrectFormat(time)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        boolean result \u003d true;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        int hour \u003d Integer.parseInt(time.substring(0, 2));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        int minute \u003d Integer.parseInt(time.substring(2));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        if (hour \u003c 0 || minute \u003c 0) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            result \u003d false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        } else if (hour \u003e 23 || minute \u003e 59) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            result \u003d false;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static String getFailureReason(String time) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (isValidTime(time)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            return \"Time is valid.\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        String reason;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (!isCorrectFormat(time)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            reason \u003d MESSAGE_TIME_INVALID_FORMAT_CONSTRAINTS;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            reason \u003d MESSAGE_TIME_INVALID_DOES_NOT_EXIST + time;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return reason;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static Time getCurrentTime() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        ZonedDateTime zonedDateTime \u003d ZonedDateTime.now(ZoneId.of(\"Asia/Singapore\"));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String stringZonedDateTime \u003d zonedDateTime.toString();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // Splitting output from API into a date part and a time part."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String[] dateAndTimeParts \u003d stringZonedDateTime.split(\"T\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // Reformatting the oder of the time."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String currentTime \u003d dateAndTimeParts[1];"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String[] currentTimeParts \u003d currentTime.split(\":\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String hour \u003d currentTimeParts[0];"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String minute \u003d currentTimeParts[1];"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        currentTime \u003d hour + minute;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return new Time(currentTime);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        if (obj instanceof Time) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            Time otherTime \u003d (Time) obj;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            return time.equals(otherTime.time);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 31,
      "GaryGohYP": 26,
      "nelvintan": 103
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniquePersonList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Person toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Returns true if the list contains a person with such parameters."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public boolean hasSuchPerson(Name name, Nric nric) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        requireAllNonNull(name, nric);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return internalList.stream().anyMatch(person -\u003e person.getName().equals(name) \u0026\u0026 person.getNric().equals(nric));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * Returns true if the list contains a Patient with such parameters."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public boolean hasSuchPatient(Name name, Nric nric) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        requireAllNonNull(name, nric);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return internalList.stream().anyMatch(person -\u003e person.getName().equals(name)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                \u0026\u0026 person.getNric().equals(nric) \u0026\u0026 (person instanceof Patient));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * Returns true if the list contains a Doctor with such parameters."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public boolean hasSuchDoctor(Name name, Nric nric) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        requireAllNonNull(name, nric);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return internalList.stream().anyMatch(person -\u003e person.getName().equals(name)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                \u0026\u0026 person.getNric().equals(nric) \u0026\u0026 (person instanceof Doctor));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Returns an {@code Optional\u003cPerson\u003e} with the given {@code nric}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public Optional\u003cPerson\u003e getPerson(Nric nric) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        requireNonNull(nric);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return internalList.stream().filter(person -\u003e person.getNric().equals(nric)).findAny();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Person toRemove) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(UniquePersonList replacement) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean personsAreUnique(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 17,
      "-": 135,
      "nelvintan": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.doctor.MedicalDepartment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.patient.MedicalRecord;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.model.person.Appointment;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    // NOTE: Error when whitespace inserted Appointment"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public static final ArrayList\u003cAppointment\u003e SAMPLE_APPOINTMENT_LIST_A \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    new Appointment(\"22.11.2018,1300,1400,Bernice Yu,S1010101A,Alex Yeoh,S1234567A\")));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public static final ArrayList\u003cAppointment\u003e SAMPLE_APPOINTMENT_LIST_B \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    new Appointment(\"22.11.2018,1300,1400,Bernice Yu,S1010101A,Alex Yeoh,S1234567A\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    new Appointment(\"22.11.2018,1401,1430,Bernice Yu,S1010101A,Charlotte Oliveiro,S2020202B\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    new Appointment(\"22.11.2018,1431,1445,Bernice Yu,S1010101A,David Li,S9991114A\")));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public static final ArrayList\u003cAppointment\u003e SAMPLE_APPOINTMENT_LIST_C \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    new Appointment(\"22.11.2018,1401,1430,Bernice Yu,S1010101A,Charlotte Oliveiro,S2020202B\")));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public static final ArrayList\u003cAppointment\u003e SAMPLE_APPOINTMENT_LIST_D \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    new Appointment(\"22.11.2018,1431,1445,Bernice Yu,S1010101A,David Li,S9991114A\")));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            new Patient(new Name(\"Alex Yeoh\"), new Nric(\"S1234567A\"), new Phone(\"87438807\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    new Email(\"alexyeoh@example.com\"), new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    getTagSet(\"friends\"), SAMPLE_APPOINTMENT_LIST_A,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    new MedicalRecord(\"12.12.2018\", \"flu\", \"tamiflu\", \"\")),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            new Doctor(new Name(\"Bernice Yu\"), new Nric(\"S1010101A\"), new Phone(\"99272758\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    new Email(\"berniceyu\" + \"@example.com\"), new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    getTagSet(\"colleagues\", \"friends\"), SAMPLE_APPOINTMENT_LIST_B,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    new MedicalDepartment(\"Neurology\")),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            new Patient(new Name(\"Charlotte Oliveiro\"), new Nric(\"S2020202B\"), new Phone(\"93210283\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    new Email(\"charlotte@example.com\"), new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    getTagSet(\"neighbours\"), SAMPLE_APPOINTMENT_LIST_C,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    new MedicalRecord(\"22.22.2017\", \"cough\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                            \"Dextromethorphan\", \"take thrice a day\")),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            new Patient(new Name(\"David Li\"), new Nric(\"S9991114A\"), new Phone(\"91031282\"),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    new Email(\"lidavid@example.com\"), new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    getTagSet(\"family\"), SAMPLE_APPOINTMENT_LIST_D,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    new MedicalRecord(\"20.10.2018\", \"Stage 3 testicular cancer\","
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                            \"Orchiectomy for both testicles\", \"15% chance of survival\")),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            new Doctor(new Name(\"Irfan Ibrahim\"), new Nric(\"S3030303C\"), new Phone(\"92492021\"), new Email(\"irfan\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    + \"@example.com\"), new Address(\"Blk 47 Tampines Street 20, #17-35\"), getTagSet(\"classmates\"),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    new MedicalDepartment(\"Obstetrics\")),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            new Doctor(new Name(\"Roy Balakrishnan\"), new Nric(\"S4040404D\"), new Phone(\"92624417\"),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    new Email(\"royb@example.com\"), new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    getTagSet(\"colleagues\"), new MedicalDepartment(\"Cardiology\"))"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * Returns an Appointment list containing the list of strings given."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public static ArrayList\u003cAppointment\u003e getAppointmentsList(String... strings) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                .map(Appointment::new)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                .collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 24,
      "-": 42,
      "nelvintan": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedAppointment.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import javax.xml.bind.annotation.XmlValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.model.person.Appointment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " * JAXB-friendly adapted version of the Appointment."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "@XmlRootElement(name \u003d \"appointments\")"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "public class XmlAdaptedAppointment {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @XmlValue"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private String appointment;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Constructs an XmlAdaptedAppointment."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public XmlAdaptedAppointment() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Constructs an {@code XmlAdaptedAppointment} with the given appointment details."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public XmlAdaptedAppointment(String appointment) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.appointment \u003d appointment;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * Converts a given Appointmetn into this class for JAXB use."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @param appointment future changes to this will not affect the created"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public XmlAdaptedAppointment(Appointment appointment) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        String value \u003d appointment.toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        this.appointment \u003d value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Converts this jaxb-friendly adapted appointment object into the model\u0027s Appointment object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted appointment."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public String toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (!new Appointment(appointment).isValidAppointment()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            throw new IllegalValueException(\"Invalid Appointment Format\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return appointment;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (!(other instanceof XmlAdaptedAppointment)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return appointment.equals(((XmlAdaptedAppointment) other).appointment);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 52,
      "nelvintan": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedDoctor.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.doctor.MedicalDepartment;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " * JAXB-friendly version of the Doctor."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "public class XmlAdaptedDoctor extends XmlAdaptedPerson {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Constructs an {@code XmlAdaptedDoctor} with the given doctor details."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public XmlAdaptedDoctor(Doctor source) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        super(source);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        medicalDepartment \u003d source.getMedicalDepartment().deptName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Constructs an {@code XmlAdaptedPatient} with the given person details."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public XmlAdaptedDoctor(String name, String nric, String phone, String email, String address,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                            List\u003cXmlAdaptedTag\u003e tags, String appointment, String medicalDepartment) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        super(name, nric, phone, email, address, tags, appointment);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.medicalDepartment \u003d medicalDepartment;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.role \u003d \"Doctor\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Overwritten method to convert doctor into this class for JAXB use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * @param source Doctor object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * @return Xml Adapted version of the given Doctor object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static XmlAdaptedDoctor adaptToXml(Doctor source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return new XmlAdaptedDoctor(source);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Converts this jaxb-friendly adapted doctor object into the model\u0027s Doctor object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static Doctor convertToDoctorModelType (Person source, String medicalDept) throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Person modelPerson \u003d source;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (medicalDept \u003d\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    MedicalDepartment.class.getSimpleName()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (!MedicalDepartment.isValidMedDept(medicalDept)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            throw new IllegalValueException(MedicalDepartment.MESSAGE_DEPTNAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        final MedicalDepartment modelMedicalDept \u003d new MedicalDepartment(medicalDept);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return new Doctor(modelPerson.getName(), modelPerson.getNric(), modelPerson.getPhone(), modelPerson.getEmail(),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                modelPerson.getAddress(), modelPerson.getTags(), modelPerson.getAppointmentList(), modelMedicalDept);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (!(other instanceof XmlAdaptedDoctor)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        XmlAdaptedDoctor otherDoctor \u003d (XmlAdaptedDoctor) other;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return Objects.equals(name, otherDoctor.name)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \u0026\u0026 Objects.equals(nric, otherDoctor.nric)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \u0026\u0026 Objects.equals(phone, otherDoctor.phone)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \u0026\u0026 Objects.equals(email, otherDoctor.email)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \u0026\u0026 Objects.equals(address, otherDoctor.address)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \u0026\u0026 tagged.equals(otherDoctor.tagged)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \u0026\u0026 Objects.equals(appointmentList, otherDoctor.appointmentList)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \u0026\u0026 Objects.equals(medicalDepartment, otherDoctor.medicalDepartment);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 82,
      "nelvintan": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedMedicalRecord.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import javax.xml.bind.annotation.XmlValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import seedu.address.model.patient.MedicalRecord;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": " * JAXB-friendly adapted version of the MedicalRecord."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "@XmlRootElement(name \u003d \"medicalRecords\")"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "public class XmlAdaptedMedicalRecord {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    @XmlValue"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    private String medicalRecord;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     * Constructs an XmlAdaptedMedicalRecord."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public XmlAdaptedMedicalRecord() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     * Constructs an {@code XmlAdaptedMedicalRecord} with the given medical record details."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public XmlAdaptedMedicalRecord(String medicalRecord) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        String value \u003d medicalRecord;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        this.medicalRecord \u003d value;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     * Converts a given medicalRecord into this class for JAXB use."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     * @param medicalRecord future changes to this will not affect the created"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public XmlAdaptedMedicalRecord(MedicalRecord medicalRecord) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        this.medicalRecord \u003d medicalRecord.toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     * Converts this jaxb-friendly adapted medicalRecord object into the model\u0027s Appointment object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted appointment."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public String toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        if (!new MedicalRecord(medicalRecord).isValidMedicalRecord()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            throw new IllegalValueException(\"Invalid Medical Record\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        return medicalRecord;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        if (!(other instanceof XmlAdaptedMedicalRecord)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        return medicalRecord.equals(((XmlAdaptedMedicalRecord) other).medicalRecord);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GaryGohYP": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedPatient.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.patient.MedicalRecord;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " * JAXB-friendly version of the Patient."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "public class XmlAdaptedPatient extends XmlAdaptedPerson {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Constructs an {@code XmlAdaptedPatient} with the given patient details."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public XmlAdaptedPatient(Patient source) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        super(source);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        nric \u003d source.getNric().code;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        medicalRecord \u003d source.getMedicalRecord().value;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        medicalRecordLibrary \u003d source.getMedicalRecordLibrary().stream()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                .map(XmlAdaptedMedicalRecord::new)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Constructs an {@code XmlAdaptedPatient} with the given patient details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public XmlAdaptedPatient(String name, String nric, String phone, String email, String address,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                             String medicalRecord, List\u003cXmlAdaptedTag\u003e tags, String appointment) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        super(name, nric, phone, email, address, tags, appointment);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.medicalRecord \u003d medicalRecord;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        this.medicalRecordLibrary.add(new XmlAdaptedMedicalRecord(medicalRecord));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.role \u003d \"Patient\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Overwritten method to convert patient into this class for JAXB use."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * @param source Patient object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * @return Xml Adapted version of the given Patient object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static XmlAdaptedPatient adaptToXml(Patient source) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return new XmlAdaptedPatient(source);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Converts this jaxb-friendly adapted patient object into the model\u0027s Patient object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted patient"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public static Patient convertToPatientModelType(Person source, String medicalRecords,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                                                    ArrayList\u003cMedicalRecord\u003e medicalRecordLibrary) throws"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            IllegalValueException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        Person person \u003d source;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        if (medicalRecords \u003d\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                    MedicalRecord.class.getSimpleName()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        if (!(new MedicalRecord(medicalRecords)).isValidMedicalRecord()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            throw new IllegalValueException(MedicalRecord.MESSAGE_MEDICAL_RECORD_CONSTRAINTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        final MedicalRecord modelMedicalRecords \u003d new MedicalRecord(medicalRecords);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        final ArrayList\u003cMedicalRecord\u003e modelMedicalRecordLibrary \u003d new ArrayList\u003c\u003e (medicalRecordLibrary);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        return new Patient(person.getName(), person.getNric(), person.getPhone(), person.getEmail(),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                person.getAddress(), person.getTags(), person.getAppointmentList(), modelMedicalRecords,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                modelMedicalRecordLibrary);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (!(other instanceof XmlAdaptedPatient)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        XmlAdaptedPatient otherPatient \u003d (XmlAdaptedPatient) other;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return Objects.equals(name, otherPatient.name)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \u0026\u0026 Objects.equals(nric, otherPatient.nric)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \u0026\u0026 Objects.equals(phone, otherPatient.phone)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \u0026\u0026 Objects.equals(email, otherPatient.email)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \u0026\u0026 Objects.equals(address, otherPatient.address)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \u0026\u0026 tagged.equals(otherPatient.tagged)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \u0026\u0026 Objects.equals(appointmentList, otherPatient.appointmentList)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \u0026\u0026 Objects.equals(medicalRecord, otherPatient.medicalRecord);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 68,
      "GaryGohYP": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedPerson.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import seedu.address.model.patient.MedicalRecord;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.model.person.Appointment;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Role;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly version of the Person."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedPerson {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    protected String role;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    protected String name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    protected String nric;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    protected String phone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    protected String email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    protected String address;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    protected List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    protected String medicalRecord;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    protected List\u003cXmlAdaptedMedicalRecord\u003e medicalRecordLibrary \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    protected String medicalDepartment;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    protected String appointment;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    protected List\u003cXmlAdaptedAppointment\u003e appointmentList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an XmlAdaptedPerson."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedPerson() {}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code XmlAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public XmlAdaptedPerson(String name, String nric, String phone, String email, String address,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                            List\u003cXmlAdaptedTag\u003e tagged, String appointment) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.appointment \u003d appointment;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointmentList.add(new XmlAdaptedAppointment(appointment));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given Person into this class for JAXB use."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedPerson"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        role \u003d source.getClass().getSimpleName();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        nric \u003d source.getNric().code;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointment \u003d source.getAppointment().value;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointmentList \u003d source.getAppointmentList().stream()"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                .map(XmlAdaptedAppointment::new)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged \u003d source.getTags().stream()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Converts given person into this class for JAXB use."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * This method is to be overwritten by {@code XmlAdaptedPatient} and {@code XmlAdaptedDoctor} class."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static XmlAdaptedPerson adaptToXml(Person source) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return new XmlAdaptedPerson(source);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (role \u003d\u003d null) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Role.class.getSimpleName()));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (!Role.isValidRole(role)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            throw new IllegalValueException(Role.MESSAGE_ROLE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        final Role modelRole \u003d Role.valueOf(role.toUpperCase());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (nric \u003d\u003d null) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Nric.class.getSimpleName()));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (!Nric.isValidNric(nric)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            throw new IllegalValueException(Nric.MESSAGE_NRIC_CONSTRAINTS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        final Nric modelNric \u003d new Nric(nric);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        if (appointment \u003d\u003d null) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    Appointment.class.getSimpleName()));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        final ArrayList\u003cAppointment\u003e modelApptList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        for (XmlAdaptedAppointment appt : this.appointmentList) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                modelApptList.add(new Appointment(appt.toModelType()));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                throw e;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        final ArrayList\u003cMedicalRecord\u003e modelMedicalRecordLibrary \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        for (XmlAdaptedMedicalRecord medicalRecord : this.medicalRecordLibrary) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                modelMedicalRecordLibrary.add(new MedicalRecord(medicalRecord.toModelType()));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                throw e;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (modelRole.equals(Role.DOCTOR)) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return XmlAdaptedDoctor.convertToDoctorModelType(new Person(modelName, modelNric, modelPhone, modelEmail,"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    modelAddress, modelTags, modelApptList), medicalDepartment);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            assert modelRole.equals(Role.PATIENT); // person must be a patient if he/she is not a doctor."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return XmlAdaptedPatient.convertToPatientModelType(new Person(modelName, modelNric, modelPhone, modelEmail,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                    modelAddress, modelTags, modelApptList), medicalRecord, modelMedicalRecordLibrary);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlAdaptedPerson)) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson otherPerson \u003d (XmlAdaptedPerson) other;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(name, otherPerson.name)"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \u0026\u0026 Objects.equals(nric, otherPerson.nric)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(phone, otherPerson.phone)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(email, otherPerson.email)"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(address, otherPerson.address)"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagged.equals(otherPerson.tagged);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 61,
      "GaryGohYP": 12,
      "-": 133,
      "nelvintan": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlSerializableAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to XML format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "@XmlRootElement(name \u003d \"addressbook\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlSerializableAddressBook {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedPerson\u003e persons;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an empty XmlSerializableAddressBook."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * This empty constructor is required for marshalling."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlSerializableAddressBook() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Conversion"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlSerializableAddressBook(ReadOnlyAddressBook src) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        persons.addAll(src.getPersonList().stream().map(person -\u003e person.toXmlVersion(person))"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this addressbook into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code XmlAdaptedPerson}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedPerson p : persons) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            Person person \u003d p.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            if (addressBook.hasPerson(person)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.addPerson(person);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlSerializableAddressBook)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.equals(((XmlSerializableAddressBook) other).persons);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 2,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.ListElementPointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logic logic;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer historySnapshot;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(Logic logic) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d logic.getHistorySnapshot();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the key press event, {@code keyEvent}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleKeyPress(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (keyEvent.getCode()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        case UP:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            // As up and down buttons will alter the position of the caret,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            // consuming it causes the caret\u0027s position to remain unchanged"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToPreviousInput();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        case DOWN:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToNextInput();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case ESCAPE:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            handleCommandCancelled();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            // let JavaFx handle the keypress"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the previous input in {@code historySnapshot},"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a previous input in {@code historySnapshot}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToPreviousInput() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasPrevious()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.previous());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the next input in {@code historySnapshot},"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a next input in {@code historySnapshot}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToNextInput() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasNext()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.next());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets {@code CommandBox}\u0027s text field with {@code text} and"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * positions the caret to the end of the {@code text}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void replaceText(String text) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.setText(text);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.positionCaret(commandTextField.getText().length());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            historySnapshot.next();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            // process result of the command"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new NewResultAvailableEvent(commandResult.feedbackToUser));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            // handle command failure"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandTextField.getText());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new NewResultAvailableEvent(e.getMessage()));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the history snapshot."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initHistory() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d logic.getHistorySnapshot();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // the user if she tries to navigate past the most-recent end of the historySnapshot."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot.add(\"\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * Handles the escape button pressed event"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private void handleCommandCancelled() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        String feedbackToUser \u003d logic.cancelCommand();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        logger.info(\"Escape key pressed, command cancelled\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        raise(new NewResultAvailableEvent(feedbackToUser));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tristonpang": 15,
      "-": 151
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/DisplayPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.commons.events.model.PersonChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import seedu.address.commons.events.ui.DisplayPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import seedu.address.model.patient.MedicalRecord;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.model.person.Appointment;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import seedu.address.model.person.DisplayableAttribute;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": " * Panel containing the list of displayable attributes."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "public class DisplayPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static Person personOnDisplay;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    private static final String FXML \u003d \"DisplayPanel.fxml\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(DisplayPanel.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private ListView\u003cDisplayableAttribute\u003e displayableAppointmentsListView;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private ListView\u003cDisplayableAttribute\u003e displayableMedicalRecordsListView;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public DisplayPanel() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        showDefaultDisplayPanel();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private void setAppointmentsConnections(ObservableList\u003cDisplayableAttribute\u003e displayableList) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        displayableAppointmentsListView.setItems(displayableList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        displayableAppointmentsListView.setCellFactory(listView -\u003e new DisplayPanel.DisplayableListViewCell());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private void setMedicalRecordsConnections(ObservableList\u003cDisplayableAttribute\u003e displayableList) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        displayableMedicalRecordsListView.setItems(displayableList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        displayableMedicalRecordsListView.setCellFactory(listView -\u003e new DisplayPanel.DisplayableListViewCell());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private void handlePersonChangedEvent(PersonChangedEvent event) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (event.editedPerson \u003d\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            showDefaultDisplayPanel(); // if person is deleted or database has been cleared, show the default scene"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        } else if (!event.originalPerson.equals(personOnDisplay)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return; // if person updated in the event is not related to this person being displayed on the UI"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        updateScene(event.editedPerson);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Person selectedPerson \u003d event.getNewSelection();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        updateScene(selectedPerson);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Default setting for display panel upon start up of application."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void showDefaultDisplayPanel() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        personOnDisplay \u003d null;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        displayableAppointmentsListView.setItems(new FilteredList\u003c\u003e(FXCollections.observableArrayList()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        displayableMedicalRecordsListView.setItems(new FilteredList\u003c\u003e(FXCollections.observableArrayList()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Helper method to update the UI display base on the details of the {@person}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private void updateScene(Person updatedPerson) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        personOnDisplay \u003d updatedPerson;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (updatedPerson instanceof Patient) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            ArrayList\u003cMedicalRecord\u003e selectedPersonMedicalRecordLibrary \u003d ((Patient) updatedPerson)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                    .getMedicalRecordLibrary();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            //Collections.reverse(selectedPersonMedicalRecordLibrary);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            ArrayList\u003cAppointment\u003e selectedPersonAppointmentList \u003d updatedPerson.getAppointmentList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            ArrayList\u003cDisplayableAttribute\u003e displayableMedicalRecordsList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            ArrayList\u003cDisplayableAttribute\u003e displayableAppointmentsList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            for (MedicalRecord medicalRecord : selectedPersonMedicalRecordLibrary) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                displayableMedicalRecordsList.add((DisplayableAttribute) medicalRecord);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            for (Appointment appointment : selectedPersonAppointmentList) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                displayableAppointmentsList.add((DisplayableAttribute) appointment);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            setAppointmentsConnections("
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    new FilteredList\u003c\u003e(FXCollections.observableArrayList(displayableAppointmentsList)));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            setMedicalRecordsConnections("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    new FilteredList\u003c\u003e(FXCollections.observableArrayList(displayableMedicalRecordsList)));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            assert updatedPerson instanceof Doctor;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            ArrayList\u003cAppointment\u003e selectedPersonAppointmentList \u003d updatedPerson.getAppointmentList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            setAppointmentsConnections("
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    new FilteredList\u003c\u003e(FXCollections.observableArrayList(selectedPersonAppointmentList)));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            setMedicalRecordsConnections("
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    new FilteredList\u003c\u003e(FXCollections.observableArrayList()));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    private void setEventHandlerForSelectionChangeEvent() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        displayableAppointmentsListView.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                        logger.fine(\"Selection in displayable attribute list panel changed to : \u0027\""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                                + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                        raise(new DisplayPanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                });"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        displayableMedicalRecordsListView.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                    if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                        logger.fine(\"Selection in displayable attribute list panel changed to : \u0027\""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                                + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                        raise(new DisplayPanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                });"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code DisplayableAttribute}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     * using a {@code DisplayableAttributeCard}."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    class DisplayableListViewCell extends ListCell\u003cDisplayableAttribute\u003e {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        protected void updateItem(DisplayableAttribute displayableAttribute, boolean empty) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            Platform.runLater(()-\u003e {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                super.updateItem(displayableAttribute, empty);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                if (empty || displayableAttribute \u003d\u003d null) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                    setGraphic(null);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                    setText(null);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                    setGraphic(new DisplayableAttributeCard(displayableAttribute, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            });"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 76,
      "GaryGohYP": 70,
      "nelvintan": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/DisplayableAttributeCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import seedu.address.model.patient.MedicalRecord;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.model.person.Appointment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import seedu.address.model.person.DisplayableAttribute;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": " * A UI component that displays information of a {@code DisplayableAttribute}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "public class DisplayableAttributeCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    private static final String FXML \u003d \"DisplayableAttributeCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public final DisplayableAttribute displayableAttribute;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    private Label displayableField1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    private Label displayableField2;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    private Label displayableField3;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public DisplayableAttributeCard(DisplayableAttribute displayableAttribute, int displayedIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        this.displayableAttribute \u003d displayableAttribute;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        if (displayableAttribute instanceof MedicalRecord) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            date.setText(((MedicalRecord) displayableAttribute).getDate());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            displayableField1.setText(\"Diagnosis: \" + ((MedicalRecord) displayableAttribute).getDiagnosis());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            displayableField2.setText(\"Treatment: \" + ((MedicalRecord) displayableAttribute).getTreatment());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            displayableField3.setText(\"Comments: \" + ((MedicalRecord) displayableAttribute).getComments());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        } else if (displayableAttribute instanceof Appointment) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            if (((Appointment) displayableAttribute).value.equals(\"\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            Appointment appointment \u003d (Appointment) displayableAttribute;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            date.setText(appointment.getDateString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            displayableField1.setText(\"Start Time: \" + appointment.getStartTimeString()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                    + \"\\t\\tEnd Time: \" + appointment.getEndTimeString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            displayableField2.setText(\"Doctor Name: \" + appointment.getDoctorNameString()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                    + \" (\" + appointment.getDoctorNricString() + \")\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            displayableField3.setText(\"Patient Name: \" + appointment.getPatientNameString()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                    + \" (\" + appointment.getPatientNricString() + \")\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        if (!(other instanceof DisplayableAttributeCard)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        DisplayableAttributeCard card \u003d (DisplayableAttributeCard) other;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                \u0026\u0026 displayableAttribute.equals(card.displayableAttribute);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 4,
      "GaryGohYP": 59,
      "nelvintan": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private DisplayPanel displayPanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private StackPane displayPlaceholder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private StackPane personProfilePagePlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        setTitle(config.getAppTitle());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(prefs);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        displayPanel \u003d new DisplayPanel();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        displayPlaceholder.getChildren().add(displayPanel.getRoot());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        PersonProfilePage personProfilePage \u003d new PersonProfilePage();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        personProfilePagePlaceholder.getChildren().add(personProfilePage.getRoot());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    void hide() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setTitle(String appTitle) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setTitle(appTitle);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on user preferences."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(UserPrefs prefs) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current size and the position of the main Window."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getCurrentGuiSetting() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void releaseResources() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        displayPanel.showDefaultDisplayPanel();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        handleHelp();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 12,
      "-": 197
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " * A UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final String EMPTY_VALUE \u003d \"\"; // empty value to set for the availability of patients."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private Label role;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    private Label medicalRecord;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    private Label appointment;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private Label uniqueField;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (person instanceof Doctor) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            Doctor doctor \u003d (Doctor) person;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            uniqueField.setText(doctor.getMedicalDepartment().deptName);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        } else if (person instanceof Patient) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            uniqueField.setText(((Patient) person).getMedicalRecord().value);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        role.setText(person.getClass().getSimpleName());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        appointment.setText(person.getAppointment().value);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 16,
      "GaryGohYP": 2,
      "-": 69,
      "nelvintan": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonProfilePage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import java.awt.image.BufferedImage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import javax.imageio.ImageIO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import javafx.animation.AnimationTimer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import javafx.embed.swing.SwingFXUtils;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.commons.events.model.PersonChangedEvent;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Date;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " * A UI component that displays full information of a {@code Person}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "public class PersonProfilePage extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static AnimationTimer animationTimer;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static Person personOnDisplay;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final String DEFAULT_IMAGE_URL \u003d \"blank_profile\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final String EMPTY_VALUE \u003d \"\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final String FXML \u003d \"PersonProfilePage.fxml\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final String LABEL_NAME \u003d \"Name:  \";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final String LABEL_NRIC \u003d \"Nric:  \";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final String LABEL_PHONE \u003d \"Contact No.:  \";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final String LABEL_EMAIL \u003d \"Email:  \";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final String LABEL_ADDRESS \u003d \"Address:  \";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final String LABEL_DOCTOR_SPECIALISATION \u003d \"Specialisation:  \";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(DisplayPanel.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private Text name;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private Text nric;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private Text phone;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private Text address;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private Text email;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private Text availCheckTime;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private Label availability;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private Text availabilityLabel;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private Text uniqueField;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private ImageView profileImageDisplay;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public PersonProfilePage() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        animationTimer \u003d new AnimationTimer() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            public void handle(long now) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                setAvailabilityOfDoctor();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        };"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private void handlePersonChangedEvent(PersonChangedEvent event) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (event.editedPerson \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            Platform.runLater(()-\u003e {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                showDefaultProfilePage(); // if person is deleted of database is cleared, display the default scene."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            });"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        } else if (!event.originalPerson.equals(personOnDisplay)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return; // if the person updated is not the person that is being displayed on the UI."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Person updatedPerson \u003d event.editedPerson;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        updateScene(updatedPerson);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Person selectedPerson \u003d event.getNewSelection();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        updateScene(selectedPerson);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Helper method to update the contents of the profile ui base on the details of the {@code person}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private void updateScene(Person person) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        personOnDisplay \u003d person;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        name.setText(LABEL_NAME + person.getName().fullName);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        nric.setText(LABEL_NRIC + person.getNric().code);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        phone.setText(LABEL_PHONE + person.getPhone().value);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        address.setText(LABEL_ADDRESS + person.getAddress().value);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        email.setText(LABEL_EMAIL + person.getEmail().value);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        tags.getChildren().clear();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        person.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        setProfileImage(person.getNric().code);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // Updates availability badge of doctor every minute to reflect real time status."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (person instanceof Doctor) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            setAvailabilityOfDoctor();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            animationTimer.start();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            assert person instanceof Patient;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            animationTimer.stop();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            hideDoctorFields();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Updates the contents of the ui to be empty"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private void showDefaultProfilePage() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        personOnDisplay \u003d null;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        name.setText(EMPTY_VALUE);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        nric.setText(EMPTY_VALUE);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        phone.setText(EMPTY_VALUE);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        address.setText(EMPTY_VALUE);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        email.setText(EMPTY_VALUE);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        tags.getChildren().clear();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        profileImageDisplay.setVisible(false);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        hideDoctorFields();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Helper method to set the profile image of the person. Uses the default profile image if no other images"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * could be found in the database."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private void setProfileImage(String imageCode) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String imagePath \u003d \"/images/\" + imageCode + \".png\";"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        BufferedImage profileImageUrl;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            profileImageUrl \u003d ImageIO.read(PersonProfilePage.class.getResource(imagePath));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            Image profileImage \u003d SwingFXUtils.toFXImage(profileImageUrl, null);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            profileImageDisplay.setImage(profileImage);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        } catch (IOException | IllegalArgumentException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            logger.info(\"INVALID PROFILE IMAGE PATH: \" + e.getLocalizedMessage());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            setProfileImage(DEFAULT_IMAGE_URL);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        profileImageDisplay.setPreserveRatio(false);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        profileImageDisplay.setFitWidth(200);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        profileImageDisplay.setFitHeight(200);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        profileImageDisplay.setVisible(true);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Helper method that sets the availability labels of the doctor."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private void setAvailabilityOfDoctor() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Doctor doctor \u003d (Doctor) personOnDisplay;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        uniqueField.setText(LABEL_DOCTOR_SPECIALISATION + doctor.getMedicalDepartment().deptName);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        availability.setVisible(true);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        availabilityLabel.setVisible(true);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        availCheckTime.setVisible(true);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        availability.setText(doctor.currentAvailStatus());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        availCheckTime.setText(\"last updated:  \" + Date.getCurrentDate() + \",\" + Time.getCurrentTime());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (doctor.currentAvailStatus().equals(doctor.IS_AVAILABLE)) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            availability.setStyle(\"-fx-background-color: #33ff77\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            availability.setStyle(\"-fx-background-color: #ff4d4d\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Helper method that sets the visibility of the labels (that are applicable to Doctors only) to false."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private void hideDoctorFields() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        animationTimer.stop();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        uniqueField.setText(EMPTY_VALUE);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        availability.setVisible(false);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        availCheckTime.setVisible(false);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        availabilityLabel.setVisible(false);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 201
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager extends ComponentManager implements Ui {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_STAGE_TITLE \u003d \"File Op Error\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Could not save data\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Could not save data to file\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/one_life_icon.png\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic, Config config, UserPrefs prefs) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, config, prefs, logic);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        prefs.updateLastUsedGuiSetting(mainWindow.getCurrentGuiSetting());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.hide();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.releaseResources();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFileOperationAlertAndWait(String description, String details, Throwable cause) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        final String content \u003d details + \":\\n\" + cause.toString();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(AlertType.ERROR, FILE_OPS_ERROR_DIALOG_STAGE_TITLE, description, content);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Handling Code \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleDataSavingExceptionEvent(DataSavingExceptionEvent event) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        showFileOperationAlertAndWait(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                event.exception);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GaryGohYP": 1,
      "-": 119
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ".scroll-pane \u003e .viewport {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "   -fx-background-color: transparent;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "}"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 4,
      "-": 351
    }
  },
  {
    "path": "src/main/resources/view/DisplayPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    \u003cLabel text\u003d\"Appointments\" styleClass\u003d\"Name\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    \u003cListView fx:id\u003d\"displayableAppointmentsListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    \u003cLabel/\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    \u003cLabel text\u003d\"MedicalRecords\" styleClass\u003d\"Name\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    \u003cListView fx:id\u003d\"displayableMedicalRecordsListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 13
    }
  },
  {
    "path": "src/main/resources/view/DisplayableAttributeCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003c?import javafx.scene.layout.Pane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"100\" prefWidth\u003d\"550\" maxWidth\u003d\"-Infinity\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                        \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                                \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$date\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                                \u003cPane HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                        \u003cLabel fx:id\u003d\"displayableField1\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$displayableField1\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                        \u003cLabel fx:id\u003d\"displayableField2\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$displayableField2\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                        \u003cLabel fx:id\u003d\"displayableField3\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$displayableField3\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 2,
      "GaryGohYP": 43,
      "nelvintan": 3
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "         minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    \u003cImage url\u003d\"@/images/one_life_icon.png\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "          \u003cVBox fx:id\u003d\"personList\" minWidth\u003d\"340\" prefWidth\u003d\"400\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "          \u003cVBox fx:id\u003d\"profilePage\" minWidth\u003d\"450.0\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            \u003cScrollPane style\u003d\"-fx-background-color: transparent;\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \u003cInsets top\u003d\"50\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "              \u003cStackPane fx:id\u003d\"personProfilePagePlaceholder\"/\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "          \u003cVBox fx:id\u003d\"displayPanelPlace\" minWidth\u003d\"400\" prefWidth\u003d\"900\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            \u003cStackPane fx:id\u003d\"displayPlaceholder\"/\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 14,
      "GaryGohYP": 1,
      "-": 64
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003c?import javafx.scene.layout.Pane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "       \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "       \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "              \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "             \u003cchildren\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "               \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                      \u003cminWidth\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                      \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    \u003cLabel fx:id\u003d\"role\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$role\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    \u003cPane HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/HBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "               \u003cLabel fx:id\u003d\"uniqueField\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$uniqueField\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "               \u003cLabel fx:id\u003d\"appointment\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$appointment\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "             \u003c/children\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "         \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "         \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 20,
      "-": 32,
      "nelvintan": 1
    }
  },
  {
    "path": "src/main/resources/view/PersonProfilePage.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003c?import javafx.geometry.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003c?import javafx.scene.image.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003c?import javafx.scene.text.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003cPane maxHeight\u003d\"700.0\" maxWidth\u003d\"500.0\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"550.0\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \u003cText fx:id\u003d\"name\" fill\u003d\"WHITE\" layoutX\u003d\"56.0\" layoutY\u003d\"301.0\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            \u003cFont size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \u003c/Text\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \u003cText fx:id\u003d\"nric\" fill\u003d\"WHITE\" layoutX\u003d\"56.0\" layoutY\u003d\"325.0\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            \u003cFont size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \u003c/Text\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \u003cText fx:id\u003d\"phone\" fill\u003d\"WHITE\" layoutX\u003d\"56.0\" layoutY\u003d\"349.0\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            \u003cFont size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \u003c/Text\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \u003cImageView fx:id\u003d\"profileImageDisplay\" fitHeight\u003d\"200.0\" fitWidth\u003d\"200.0\" layoutX\u003d\"103.0\" layoutY\u003d\"1.0\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                 pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" visible\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "         \u003cimage\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            \u003cImage url\u003d\"@../images/blank_profile.png\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "         \u003c/image\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \u003cText fx:id\u003d\"email\" fill\u003d\"WHITE\" layoutX\u003d\"56.0\" layoutY\u003d\"373.0\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            \u003cFont size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \u003c/Text\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \u003cText fx:id\u003d\"address\" fill\u003d\"WHITE\" layoutX\u003d\"56.0\" layoutY\u003d\"397.0\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            wrappingWidth\u003d\"294.0\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            \u003cFont size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \u003c/Text\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \u003cText fx:id\u003d\"uniqueField\" fill\u003d\"WHITE\" layoutX\u003d\"56.0\" layoutY\u003d\"483.0\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            \u003cFont size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \u003c/Text\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" layoutX\u003d\"56.0\" layoutY\u003d\"261.0\" prefHeight\u003d\"21.0\" prefWidth\u003d\"283.0\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \u003cText fx:id\u003d\"availabilityLabel\" fill\u003d\"WHITE\" layoutX\u003d\"56.0\" layoutY\u003d\"510.0\" strokeType\u003d\"OUTSIDE\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            strokeWidth\u003d\"0.0\" text\u003d\"Status:\" visible\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            \u003cFont size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \u003c/Text\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \u003cLabel fx:id\u003d\"availability\" layoutX\u003d\"124.0\" layoutY\u003d\"493.0\" text\u003d\"Label\" textFill\u003d\"WHITE\" visible\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            \u003cFont size\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            \u003cInsets left\u003d\"5.0\" right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \u003cText fx:id\u003d\"availCheckTime\" fill\u003d\"WHITE\" layoutX\u003d\"220.0\" layoutY\u003d\"510.0\" strokeType\u003d\"OUTSIDE\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            strokeWidth\u003d\"0.0\" text\u003d\"Text\" visible\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            \u003cFont name\u003d\"System Italic\" size\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \u003c/Text\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003c/Pane\u003e"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 71
    }
  },
  {
    "path": "src/main/resources/view/ProfilePage.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003c?import java.lang.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003c?import java.util.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003c?import javafx.scene.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003cAnchorPane xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            fx:controller\u003d\"view.ProfilePage\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 14
    }
  },
  {
    "path": "src/main/resources/view/default.html",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!DOCTYPE html\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003chtml\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003chead\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003clink rel\u003d\"stylesheet\" href\u003d\"DarkTheme.css\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/head\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cbody class\u003d\"background\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    \u003cdiv\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/body\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/html\u003e"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 1,
      "-": 9
    }
  },
  {
    "path": "src/test/data/XmlAddressBookStorageTest/invalidAndValidPersonAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Valid Person --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        \u003cmedicalRecord\u003e \u003c/medicalRecord\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        \u003cappointment isPrivate\u003d\"false\"\u003eSome remarks\u003c/appointment\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Person with invalid phone field --\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e948asdf2424\u003c/phone\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        \u003cmedicalRecord\u003e \u003c/medicalRecord\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        \u003cappointment isPrivate\u003d\"false\"\u003eSome remarks\u003c/appointment\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "GaryGohYP": 2,
      "-": 17,
      "nelvintan": 2
    }
  },
  {
    "path": "src/test/data/XmlAddressBookStorageTest/invalidPersonAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Person with invalid name field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003crole\u003ePatient\u003c/role\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHa!ns Mu@ster\u003c/name\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003cnric\u003eszz22\u003c/nric\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        \u003cmedicalRecord\u003e\u003c/medicalRecord\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003cappointment\u003e\u003c/appointment\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 3,
      "GaryGohYP": 1,
      "-": 10
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/duplicatePersonAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003crole\u003ePatient\u003c/role\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ealice@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e123, Jurong West Ave 6, #08-111\u003c/address\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003cnric\u003es1234567a\u003c/nric\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        \u003cmedicalRecord\u003e , Diagnosis: , Treatment: , Comments: -\u003c/medicalRecord\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        \u003cappointment\u003e\u003c/appointment\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Person with same identity as Alice Pauline --\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003crole\u003ePatient\u003c/role\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003epauline@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003cnric\u003es1234567a\u003c/nric\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        \u003cmedicalRecord\u003e , Diagnosis: , Treatment: , Comments: -\u003c/medicalRecord\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        \u003cappointment\u003e\u003c/appointment\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 4,
      "GaryGohYP": 2,
      "-": 20,
      "nelvintan": 2
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/invalidPersonAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Person with invalid email field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003crole\u003ePatient\u003c/role\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003cnric\u003eS9234567A\u003c/nric\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@exam!32ple\u003c/email\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        \u003cmedicalRecord\u003e\u003c/medicalRecord\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003cappointment\u003e\u003c/appointment\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 3,
      "GaryGohYP": 1,
      "-": 10
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/typicalPersonsAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- AddressBook save file which contains the same Person values as in TypicalPersons#getTypicalAddressBook() --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003crole\u003ePatient\u003c/role\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003cnric\u003eS7412345C\u003c/nric\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ealice@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e123, Jurong West Ave 6, #08-111\u003c/address\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003cmedicalRecord\u003e , Diagnosis: , Treatment: , Comments: -\u003c/medicalRecord\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        \u003cappointment\u003e\u003c/appointment\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003crole\u003ePatient\u003c/role\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eBenson Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003cnric\u003eS8234567A\u003c/nric\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e98765432\u003c/phone\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ejohnd@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e311, Clementi Ave 2, #02-25\u003c/address\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003cmedicalRecord\u003e , Diagnosis: , Treatment: , Comments: -\u003c/medicalRecord\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        \u003cappointment\u003e\u003c/appointment\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003eowesMoney\u003c/tagged\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003crole\u003ePatient\u003c/role\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eCarl Kurz\u003c/name\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003cnric\u003eS9898989B\u003c/nric\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e95352563\u003c/phone\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003eheinz@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003ewall street\u003c/address\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003cmedicalRecord\u003e , Diagnosis: , Treatment: , Comments: -\u003c/medicalRecord\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        \u003cappointment\u003e\u003c/appointment\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003crole\u003ePatient\u003c/role\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eDaniel Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003cnric\u003es8234599a\u003c/nric\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        \u003cphone\u003e87652599\u003c/phone\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ecornelia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e10th street\u003c/address\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003cmedicalRecord\u003e , Diagnosis: , Treatment: , Comments: -\u003c/medicalRecord\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        \u003cappointment\u003e\u003c/appointment\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003crole\u003eDoctor\u003c/role\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eElle Meyer\u003c/name\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003cnric\u003es2234599a\u003c/nric\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482224\u003c/phone\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ewerner@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003emichegan ave\u003c/address\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003cmedicalDepartment\u003eOncology\u003c/medicalDepartment\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        \u003cappointment\u003e\u003c/appointment\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003crole\u003eDoctor\u003c/role\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003cnric\u003es3234599a\u003c/nric\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eFiona Kunz\u003c/name\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482427\u003c/phone\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003elydia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003elittle tokyo\u003c/address\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003cmedicalDepartment\u003eCardiology\u003c/medicalDepartment\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        \u003cappointment\u003e\u003c/appointment\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003crole\u003eDoctor\u003c/role\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eGeorge Best\u003c/name\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003cnric\u003es5234599a\u003c/nric\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482442\u003c/phone\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003eanna@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003cmedicalDepartment\u003eNeurology\u003c/medicalDepartment\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003cappointment\u003e23.11.2018,1300,1400,Priscilia,S1234567B,George Best,s5234599a\u003c/appointment\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003cappointmentList\u003e23.11.2018,1300,1400,Priscilia,S1234567B,George Best,s5234599a\u003c/appointmentList\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 23,
      "GaryGohYP": 1,
      "-": 49,
      "nelvintan": 6
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/invalidPersonField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- Person with an invalid phone field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cperson\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    \u003crole\u003ePatient\u003c/role\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    \u003cnric\u003eS1111117A\u003c/nric\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482asf424\u003c/phone\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    \u003cmedicalRecord\u003e\u003c/medicalRecord\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    \u003cappointment\u003e23.11.2018,1130,1300,AMY,JAKE\u003c/appointment\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/person\u003e"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 3,
      "GaryGohYP": 1,
      "-": 9
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/missingPersonField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- Person with missing name field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cperson\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    \u003crole\u003ePatient\u003c/role\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    \u003cnric\u003eS1111117A\u003c/nric\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    \u003cmedicalRecord\u003e \u003c/medicalRecord\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/person\u003e"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 2,
      "GaryGohYP": 1,
      "-": 8
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003crole\u003ePatient\u003c/role\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003cnric\u003eS9234567A\u003c/nric\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        \u003cmedicalRecord isPrivate\u003d\"false\"\u003e12.12.2018, Diagnosis: flu, Treatment: tamiflu, Comments: -\u003c/medicalRecord\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        \u003cappointment isPrivate\u003d\"false\"\u003e\u003c/appointment\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003crole\u003ePatient\u003c/role\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eRuth Mueller\u003c/name\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003cnric\u003eS9874567B\u003c/nric\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e87249245\u003c/phone\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eruth@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e81th street\u003c/address\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        \u003cmedicalRecord isPrivate\u003d\"false\"\u003e12.12.2018, Diagnosis: flu, Treatment: tamiflu, Comments: -\u003c/medicalRecord\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        \u003cappointment isPrivate\u003d\"false\"\u003e\u003c/appointment\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003crole\u003ePatient\u003c/role\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHeinz Kurz\u003c/name\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003cnric\u003eS7234567C\u003c/nric\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e95352563\u003c/phone\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eheinz@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003ewall street\u003c/address\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        \u003cmedicalRecord isPrivate\u003d\"false\"\u003e12.12.2018, Diagnosis: flu, Treatment: tamiflu, Comments: -\u003c/medicalRecord\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        \u003cappointment isPrivate\u003d\"false\"\u003e\u003c/appointment\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003crole\u003ePatient\u003c/role\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eCornelia Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003cnric\u003eS9634567D\u003c/nric\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e87652533\u003c/phone\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ecornelia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e10th street\u003c/address\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        \u003cmedicalRecord isPrivate\u003d\"false\"\u003e12.12.2018, Diagnosis: flu, Treatment: tamiflu, Comments: -\u003c/medicalRecord\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        \u003cappointment isPrivate\u003d\"false\"\u003eLikes to eat\u003c/appointment\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003crole\u003ePatient\u003c/role\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eWerner Meyer\u003c/name\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003cnric\u003eS8834567A\u003c/nric\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482224\u003c/phone\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ewerner@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003emichegan ave\u003c/address\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        \u003cmedicalRecord isPrivate\u003d\"false\"\u003e12.12.2018, Diagnosis: flu, Treatment: tamiflu, Comments: -\u003c/medicalRecord\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        \u003cappointment isPrivate\u003d\"false\"\u003e\u003c/appointment\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003crole\u003eDoctor\u003c/role\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eLydia Kunz\u003c/name\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003cnric\u003eS1010101A\u003c/nric\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482427\u003c/phone\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003elydia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003elittle tokyo\u003c/address\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003cmedicalDepartment\u003eNeurology\u003c/medicalDepartment\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        \u003cappointment isPrivate\u003d\"false\"\u003e\u003c/appointment\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003crole\u003eDoctor\u003c/role\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAnna Best\u003c/name\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003cnric\u003eS2020202B\u003c/nric\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482442\u003c/phone\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eanna@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003cmedicalDepartment\u003eObstetrics\u003c/medicalDepartment\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        \u003cappointment isPrivate\u003d\"false\"\u003e\u003c/appointment\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003crole\u003eDoctor\u003c/role\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eStefan Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003cnric\u003eS3030303C\u003c/nric\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e8482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003estefan@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003elittle india\u003c/address\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003cmedicalDepartment\u003ePhysiology\u003c/medicalDepartment\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        \u003cappointment isPrivate\u003d\"false\"\u003eSmart friend\u003c/appointment\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003crole\u003eDoctor\u003c/role\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eMartin Mueller\u003c/name\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003cnric\u003eS4040404D\u003c/nric\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e8482131\u003c/phone\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003echicago ave\u003c/address\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003cmedicalDepartment\u003eCardiology\u003c/medicalDepartment\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        \u003cappointment isPrivate\u003d\"false\"\u003e\u003c/appointment\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 22,
      "GaryGohYP": 5,
      "-": 57,
      "nelvintan": 9
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validPerson.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cperson\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    \u003crole\u003ePatient\u003c/role\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    \u003cnric\u003eS1111117A\u003c/nric\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    \u003cmedicalRecord\u003e\u003c/medicalRecord\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    \u003cappointment\u003e23.11.2018,1130,1300,AMY,JAKE\u003c/appointment\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/person\u003e"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 3,
      "GaryGohYP": 1,
      "-": 8
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MainWindowHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle for {@code MainWindow}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private final PersonListPanelHandle personListPanel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ResultDisplayHandle resultDisplay;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandBoxHandle commandBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBarFooterHandle statusBarFooter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final MainMenuHandle mainMenu;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private final PersonProfilePageHandle personProfilePage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanelHandle(getChildNode(PersonListPanelHandle.PERSON_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        personProfilePage \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                new PersonProfilePageHandle(getChildNode(PersonProfilePageHandle.PERSON_PROFILE_PAGE_ID));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanelHandle getPersonListPanel() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return resultDisplay;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandBox;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return statusBarFooter;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainMenu;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public PersonProfilePageHandle getPersonProfilePage() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return personProfilePage;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 5,
      "-": 47
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/PersonCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.collect.ImmutableMultiset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle to a person card in the person list panel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PHONE_FIELD_ID \u003d \"#phone\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EMAIL_FIELD_ID \u003d \"#email\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final String UNIQUE_FIELD_RECORD_ID \u003d \"#uniqueField\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    private static final String APPOINTMENT_FIELD_ID \u003d \"#appointment\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label addressLabel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label phoneLabel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label emailLabel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    private final Label appointmentLabel;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private final Label uniqueField;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        uniqueField \u003d getChildNode(UNIQUE_FIELD_RECORD_ID);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointmentLabel \u003d getChildNode(APPOINTMENT_FIELD_ID);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAddress() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressLabel.getText();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPhone() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return phoneLabel.getText();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getEmail() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return emailLabel.getText();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public String getUniqueFieldRecordId() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return uniqueField.getText();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public String getAppointment() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return appointmentLabel.getText();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if this handle contains {@code person}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Person person) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return getName().equals(person.getName().fullName)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getAddress().equals(person.getAddress().value)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getPhone().equals(person.getPhone().value)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getEmail().equals(person.getEmail().value)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 ImmutableMultiset.copyOf(getTags()).equals(ImmutableMultiset.copyOf(person.getTags().stream()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                        .map(tag -\u003e tag.tagName)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                        .collect(Collectors.toList())));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 6,
      "GaryGohYP": 2,
      "-": 87,
      "nelvintan": 6
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/PersonProfilePageHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " * A handle for the {@code PersonProfilePageHandle} in the GUI."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "public class PersonProfilePageHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String PERSON_PROFILE_PAGE_ID \u003d \"#personListView\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public PersonProfilePageHandle(Node personProfilePageNode) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        super(personProfilePageNode);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.xml\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String APP_TITLE \u003d \"Test App\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier, Path saveFileLocation) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            createDataFileWithData(new XmlSerializableAddressBook(this.initialDataSupplier.get()),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                    this.saveFileLocation);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setAppTitle(APP_TITLE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.updateLastUsedGuiSetting(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(saveFileLocation);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the address book data stored inside the storage file."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook readStorageAddressBook() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook(storage.readAddressBook().get());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Data is not in the AddressBook format.\", dce);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the storage file."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getStorageSaveLocation() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return storage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Model copy \u003d new ModelManager((model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(copy, model.getFilteredPersonList());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an XML file at the {@code filePath} with the {@code data}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    private \u003cT\u003e void createDataFileWithData(T data, Path filePath) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            XmlUtil.saveDataToFile(filePath, data);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 1,
      "-": 120
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/ConfigTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        String defaultConfigAsString \u003d \"App title : One Life App\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GaryGohYP": 1,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/AppUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/one_life_icon.png\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.getImage(null);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(errorMessage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false, errorMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GaryGohYP": 1,
      "-": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/XmlUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAdaptedPerson;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAdaptedTag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlUtilTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlUtilTest\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path EMPTY_FILE \u003d TEST_DATA_FOLDER.resolve(\"empty.xml\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path MISSING_FILE \u003d TEST_DATA_FOLDER.resolve(\"missing.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path VALID_FILE \u003d TEST_DATA_FOLDER.resolve(\"validAddressBook.xml\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path MISSING_PERSON_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"missingPersonField.xml\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonField.xml\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path VALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"validPerson.xml\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEMP_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"tempAddressBook.xml\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"9482asf424\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final String VALID_APPOINTMENT \u003d \"23.11.2018,1130,1300,AMY,JAKE\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Hans Muster\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final String VALID_NRIC \u003d \"S1111117A\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"9482424\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"hans@example\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"4th street\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"friends\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(null, AddressBook.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(MISSING_FILE, AddressBook.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(JAXBException.class);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(EMPTY_FILE, AddressBook.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_validFile_validResult() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableAddressBook.class).toModelType();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(9, dataFromFile.getPersonList().size());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithMissingPersonField_validResult() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                MISSING_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                null, VALID_NRIC, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_APPOINTMENT);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithInvalidPersonField_validResult() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                INVALID_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                VALID_NAME, VALID_NRIC, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_APPOINTMENT);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithValidPerson_validResult() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                VALID_PERSON_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                VALID_NAME, VALID_NRIC, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_APPOINTMENT);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(null, new AddressBook());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(MISSING_FILE, new AddressBook());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_validFile_dataSaved() throws Exception {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createFile(TEMP_FILE);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataToWrite \u003d new XmlSerializableAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookBuilder builder \u003d new AddressBookBuilder(new AddressBook());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        dataToWrite \u003d new XmlSerializableAddressBook("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                builder.withPerson(new PersonBuilder().build()).build());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedPerson}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * objects."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlRootElement(name \u003d \"person\")"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class XmlAdaptedPersonWithRootElement extends XmlAdaptedPerson {}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 5,
      "-": 143
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Person validPerson \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new AddCommand(validPerson), model, commandHistory,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new AddCommand(personInList), model, commandHistory,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 2,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.testutil.DoctorBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Person validPerson \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Person validPerson \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        /** Test case for Patient **/"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Person alice \u003d new PatientBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Person bob \u003d new PatientBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        /** Test case for Doctor **/"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Person jim \u003d new DoctorBuilder().withName(\"Jim\").build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Person brock \u003d new DoctorBuilder().withName(\"Brock\").build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        AddCommand addJimCommand \u003d new AddCommand(jim);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        AddCommand addBrockCommand \u003d new AddCommand(brock);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        AddCommand addJimCommandCopy \u003d new AddCommand(jim);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertTrue(addJimCommand.equals(addJimCommandCopy));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertFalse(addJimCommand.equals(1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertFalse(addJimCommand.equals(null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertFalse(addJimCommand.equals(addBrockCommand));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        public boolean hasSuchPerson(Name name, Nric nric) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        public boolean hasSuchPatient(Name name, Nric nric) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        public boolean hasSuchDoctor(Name name, Nric nric) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        public Optional\u003cPerson\u003e getPerson(Nric nric) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        public void undoAddressBook() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        public void redoAddressBook() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        public String addIntuitiveEntry(String entry) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        public String removeIntuitiveEntry() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        public boolean isIntuitiveMode() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        public boolean areIntuitiveArgsAvailable() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        public String retrieveIntuitiveArguments() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        public void cancelIntuitiveCommand() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tristonpang": 29,
      "guestuser0123": 42,
      "-": 199,
      "nelvintan": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICAL_DEPARTMENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICAL_RECORD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "import seedu.address.model.person.PersonContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String VALID_MEDICAL_RECORD_AMY \u003d \"12.12.2018, Diagnosis: cough, \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            + \"Treatment: dextromethorphan, Comments: -\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String VALID_MEDICAL_RECORD_BOB \u003d \"12.12.2018, Diagnosis: flu, Treatment: tamiflu, Comments: -\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String VALID_SCHEDULE_AMY \u003d \"22.11.2018,1300,1400,Alice,S1234567B,Amy,S1234567A\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String VALID_SCHEDULE_BOB \u003d \"22.11.2018,1300,1400,Jack,S1234567J,Bob,S1234567B\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String VALID_ROLE_DOCTOR \u003d \"doctor\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String VALID_ROLE_PATIENT \u003d \"patient\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String VALID_MEDICAL_DEPARTMENT \u003d \"Dermatology\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String VALID_NRIC_AMY \u003d \"S1234567A\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String VALID_NRIC_BOB \u003d \"S9876543B\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String NRIC_DESC_AMY \u003d \" \" + PREFIX_NRIC + VALID_NRIC_AMY;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String NRIC_DESC_BOB \u003d \" \" + PREFIX_NRIC + VALID_NRIC_BOB;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String MEDICAL_RECORD_DESC_AMY \u003d \" \" + PREFIX_MEDICAL_RECORD + VALID_MEDICAL_RECORD_AMY;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String MEDICAL_RECORD_DESC_BOB \u003d \" \" + PREFIX_MEDICAL_RECORD + VALID_MEDICAL_RECORD_BOB;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String MEDICAL_DEPARTMENT_DESC \u003d \" \" + PREFIX_MEDICAL_DEPARTMENT + VALID_MEDICAL_DEPARTMENT;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String ROLE_DOCTOR_DESC \u003d \" \" + PREFIX_ROLE + VALID_ROLE_DOCTOR;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String ROLE_PATIENT_DESC \u003d \" \" + PREFIX_ROLE + VALID_ROLE_PATIENT;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String INVALID_NRIC_DESC \u003d \" \" + PREFIX_NRIC + \"JB123456A\"; // cant start with 2 letters"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String INVALID_ROLE_DESC \u003d \" \" + PREFIX_ROLE + \"teacher\"; // not a valid role"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String INVALID_MEDICAL_DEPARTMENT_DESC \u003d \" \" + PREFIX_MEDICAL_DEPARTMENT + \"HE12RT\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    // numbers not allowed"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the result message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                                            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book and the filtered person list in the {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                                            String expectedMessage) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        model.updateFilteredPersonList(new PersonContainsKeywordsPredicate(Map.of(PREFIX_NAME,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                new ArrayList\u003c\u003e(Arrays.asList(splitName[0])))));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void deleteFirstPerson(Model model) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(0);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(firstPerson);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngkangtze": 1,
      "guestuser0123": 28,
      "-": 138
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.testutil.DoctorBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Patient editedPerson \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        DoctorBuilder personInList \u003d new DoctorBuilder((Doctor) lastPerson);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Person editedPerson \u003d new PatientBuilder((Patient) personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Patient editedPerson \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit -\u003e first person edited"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e same first person edited again"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Edits a {@code Person} from a filtered list."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited person in the"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the person object regardless of indexing."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonEdited() throws Exception {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Patient editedPerson \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit -\u003e edits second person in unfiltered person list / first person in filtered person list"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), personToEdit);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e edits same second person in unfiltered person list"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 9,
      "-": 242
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GLOBAL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "import seedu.address.model.person.PersonContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        PersonContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                new PersonContainsKeywordsPredicate(Map.of(PREFIX_GLOBAL, new ArrayList\u003c\u003e(Arrays.asList(\"first\"))));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        PersonContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                new PersonContainsKeywordsPredicate(Map.of(PREFIX_GLOBAL, new ArrayList\u003c\u003e(Arrays.asList(\"second\"))));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        PersonContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        PersonContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "     * Parses {@code userInput} into a {@code PersonContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "    private PersonContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return new PersonContainsKeywordsPredicate(Map.of(PREFIX_GLOBAL,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                new ArrayList\u003c\u003e(Arrays.asList(userInput.split(\"\\\\s+\")))));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngkangtze": 7,
      "-": 83
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ScheduleCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static junit.framework.TestCase.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SCHEDULE_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SCHEDULE_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.model.person.Appointment;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nelvintan"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ScheduleCommand."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nelvintan"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "public class ScheduleCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    private static final String SCHEDULE_STUB \u003d \"23.11.2018,1300,1400,Elle Meyer,S2234599A,Alice Pauline,S7412345C\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public void execute_addScheduleUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Patient firstPerson \u003d (Patient) model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        firstPerson.clearAppointmentList(); // This prevents appointments collected from different tests to clash."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Patient editedPerson \u003d new PatientBuilder(firstPerson).withAppointment(SCHEDULE_STUB).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        ScheduleCommand scheduleCommand \u003d new ScheduleCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                new Appointment(editedPerson.getAppointment().value));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        String expectedMessage \u003d String.format(ScheduleCommand.MESSAGE_SCHEDULE_APPOINTMENT_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        expectedModel.updatePerson(firstPerson, editedPerson);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertCommandSuccess(scheduleCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public void execute_deleteScheduleUnfilteredList_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Patient firstPerson \u003d (Patient) model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        firstPerson.clearAppointmentList(); // This prevents appointments collected from different tests to clash."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Patient editedPerson \u003d new PatientBuilder(firstPerson)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                .withAppointment(\"22.11.2018,1300,1400,Elle Meyer,S2234599A,\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                        + firstPerson.getName().toString()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                        + \",\" + firstPerson.getNric().toString()).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        ScheduleCommand scheduleCommand \u003d new ScheduleCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                new Appointment(editedPerson.getAppointment().toString()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        String expectedMessage \u003d String.format(ScheduleCommand.MESSAGE_SCHEDULE_APPOINTMENT_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        expectedModel.updatePerson(firstPerson, editedPerson);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertCommandSuccess(scheduleCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Patient firstPerson \u003d (Patient) model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        firstPerson.clearAppointmentList(); // This prevents appointments collected from different tests to clash."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Patient editedPerson \u003d new PatientBuilder((Patient) model.getFilteredPersonList()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .get(INDEX_FIRST_PERSON.getZeroBased()))"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                .withAppointment(SCHEDULE_STUB).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        ScheduleCommand scheduleCommand \u003d new ScheduleCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                new Appointment(editedPerson.getAppointment().value));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        String expectedMessage \u003d String.format(ScheduleCommand.MESSAGE_SCHEDULE_APPOINTMENT_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        expectedModel.updatePerson(firstPerson, editedPerson);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertCommandSuccess(scheduleCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        ScheduleCommand scheduleCommand \u003d new ScheduleCommand(outOfBoundIndex, new Appointment(VALID_SCHEDULE_BOB));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertCommandFailure(scheduleCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        ScheduleCommand scheduleCommand \u003d new ScheduleCommand(outOfBoundIndex, new Appointment(VALID_SCHEDULE_BOB));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertCommandFailure(scheduleCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Patient personToModify \u003d (Patient) model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        personToModify.clearAppointmentList(); // This prevents appointments collected from different tests to clash."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Patient modifiedPerson \u003d new PatientBuilder(personToModify).withAppointment(SCHEDULE_STUB).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        String[] parts \u003d SCHEDULE_STUB.split(\",\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        ScheduleCommand scheduleCommand \u003d new ScheduleCommand(INDEX_FIRST_PERSON, new Appointment(parts[0],"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                parts[1], parts[2], parts[3], parts[4],"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                personToModify.getName().toString(), personToModify.getNric().toString()));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        expectedModel.updatePerson(personToModify, modifiedPerson);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // schedule -\u003e first person schedule changed"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        scheduleCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // redo -\u003e same first person modified again"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        ScheduleCommand scheduleCommand \u003d new ScheduleCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                new Appointment(\"22.11.2018,1300,1400,Alice,S1234567B,Benson Meier,S8234567A\"));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertCommandFailure(scheduleCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * 1. Modifies {@code Person#Appointment} from a filtered list."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * 2. Undo the modification."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously modified person in the"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * 4. Redo the modification. This ensures {@code RedoCommand} modifies the person object regardless of indexing."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonDeleted() throws Exception {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        ScheduleCommand scheduleCommand \u003d new ScheduleCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                new Appointment(\"22.11.2018,1300,1400,Elle Meyer,S2234599A,\""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                        + \"Benson Meier\""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                        + \",\" + \"S8234567A\"));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Patient personToModify \u003d (Patient) model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        personToModify.clearAppointmentList(); // This prevents appointments collected from different tests to clash."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Patient modifiedPerson \u003d new PatientBuilder(personToModify)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                .withAppointment(\"22.11.2018,1300,1400,Elle Meyer,S2234599A,\""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                        + personToModify.getName().toString() + \",\""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                        + personToModify.getNric().toString())"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        expectedModel.updatePerson(personToModify, modifiedPerson);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // schedule -\u003e modifies second person in unfiltered person list / first person in filtered person list"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        scheduleCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // redo -\u003e modifies same second person in unfiltered person list"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        final ScheduleCommand standardCommand \u003d new ScheduleCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                new Appointment(VALID_SCHEDULE_AMY));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        ScheduleCommand commandWithSameValues \u003d new ScheduleCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                new Appointment(VALID_SCHEDULE_AMY));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertFalse(standardCommand.equals(new ScheduleCommand(INDEX_SECOND_PERSON,"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                new Appointment(VALID_SCHEDULE_AMY))));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // different appointment -\u003e returns false"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertFalse(standardCommand.equals(new ScheduleCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                new Appointment(VALID_SCHEDULE_BOB))));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 30,
      "nelvintan": 196
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UpdateCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import static junit.framework.TestCase.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MEDICAL_RECORD_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MEDICAL_RECORD_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIFTH_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.patient.MedicalRecord;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "public class UpdateCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public void execute_updateMedicalRecord_success() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Patient editedPatient \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                new PatientBuilder((Patient) model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()))"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                        .withMedicalRecord(\"13.13.2018, Diagnosis: flu, Treatment: tamiflu, Comments: -\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(INDEX_FIRST_PERSON, editedPatient.getMedicalRecord());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String expectedMessage \u003d String.format(UpdateCommand.MESSAGE_UPDATE_MEDICAL_RECORD_SUCCESS, editedPatient);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPatient);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        assertCommandSuccess(updateCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public void execute_filteredList_success() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Patient personInFilteredList \u003d (Patient) model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Patient editedPerson \u003d new PatientBuilder(personInFilteredList)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                .withMedicalRecord(\"12.12.2018, Diagnosis: flu, Treatment: tamiflu, Comments: -\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(INDEX_FIRST_PERSON, editedPerson.getMedicalRecord());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        String expectedMessage \u003d String.format(UpdateCommand.MESSAGE_UPDATE_MEDICAL_RECORD_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        assertCommandSuccess(updateCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(outOfBoundIndex, new MedicalRecord(VALID_MEDICAL_RECORD_BOB));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        assertCommandFailure(updateCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(outOfBoundIndex, new MedicalRecord(VALID_MEDICAL_RECORD_BOB));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        assertCommandFailure(updateCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Edit filtered list where the user tries to edit medical records of a Doctor,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * which is not allowed."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void execute_invalidDoctorFilterList_failure() throws Exception {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(INDEX_FIFTH_PERSON,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                new MedicalRecord(VALID_MEDICAL_RECORD_BOB));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertCommandFailure(updateCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_CHOSEN);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        final UpdateCommand standardCommand \u003d new UpdateCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                new MedicalRecord(VALID_MEDICAL_RECORD_AMY));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        UpdateCommand commandWithSameValues \u003d new UpdateCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                new MedicalRecord(VALID_MEDICAL_RECORD_AMY));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertFalse(standardCommand.equals(new UpdateCommand(INDEX_SECOND_PERSON,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                new MedicalRecord(VALID_MEDICAL_RECORD_AMY))));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        // different medical records -\u003e returns false"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertFalse(standardCommand.equals(new UpdateCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                new MedicalRecord(VALID_MEDICAL_RECORD_BOB))));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 31,
      "GaryGohYP": 99
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NRIC_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ROLE_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ROLE_DOCTOR_DESC;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ROLE_PATIENT_DESC;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ROLE_PATIENT;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Role;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Patient expectedPerson \u003d new PatientBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + ROLE_PATIENT_DESC + NAME_DESC_BOB"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + NRIC_DESC_BOB,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseSuccess(parser, ROLE_PATIENT_DESC + NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + NRIC_DESC_BOB, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // multiple nric - last nric accepted"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseSuccess(parser, ROLE_PATIENT_DESC + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                        + ADDRESS_DESC_AMY + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + NRIC_DESC_AMY + NRIC_DESC_BOB,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseSuccess(parser, ROLE_PATIENT_DESC + NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + NRIC_DESC_BOB, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseSuccess(parser, ROLE_PATIENT_DESC + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + NRIC_DESC_BOB, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseSuccess(parser, ROLE_PATIENT_DESC + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + ADDRESS_DESC_AMY + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + NRIC_DESC_BOB,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // multiple roles - last role accepted"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseSuccess(parser, ROLE_DOCTOR_DESC + ROLE_PATIENT_DESC + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                        + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + NRIC_DESC_BOB,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PatientBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseSuccess(parser, ROLE_PATIENT_DESC + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + NRIC_DESC_BOB, new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Patient expectedPerson \u003d new PatientBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseSuccess(parser, ROLE_PATIENT_DESC + NAME_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                        + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NRIC_DESC_AMY, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_GENERAL_USAGE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // missing role prefix"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseFailure(parser, VALID_ROLE_PATIENT + VALID_NAME_BOB + NRIC_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseFailure(parser, ROLE_PATIENT_DESC + VALID_NAME_BOB + NRIC_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // missing nric prefix"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseFailure(parser, ROLE_PATIENT_DESC + NAME_DESC_BOB + VALID_NRIC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseFailure(parser, ROLE_PATIENT_DESC + NAME_DESC_BOB + NRIC_DESC_BOB + VALID_PHONE_BOB"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseFailure(parser, ROLE_PATIENT_DESC + NAME_DESC_BOB + NRIC_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + VALID_EMAIL_BOB + ADDRESS_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseFailure(parser, ROLE_PATIENT_DESC + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + VALID_ADDRESS_BOB, expectedMessage);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseFailure(parser, VALID_ROLE_PATIENT + VALID_NAME_BOB + NRIC_DESC_BOB + VALID_PHONE_BOB"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + VALID_EMAIL_BOB + VALID_ADDRESS_BOB, expectedMessage);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // invalid role"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseFailure(parser, INVALID_ROLE_DESC + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + NRIC_DESC_BOB"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Role.MESSAGE_ROLE_CONSTRAINTS);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseFailure(parser, ROLE_PATIENT_DESC + INVALID_NAME_DESC + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + NRIC_DESC_BOB"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseFailure(parser, ROLE_PATIENT_DESC + NAME_DESC_BOB"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + INVALID_PHONE_DESC + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + ADDRESS_DESC_BOB + NRIC_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + TAG_DESC_FRIEND, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseFailure(parser, ROLE_PATIENT_DESC + NAME_DESC_BOB"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + PHONE_DESC_BOB + INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + ADDRESS_DESC_BOB + NRIC_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + TAG_DESC_FRIEND, Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseFailure(parser, ROLE_PATIENT_DESC + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC + TAG_DESC_HUSBAND + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + NRIC_DESC_BOB, Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseFailure(parser, ROLE_PATIENT_DESC + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + NRIC_DESC_BOB"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // invalid NRIC"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseFailure(parser, ROLE_PATIENT_DESC + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + ADDRESS_DESC_BOB + INVALID_NRIC_DESC, Nric.MESSAGE_NRIC_CONSTRAINTS);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseFailure(parser, ROLE_PATIENT_DESC + INVALID_NAME_DESC + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC + NRIC_DESC_BOB, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                PREAMBLE_NON_EMPTY + ROLE_PATIENT_DESC + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + NRIC_DESC_BOB,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_GENERAL_USAGE));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 88,
      "-": 102
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DIAGNOSIS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DOCTOR_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DOCTOR_NRIC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GLOBAL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PATIENT_NAME;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PATIENT_NRIC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TREATMENT;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.logic.commands.ScheduleCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.patient.MedicalRecord;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.model.person.Appointment;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "import seedu.address.model.person.PersonContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.testutil.DoctorBuilder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.testutil.DoctorUtil;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.testutil.PatientUtil;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Patient patient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PatientUtil.getAddCommand(patient));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertEquals(new AddCommand(patient), command);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Doctor doctor \u003d new DoctorBuilder().build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        command \u003d (AddCommand) parser.parseCommand(DoctorUtil.getAddCommand(doctor));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertEquals(new AddCommand(doctor), command);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Patient patient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(patient).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PatientUtil.getEditPatientDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public void parseCommand_schedule() throws Exception {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        final Appointment appointment \u003d new Appointment(\"22.11.2018,1300,1400,Alice,S1234567B,Betty,S1234567A\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        final String testAppointment \u003d PREFIX_DATE + \"22.11.2018 \""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                + PREFIX_START_TIME + \"1300 \""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                + PREFIX_END_TIME + \"1400 \""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                + PREFIX_DOCTOR_NAME + \"Alice \""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + PREFIX_DOCTOR_NRIC + \"S1234567B \""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                + PREFIX_PATIENT_NAME + \"Betty \""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + PREFIX_PATIENT_NRIC + \"S1234567A \";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        ScheduleCommand command \u003d (ScheduleCommand) parser.parseCommand(ScheduleCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + testAppointment);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertEquals(new ScheduleCommand(INDEX_FIRST_PERSON, appointment), command);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Map\u003cPrefix, List\u003cString\u003e\u003e keywords \u003d Map.of(PREFIX_GLOBAL, new ArrayList\u003c\u003e(Arrays.asList(\"foo\", \"bar\", \"baz\")));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand(FindCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + keywords.get(PREFIX_GLOBAL).stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        assertEquals(new FindCommand(new PersonContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + \" \" + PREFIX_ROLE + \"DOCTOR\") instanceof ListCommand);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + \" \" + PREFIX_ROLE + \"PATIENT\") instanceof ListCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public void parseCommand_updateCommandWord_returnsUpdateCommand() throws Exception {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        final MedicalRecord medicalRecordWithoutComment \u003d new MedicalRecord(\"22.11.2018\", \"flu\","
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                \"tamiflu\", \"\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        final String testMedicalRecordWithoutComment \u003d PREFIX_DATE + \"22.11.2018 \""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                + PREFIX_DIAGNOSIS + \"flu \""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                + PREFIX_TREATMENT + \"tamiflu\";"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        UpdateCommand commandWithoutComment \u003d (UpdateCommand) parser.parseCommand(UpdateCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + testMedicalRecordWithoutComment);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        assertEquals(new UpdateCommand(INDEX_FIRST_PERSON, medicalRecordWithoutComment), commandWithoutComment);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        final MedicalRecord medicalRecordWithComment \u003d new MedicalRecord(\"22.11.2018\", \"flu\","
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                \"tamiflu\", \"\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        final String testMedicalRecordWithComment \u003d PREFIX_DATE + \"22.11.2018 \""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                + PREFIX_DIAGNOSIS + \"flu \""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                + PREFIX_TREATMENT + \"tamiflu\";"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        UpdateCommand commandWithComment \u003d (UpdateCommand) parser.parseCommand(UpdateCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + testMedicalRecordWithComment);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        assertEquals(new UpdateCommand(INDEX_FIRST_PERSON, medicalRecordWithComment), commandWithComment);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngkangtze": 2,
      "guestuser0123": 33,
      "GaryGohYP": 24,
      "-": 128,
      "nelvintan": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + VALID_ADDRESS_AMY + VALID_PHONE_AMY, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND + NRIC_DESC_BOB;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + EMAIL_DESC_AMY + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + ADDRESS_DESC_BOB + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 33,
      "-": 193
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GLOBAL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "import seedu.address.model.person.PersonContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cPrefix, List\u003cString\u003e\u003e testMap \u003d Map.of(PREFIX_GLOBAL, new ArrayList\u003c\u003e(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                new FindCommand(new PersonContainsKeywordsPredicate(testMap));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngkangtze": 1,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ScheduleCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DOCTOR_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DOCTOR_NRIC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PATIENT_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PATIENT_NRIC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.logic.commands.ScheduleCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.model.person.Appointment;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "public class ScheduleCommandParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    private ScheduleCommandParser parser \u003d new ScheduleCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    private final String nonEmptyAppointment \u003d PREFIX_DATE + \"22.11.2018 \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            + PREFIX_START_TIME + \"1300 \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            + PREFIX_END_TIME + \"1400 \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            + PREFIX_DOCTOR_NAME + \"Alice \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            + PREFIX_DOCTOR_NRIC + \"S1234567B \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            + PREFIX_PATIENT_NAME + \"Betty \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            + PREFIX_PATIENT_NRIC + \"S1234567A \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public void parse_indexSpecified_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // have remark"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + \" \" + nonEmptyAppointment;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        ScheduleCommand expectedCommand \u003d new ScheduleCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                new Appointment(\"22.11.2018\", \"1300\", \"1400\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                        \"Alice\", \"S1234567B\", \"Betty\", \"S1234567A\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // no remark"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + \" \" + nonEmptyAppointment;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        expectedCommand \u003d new ScheduleCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                new Appointment(\"22.11.2018\", \"1300\", \"1400\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                \"Alice\", \"S1234567B\", \"Betty\", \"S1234567A\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public void parse_missingCompulsoryField_failure() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ScheduleCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // no parameters"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertParseFailure(parser, ScheduleCommand.COMMAND_WORD, expectedMessage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // no index"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertParseFailure(parser, ScheduleCommand.COMMAND_WORD + \" \" + nonEmptyAppointment, expectedMessage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nelvintan": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/UpdateCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DIAGNOSIS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TREATMENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.patient.MedicalRecord;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "public class UpdateCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    private UpdateCommandParser parser \u003d new UpdateCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public void parse_indexSpecified_failure() throws Exception {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        // medical record without comment"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        final MedicalRecord medicalRecordWithoutComment \u003d new MedicalRecord(\"22.11.2018\", \"flu\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                \"tamiflu\", \"\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        String userInputWithoutComment \u003d targetIndex.getOneBased() + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                + PREFIX_DATE + \"22.11.2018 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                + PREFIX_DIAGNOSIS + \"flu \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                + PREFIX_TREATMENT + \"tamiflu\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        UpdateCommand expectedCommandWithoutComment \u003d new UpdateCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                medicalRecordWithoutComment);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        assertParseSuccess(parser, userInputWithoutComment, expectedCommandWithoutComment);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        // medical record with comment"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        final MedicalRecord medicalRecordWithComment \u003d new MedicalRecord(\"22.11.2018\", \"flu\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                \"tamiflu\", \"Some comment!\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        String userInputWithComment \u003d targetIndex.getOneBased() + \" \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                + PREFIX_DATE + \"22.11.2018 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                + PREFIX_DIAGNOSIS + \"flu \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                + PREFIX_TREATMENT + \"tamiflu \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                + PREFIX_COMMENT + \"Some comment!\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        UpdateCommand expectedCommandWithComment \u003d new UpdateCommand(INDEX_FIRST_PERSON, medicalRecordWithComment);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        assertParseSuccess(parser, userInputWithComment, expectedCommandWithComment);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public void parse_noFieldSpecified_failure() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, UpdateCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        // nothing at all"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        assertParseFailure(parser, UpdateCommand.COMMAND_WORD, expectedMessage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 1,
      "GaryGohYP": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Patient editedAlice \u003d new PatientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.hasPerson(null);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Patient editedAlice \u003d new PatientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.getPersonList().remove(0);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 4,
      "-": 107
    }
  },
  {
    "path": "src/test/java/seedu/address/model/IntuitivePromptManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.logic.commands.ScheduleCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.model.argumentmanagers.AddArgumentManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.model.argumentmanagers.EditArgumentManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.model.person.Role;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "public class IntuitivePromptManagerTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private IntuitivePromptManager intuitivePromptManager \u003d new IntuitivePromptManager();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public void isIntuitiveMode_onCreation_returnsFalse() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        assertFalse(intuitivePromptManager.isIntuitiveMode());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public void addArgument_addCommandWord_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(AddCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        assertTrue(intuitivePromptManager.isIntuitiveMode());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        assertFalse(intuitivePromptManager.areArgsAvailable());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public void getInstruction_getNextRequiredAddInstruction_getCorrectInstruction() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(AddCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        assertEquals(AddArgumentManager.ROLE_INSTRUCTION, intuitivePromptManager.getInstruction());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public void addArgument_addFirstArgument_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(AddCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(AddArgumentManager.PATIENT_ARG_IDENTIFIER);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        assertTrue(intuitivePromptManager.areArgsAvailable());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public void addArgument_invalidArgument_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(AddCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        thrown.expectMessage(Role.MESSAGE_ROLE_CONSTRAINTS"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                + \"\\n\" + AddArgumentManager.ROLE_INSTRUCTION);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"!@#$%\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    Arguments Retrieval Tests"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public void retrieveArguments_addPatientWithoutTags_successfulRetrieval() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(AddCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(AddArgumentManager.PATIENT_ARG_IDENTIFIER);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"John Doe\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"95592345\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"doe@gmail.com\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"Blk 123 Smith Street\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"//\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"S2345123A\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        assertFalse(intuitivePromptManager.isIntuitiveMode());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        String retrievedArguments \u003d intuitivePromptManager.retrieveArguments();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        assertEquals(retrievedArguments, AddCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                + PREFIX_ROLE + \"patient \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                + PREFIX_PHONE + \"95592345 \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                + PREFIX_EMAIL + \"doe@gmail.com \""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                + PREFIX_ADDRESS + \"Blk 123 Smith Street \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                + PREFIX_NRIC + \"S2345123A\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        assertFalse(intuitivePromptManager.areArgsAvailable());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public void retrieveArguments_addPatientWithTags_successfulRetrieval() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(AddCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(AddArgumentManager.PATIENT_ARG_IDENTIFIER);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"John Doe\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"95592345\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"doe@gmail.com\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"Blk 123 Smith Street\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"vegetarian,prefersTablets\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"S2345123A\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        assertFalse(intuitivePromptManager.isIntuitiveMode());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        String retrievedArguments \u003d intuitivePromptManager.retrieveArguments();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        assertEquals(retrievedArguments, AddCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                + PREFIX_ROLE + \"patient \""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                + PREFIX_PHONE + \"95592345 \""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                + PREFIX_EMAIL + \"doe@gmail.com \""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                + PREFIX_ADDRESS + \"Blk 123 Smith Street \""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                + PREFIX_TAG + \"vegetarian \""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                + PREFIX_TAG + \"prefersTablets \""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + PREFIX_NRIC + \"S2345123A\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        assertFalse(intuitivePromptManager.areArgsAvailable());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public void retrieveArguments_editPerson_successfulRetrieval() throws Exception {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(EditCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"2\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"1 3\"); //edit name and email"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"Jane Watson\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"watson@gmail.com\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        assertFalse(intuitivePromptManager.isIntuitiveMode());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        String retrievedArguments \u003d intuitivePromptManager.retrieveArguments();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        assertEquals(retrievedArguments, \"edit 2 n/Jane Watson e/watson@gmail.com\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        assertFalse(intuitivePromptManager.areArgsAvailable());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public void retrieveArguments_editClearPersonTags_successfulRetrieval() throws Exception {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(EditCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"2\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"5\"); //edit tags"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(EditArgumentManager.EDIT_CLEAR_TAGS_COMMAND);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        assertFalse(intuitivePromptManager.isIntuitiveMode());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        String retrievedArguments \u003d intuitivePromptManager.retrieveArguments();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        assertEquals(retrievedArguments, \"edit 2 t/\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        assertFalse(intuitivePromptManager.areArgsAvailable());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public void retrieveArguments_deletePerson_successfulRetrieval() throws Exception {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(DeleteCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"3\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        assertFalse(intuitivePromptManager.isIntuitiveMode());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        String retrievedArguments \u003d intuitivePromptManager.retrieveArguments();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        assertEquals(retrievedArguments, \"delete 3\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        assertFalse(intuitivePromptManager.areArgsAvailable());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public void retrieveArguments_scheduleAppointment_successfulRetrieval() throws Exception {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(ScheduleCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"1\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"12.12.2018\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"1500\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"1600\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        //doctor details"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"Jane Smith\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"S1231234A\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        //patient details"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"Bob Carpenter\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"S1111333X\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        assertFalse(intuitivePromptManager.isIntuitiveMode());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        String retrievedArguments \u003d intuitivePromptManager.retrieveArguments();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        assertEquals(retrievedArguments, \"schedule 1 d/12.12.2018 st/1500 et/1600 dn/Jane Smith di/S1231234A \""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                + \"pn/Bob Carpenter pi/S1111333X\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        assertFalse(intuitivePromptManager.areArgsAvailable());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    Instruction Retrieval Tests"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public void getInstruction_goBackForAddCommand_correctInstruction() throws Exception {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(AddCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(AddArgumentManager.DOCTOR_ARG_IDENTIFIER);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        assertEquals(intuitivePromptManager.getInstruction(), AddArgumentManager.NAME_INSTRUCTION);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.removeArgument();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        assertEquals(intuitivePromptManager.getInstruction(), AddArgumentManager.ROLE_INSTRUCTION);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public void getInstruction_goBackForEditCommand_correctInstruction() throws Exception {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(EditCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"2\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"1 3\"); //edit name and email"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"Jane Watson\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        assertEquals(intuitivePromptManager.getInstruction(), EditArgumentManager.EDIT_EMAIL_INSTRUCTION);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.removeArgument();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        assertEquals(intuitivePromptManager.getInstruction(), EditArgumentManager.EDIT_FIELDS_INSTRUCTION);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.removeArgument();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        assertEquals(intuitivePromptManager.getInstruction(), EditArgumentManager.EDIT_TARGET_INSTRUCTION);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tristonpang": 209,
      "guestuser0123": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GLOBAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "import seedu.address.model.person.PersonContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.hasPerson(null);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.getFilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(new PersonContainsKeywordsPredicate(Map.of(PREFIX_GLOBAL,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                new ArrayList\u003c\u003e(Arrays.asList(keywords)))));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns true"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngkangtze": 1,
      "-": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/model/doctor/DoctorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "package seedu.address.model.doctor;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MEDICAL_DEPARTMENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.GEORGE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.testutil.DoctorBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "public class DoctorTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Doctor doctor \u003d new DoctorBuilder().build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        doctor.getTags().remove(0);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertTrue(FIONA.isSamePerson(FIONA));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertFalse(FIONA.isSamePerson(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // different phone and email -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Doctor editedFiona \u003d new DoctorBuilder(FIONA).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertTrue(FIONA.isSamePerson(editedFiona));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // different name -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        editedFiona \u003d new DoctorBuilder(FIONA).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertTrue(FIONA.isSamePerson(editedFiona));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // different nric -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        editedFiona \u003d new DoctorBuilder(FIONA).withNric(VALID_NRIC_BOB).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertFalse(FIONA.isSamePerson(editedFiona));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        editedFiona \u003d new DoctorBuilder(FIONA).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertTrue(FIONA.isSamePerson(editedFiona));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        editedFiona \u003d new DoctorBuilder(FIONA).withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertTrue(FIONA.isSamePerson(editedFiona));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        editedFiona \u003d new DoctorBuilder(FIONA).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertTrue(FIONA.isSamePerson(editedFiona));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // different name, different medical department, same attributes -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        editedFiona \u003d new DoctorBuilder(FIONA).withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .withMedicalDepartment(VALID_MEDICAL_DEPARTMENT).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertTrue(FIONA.isSamePerson(editedFiona));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Doctor fionaCopy \u003d new DoctorBuilder(FIONA).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertTrue(FIONA.equals(fionaCopy));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertTrue(FIONA.equals(FIONA));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertFalse(FIONA.equals(null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertFalse(FIONA.equals(5));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // different patient -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertFalse(FIONA.equals(GEORGE));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Doctor editedFiona \u003d new DoctorBuilder(FIONA).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertFalse(FIONA.equals(editedFiona));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        editedFiona \u003d new DoctorBuilder(FIONA).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertFalse(FIONA.equals(editedFiona));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        editedFiona \u003d new DoctorBuilder(FIONA).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertFalse(FIONA.equals(editedFiona));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        editedFiona \u003d new DoctorBuilder(FIONA).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertFalse(FIONA.equals(editedFiona));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        editedFiona \u003d new DoctorBuilder(FIONA).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertFalse(FIONA.equals(editedFiona));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // different medical department -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        editedFiona \u003d new DoctorBuilder(FIONA).withMedicalDepartment(VALID_MEDICAL_DEPARTMENT).build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertFalse(FIONA.equals(editedFiona));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 114
    }
  },
  {
    "path": "src/test/java/seedu/address/model/doctor/MedicalDepartmentTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "package seedu.address.model.doctor;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "public class MedicalDepartmentTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new MedicalDepartment(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void constructor_invalidMedicalDept_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String invalidMedicalDept \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new MedicalDepartment(invalidMedicalDept));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void isValidMedDept() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // null medical department"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e MedicalDepartment.isValidMedDept(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // invalid department"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertFalse(MedicalDepartment.isValidMedDept(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertFalse(MedicalDepartment.isValidMedDept(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertFalse(MedicalDepartment.isValidMedDept(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertFalse(MedicalDepartment.isValidMedDept(\"ophthalmology*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertFalse(MedicalDepartment.isValidMedDept(\"123456789\")); // only numeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertFalse(MedicalDepartment.isValidMedDept(\"heart123\")); // alphanumeric characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // valid medical department"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertTrue(MedicalDepartment.isValidMedDept(\"cardiology\")); // alphabets only"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertTrue(MedicalDepartment.isValidMedDept(\"anatomy and neurobiology  \")); // contains whitespace"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertTrue(MedicalDepartment.isValidMedDept(\"Neurology\")); // with capital letters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertTrue(MedicalDepartment.isValidMedDept(\"NEUROLOGY\")); // all capital letters"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertTrue(MedicalDepartment.isValidMedDept(\"Pulmonary Diseases and Critical Care Medicine\")); // long dept name"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/model/patient/MedicalRecordTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "public class MedicalRecordTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        MedicalRecord medicalRecord \u003d new MedicalRecord(\"12.12.2018, Diagnosis: flu, Treatment: tamiflu, Comments: -\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        assertTrue(medicalRecord.equals(medicalRecord));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        MedicalRecord medicalRecordCopy \u003d new MedicalRecord(medicalRecord.value);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        assertTrue(medicalRecord.equals(medicalRecordCopy));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        assertFalse(medicalRecord.equals(1));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        assertFalse(medicalRecord.equals(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        MedicalRecord differentMedicalRecord \u003d new MedicalRecord(\"13.13.2018 , Diagnosis: cough,\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                + \" Treatment: dextromethorphan, Comments: -\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        assertFalse(medicalRecord.equals(differentMedicalRecord));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 1,
      "GaryGohYP": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/model/patient/PatientTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "public class PatientTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Patient patient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        patient.getTags().remove(0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // different phone and email -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Patient editedAlice \u003d new PatientBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // different name -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // different nric -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withNric(VALID_NRIC_BOB).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Patient aliceCopy \u003d new PatientBuilder(ALICE).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // different patient -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Patient editedAlice \u003d new PatientBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 25,
      "-": 79
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/AppointmentTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "public class AppointmentTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Appointment appointment \u003d new Appointment(\"22.11.2018,1300,1400,Jill,S1234567H,Jack,S1234567A\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertTrue(appointment.equals(appointment));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Appointment remarkCopy \u003d new Appointment(appointment.value);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertTrue(appointment.equals(remarkCopy));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertFalse(appointment.equals(1));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertFalse(appointment.equals(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // different remark -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Appointment differentRemark \u003d new Appointment(\"22.11.2018,1300,1400,Alice,S1234567H,Bob,S1234567B\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertFalse(appointment.equals(differentRemark));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public void addAndDeleteTest() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        ArrayList\u003cAppointment\u003e appointmentList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Appointment appt1 \u003d new Appointment(\"22.11.2018\", \"1300\", \"1400\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \"Alice\", \"S1234567H\", \"Bob\", \"S1234567A\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Appointment appt2 \u003d new Appointment(\"22.11.2018\", \"1300\", \"1400\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \"Jill\", \"S1234567H\", \"Jack\", \"S1234567B\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Appointment appt3 \u003d new Appointment(\"22.11.2018\", \"1300\", \"1400\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \"Jill\", \"S1234567H\", \"Jack\", \"S1234567B\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointmentList \u003d AppointmentManager.add(appointmentList, appt1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointmentList \u003d AppointmentManager.add(appointmentList, appt2);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointmentList \u003d AppointmentManager.delete(appointmentList, appt3);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        ArrayList\u003cAppointment\u003e secondAppointmentList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        secondAppointmentList \u003d AppointmentManager.add(appointmentList, appt1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertTrue(appointmentList.equals(secondAppointmentList));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public void noClashTest() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        ArrayList\u003cAppointment\u003e appointmentList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // appointment 4 and 5 have different Doctors"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Appointment appt4 \u003d new Appointment(\"22.11.2018\", \"1300\", \"1400\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \"Alice\", \"S1234567H\", \"Bob\", \"S1234567A\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Appointment appt5 \u003d new Appointment(\"22.11.2018\", \"1300\", \"1400\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \"Jill\", \"S1234567H\", \"Jack\", \"S1234567B\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // appointment 6 and 7 have different dates"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Appointment appt6 \u003d new Appointment(\"23.11.2018\", \"1300\", \"1400\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \"Priscilia\", \"S1234567H\", \"Elaine\", \"S1234567A\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Appointment appt7 \u003d new Appointment(\"24.11.2018\", \"1300\", \"1400\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \"Priscilia\", \"S1234567H\", \"Elaine\", \"S1234567A\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // appointment 8 and 9 have different timings that do not clash"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Appointment appt8 \u003d new Appointment(\"22.11.2018\", \"1430\", \"1445\","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \"Priscilia\", \"S1234567H\", \"Elaine\", \"S1234567A\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Appointment appt9 \u003d new Appointment(\"22.11.2018\", \"1500\", \"1600\","
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \"Priscilia\", \"S1234567H\", \"Elaine\", \"S1234567A\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointmentList \u003d AppointmentManager.add(appointmentList, appt4);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointmentList \u003d AppointmentManager.add(appointmentList, appt6);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointmentList \u003d AppointmentManager.add(appointmentList, appt8);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertTrue(AppointmentManager.isClash(appointmentList, appt5));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertFalse(AppointmentManager.isClash(appointmentList, appt7));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertFalse(AppointmentManager.isClash(appointmentList, appt9));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public void clashTest() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        ArrayList\u003cAppointment\u003e appointmentList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Appointment appt8 \u003d new Appointment(\"22.11.2018\", \"1300\", \"1400\","
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \"Jeff\", \"S1234567H\", \"Seid\", \"S1234567A\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // Case 1: new appointment\u0027s start time is before current appointment\u0027s start time"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // and new appointment\u0027s end time is after current appointment\u0027s end time"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Appointment appt9 \u003d new Appointment(\"22.11.2018\", \"1200\", \"1500\","
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \"Jeff\", \"S1234567H\", \"Seid\", \"S1234567A\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // Case 2: new appointment\u0027s start time is after current appointment\u0027s start time"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Appointment appt10 \u003d new Appointment(\"22.11.2018\", \"1330\", \"1400\","
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \"Jeff\", \"S1234567H\", \"Seid\", \"S1234567A\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // Case 3: new appointment\u0027s end time is after current appointment\u0027s end time"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Appointment appt11 \u003d new Appointment(\"22.11.2018\", \"1200\", \"1330\","
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \"Jeff\", \"S1234567H\", \"Seid\", \"S1234567A\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // Case 4: new appointment\u0027s start time is current appointment\u0027s end time"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Appointment appt12 \u003d new Appointment(\"22.11.2018\", \"1359\", \"1401\","
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \"Jeff\", \"S1234567H\", \"Seid\", \"S1234567A\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // Case 5: new appointment\u0027s start and end time are exactly the same as current"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Appointment appt13 \u003d new Appointment(\"22.11.2018\", \"1300\", \"1400\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \"Jeff\", \"S1234567H\", \"Seid\", \"S1234567A\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointmentList \u003d AppointmentManager.add(appointmentList, appt8);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertTrue(AppointmentManager.isClash(appointmentList, appt9));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertTrue(AppointmentManager.isClash(appointmentList, appt10));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertTrue(AppointmentManager.isClash(appointmentList, appt11));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertTrue(AppointmentManager.isClash(appointmentList, appt12));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertTrue(AppointmentManager.isClash(appointmentList, appt13));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public void clashTestForAppointmentList() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Appointment appt1 \u003d new Appointment(\"22.11.2018\", \"1300\", \"1400\","
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \"Alice\", \"S1234567H\", \"Bob\", \"S1234567A\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Appointment appt2 \u003d new Appointment(\"22.11.2018\", \"1401\", \"1405\","
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \"Alice\", \"S1234567H\", \"Bob\", \"S1234567A\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Appointment appt3 \u003d new Appointment(\"22.11.2018\", \"1300\", \"1330\","
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \"Alice\", \"S1234567H\", \"Bob\", \"S1234567A\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Appointment appt4 \u003d new Appointment(\"22.11.2018\", \"1330\", \"1400\","
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \"Alice\", \"S1234567H\", \"Bob\", \"S1234567A\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        ArrayList\u003cAppointment\u003e appointments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointments.add(appt1);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointments.add(appt2);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointments.add(appt3);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertTrue(AppointmentManager.isClash(appointments, appt4));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public void testForAnyOngoingAppointmentAtCurrentTime() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Appointment appt1 \u003d new Appointment(\"13.10.2018\", \"1300\", \"1400\","
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \"Alice\", \"S1234567H\", \"Bob\", \"S1234567A\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Appointment appt2 \u003d new Appointment(\"13.10.2018\", \"0600\", \"0700\","
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \"Alice\", \"S1234567H\", \"Bob\", \"S1234567A\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        ArrayList\u003cAppointment\u003e appointments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointments.add(appt1);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointments.add(appt2);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // Those appointments are in all in the past."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertFalse(AppointmentManager.isAnyAppointmentOngoing(appointments));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 34,
      "nelvintan": 118
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/NricTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "public class NricTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Nric(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void constructor_invalidNric_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String invalidNric \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Nric(invalidNric));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void isValidNric() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // null nric"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Nric.isValidNric(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // invalid nric"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertFalse(Nric.isValidNric(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertFalse(Nric.isValidNric(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertFalse(Nric.isValidNric(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertFalse(Nric.isValidNric(\"s1234567*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertFalse(Nric.isValidNric(\"s123*567B\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertFalse(Nric.isValidNric(\"s12345670\")); // does not end with a character"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertFalse(Nric.isValidNric(\"P1234567a\")); // does not start with a valid character"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertFalse(Nric.isValidNric(\"11234567A\")); // does not start with a character"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertFalse(Nric.isValidNric(\"s12345673333333J\")); // more than 7 digits"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertFalse(Nric.isValidNric(\"s12J\")); // less than 7 digits"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertFalse(Nric.isValidNric(\"ssss1234567j\")); // more than 2 starting characters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertFalse(Nric.isValidNric(\"s1234567ttttttt\")); // more than 2 ending characters"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertFalse(Nric.isValidNric(\"s1234   567t\")); // whitespaces in between nric code"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // valid nric"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertTrue(Nric.isValidNric(\"S1234567A\")); // all caps"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertTrue(Nric.isValidNric(\"s2234567a\")); // no caps"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertTrue(Nric.isValidNric(\"s1235567A\")); // last character in caps"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertTrue(Nric.isValidNric(\"S9234567a\")); // first character in caps"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertTrue(Nric.isValidNric(\"T1234567A\")); // start with F"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertTrue(Nric.isValidNric(\"F1234567A\")); // start with T"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertTrue(Nric.isValidNric(\"G1234567A\")); // start with G"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PersonContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GLOBAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "public class PersonContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cPrefix, List\u003cString\u003e\u003e firstPredicateKeywordList \u003d Map.of(PREFIX_GLOBAL, Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cPrefix, List\u003cString\u003e\u003e secondPredicateKeywordList \u003d Map.of(PREFIX_GLOBAL, Arrays.asList(\"first\", \"second\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        PersonContainsKeywordsPredicate firstPredicate \u003d new PersonContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        PersonContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                new PersonContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        PersonContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                new PersonContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        PersonContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                new PersonContainsKeywordsPredicate(Map.of(PREFIX_GLOBAL, Collections.singletonList(\"Alice\")));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new PersonContainsKeywordsPredicate(Map.of(PREFIX_GLOBAL, Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new PersonContainsKeywordsPredicate(Map.of(PREFIX_GLOBAL, Arrays.asList(\"Bob\", \"Carol\")));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new PersonContainsKeywordsPredicate(Map.of(PREFIX_GLOBAL, Arrays.asList(\"aLIce\", \"bOB\")));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonContainsKeywordsPredicate predicate \u003d new PersonContainsKeywordsPredicate(Map.of(PREFIX_GLOBAL,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertFalse(predicate.test(new PatientBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new PersonContainsKeywordsPredicate(Map.of(PREFIX_GLOBAL, Arrays.asList(\"Carol\")));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertFalse(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        // Search by phone, email and address, but not name"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new PersonContainsKeywordsPredicate(Map.of(PREFIX_GLOBAL,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\")));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngkangtze": 8,
      "guestuser0123": 8,
      "-": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/UniquePersonListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NRIC_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonListTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.contains(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Person editedAlice \u003d new PatientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(editedAlice));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void hasSuchPerson_nullName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        uniquePersonList.hasSuchPerson(null, ALICE.getNric());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void hasSuchPerson_nullNric_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        uniquePersonList.hasSuchPerson(ALICE.getName(), null);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void hasSuchPerson_nullNameAndNric_throwsNullPointerException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        uniquePersonList.hasSuchPerson(null, null);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void hasSuchPerson_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        uniquePersonList.hasSuchPerson(new Name(INVALID_NAME_DESC), AMY.getNric());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void hasSuchPerson_invalidNric_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        uniquePersonList.hasSuchPerson(AMY.getName(), new Nric(INVALID_NRIC_DESC));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void hasSuchPerson_personExists_returnsTrue() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertTrue(uniquePersonList.hasSuchPerson(ALICE.getName(), ALICE.getNric()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void hasSuchPerson_wrongName_returnsFalse() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertFalse(uniquePersonList.hasSuchPerson(BOB.getName(), ALICE.getNric()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void hasSuchPerson_wrongNric_returnsFalse() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertFalse(uniquePersonList.hasSuchPerson(ALICE.getName(), BOB.getNric()));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void hasSuchPerson_wrongNameAndNric_returnsFalse() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertFalse(uniquePersonList.hasSuchPerson(BOB.getName(), BOB.getNric()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(null);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(null, ALICE);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, null);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(PersonNotFoundException.class);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Patient editedAlice \u003d new PatientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, editedAlice);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(null);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(PersonNotFoundException.class);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons((UniquePersonList) null);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(expectedUniquePersonList);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons((List\u003cPerson\u003e) null);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(personList);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(listWithDuplicatePersons);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 63,
      "-": 182
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAdaptedDoctorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.storage.XmlAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.GEORGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.doctor.MedicalDepartment;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Appointment;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "public class XmlAdaptedDoctorTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final String INVALID_NRIC \u003d \"SJ123324B\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final String VALID_NAME \u003d GEORGE.getName().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final String VALID_NRIC \u003d GEORGE.getNric().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final String VALID_PHONE \u003d GEORGE.getPhone().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final String VALID_EMAIL \u003d GEORGE.getEmail().toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final String VALID_ADDRESS \u003d GEORGE.getAddress().toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    private static final String VALID_APPOINTMENT \u003d \"21.11.18,1300,1400,Jack,S1234567B,Pauline,S1234567A\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final String VALID_MEDICAL_DEPARTMENT \u003d GEORGE.getMedicalDepartment().toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d GEORGE.getTags().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        XmlAdaptedDoctor person \u003d new XmlAdaptedDoctor(GEORGE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertEquals(GEORGE, person.toModelType());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        XmlAdaptedDoctor person \u003d new XmlAdaptedDoctor(INVALID_NAME, VALID_NRIC, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                VALID_ADDRESS, VALID_TAGS, VALID_APPOINTMENT, VALID_MEDICAL_DEPARTMENT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        XmlAdaptedDoctor person \u003d new XmlAdaptedDoctor(null, VALID_NRIC, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                VALID_TAGS, VALID_APPOINTMENT, VALID_MEDICAL_DEPARTMENT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void toModelType_invalidNric_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        XmlAdaptedDoctor person \u003d new XmlAdaptedDoctor(VALID_NAME, INVALID_NRIC, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                VALID_ADDRESS, VALID_TAGS, VALID_APPOINTMENT, VALID_MEDICAL_DEPARTMENT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String expectedMessage \u003d Nric.MESSAGE_NRIC_CONSTRAINTS;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void toModelType_nullNric_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        XmlAdaptedDoctor person \u003d new XmlAdaptedDoctor(VALID_NAME, null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                VALID_TAGS, VALID_APPOINTMENT, VALID_MEDICAL_DEPARTMENT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Nric.class.getSimpleName());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        XmlAdaptedDoctor person \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                new XmlAdaptedDoctor(VALID_NAME, VALID_NRIC, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                        VALID_TAGS, VALID_APPOINTMENT, VALID_MEDICAL_DEPARTMENT);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        XmlAdaptedDoctor person \u003d new XmlAdaptedDoctor(VALID_NAME, VALID_NRIC, null, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                VALID_TAGS, VALID_APPOINTMENT, VALID_MEDICAL_DEPARTMENT);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        XmlAdaptedDoctor person \u003d"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                new XmlAdaptedDoctor(VALID_NAME, VALID_NRIC, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                        VALID_TAGS, VALID_APPOINTMENT, VALID_MEDICAL_DEPARTMENT);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        XmlAdaptedDoctor person \u003d new XmlAdaptedDoctor(VALID_NAME, VALID_NRIC, VALID_PHONE, null, VALID_ADDRESS,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                VALID_TAGS, VALID_APPOINTMENT, VALID_MEDICAL_DEPARTMENT);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        XmlAdaptedDoctor person \u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                new XmlAdaptedDoctor(VALID_NAME, VALID_NRIC, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                        VALID_TAGS, VALID_APPOINTMENT, VALID_MEDICAL_DEPARTMENT);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_ADDRESS_CONSTRAINTS;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        XmlAdaptedDoctor person \u003d new XmlAdaptedDoctor(VALID_NAME, VALID_NRIC, VALID_PHONE, VALID_EMAIL, null,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                VALID_TAGS, VALID_APPOINTMENT, VALID_MEDICAL_DEPARTMENT);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        XmlAdaptedDoctor person \u003d new XmlAdaptedDoctor(VALID_NAME, VALID_NRIC, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                invalidTags, VALID_APPOINTMENT, VALID_MEDICAL_DEPARTMENT);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void toModelType_nullAppointment_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        XmlAdaptedDoctor person \u003d new XmlAdaptedDoctor(VALID_NAME, VALID_NRIC, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                VALID_TAGS, null, VALID_MEDICAL_DEPARTMENT);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Appointment.class.getSimpleName());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void toModelType_nullMedicalDepartment_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        XmlAdaptedDoctor person \u003d new XmlAdaptedDoctor(VALID_NAME, VALID_NRIC, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                VALID_TAGS, VALID_APPOINTMENT, null);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, MedicalDepartment.class.getSimpleName());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 154,
      "nelvintan": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAdaptedPatientTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.XmlAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Appointment;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "public class XmlAdaptedPatientTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final String INVALID_NRIC \u003d \"SJ123324B\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final String VALID_NRIC \u003d BENSON.getNric().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final String VALID_APPOINTMENT \u003d \"21.11.18,1300,1400,Jack,Heart,Pauline,S1234567A\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    private static final String VALID_MEDICAL_RECORD \u003d BENSON.getMedicalRecord().toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        XmlAdaptedPatient person \u003d new XmlAdaptedPatient(BENSON);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        XmlAdaptedPatient person \u003d new XmlAdaptedPatient(INVALID_NAME, VALID_NRIC, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                VALID_ADDRESS, VALID_MEDICAL_RECORD, VALID_TAGS, VALID_APPOINTMENT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        XmlAdaptedPatient person \u003d new XmlAdaptedPatient(null, VALID_NRIC, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                VALID_MEDICAL_RECORD, VALID_TAGS, VALID_APPOINTMENT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void toModelType_invalidNric_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        XmlAdaptedPatient person \u003d new XmlAdaptedPatient(VALID_NAME, INVALID_NRIC, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                VALID_ADDRESS, VALID_MEDICAL_RECORD, VALID_TAGS, VALID_APPOINTMENT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String expectedMessage \u003d Nric.MESSAGE_NRIC_CONSTRAINTS;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void toModelType_nullNric_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        XmlAdaptedPatient person \u003d new XmlAdaptedPatient(VALID_NAME, null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                VALID_MEDICAL_RECORD, VALID_TAGS, VALID_APPOINTMENT);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Nric.class.getSimpleName());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        XmlAdaptedPatient person \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                new XmlAdaptedPatient(VALID_NAME, VALID_NRIC, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                        VALID_MEDICAL_RECORD, VALID_TAGS, VALID_APPOINTMENT);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        XmlAdaptedPatient person \u003d new XmlAdaptedPatient(VALID_NAME, VALID_NRIC, null, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                VALID_MEDICAL_RECORD, VALID_TAGS, VALID_APPOINTMENT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        XmlAdaptedPatient person \u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                new XmlAdaptedPatient(VALID_NAME, VALID_NRIC, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                        VALID_MEDICAL_RECORD, VALID_TAGS, VALID_APPOINTMENT);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        XmlAdaptedPatient person \u003d new XmlAdaptedPatient(VALID_NAME, VALID_NRIC, VALID_PHONE, null, VALID_ADDRESS,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                VALID_MEDICAL_RECORD, VALID_TAGS, VALID_APPOINTMENT);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        XmlAdaptedPatient person \u003d"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                new XmlAdaptedPatient(VALID_NAME, VALID_NRIC, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                        VALID_MEDICAL_RECORD, VALID_TAGS, VALID_APPOINTMENT);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_ADDRESS_CONSTRAINTS;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        XmlAdaptedPatient person \u003d new XmlAdaptedPatient(VALID_NAME, VALID_NRIC, VALID_PHONE, VALID_EMAIL, null,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                VALID_MEDICAL_RECORD, VALID_TAGS, VALID_APPOINTMENT);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        XmlAdaptedPatient person \u003d new XmlAdaptedPatient(VALID_NAME, VALID_NRIC, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                VALID_ADDRESS, VALID_MEDICAL_RECORD, invalidTags, VALID_APPOINTMENT);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void toModelType_nullAppointment_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        XmlAdaptedPatient person \u003d new XmlAdaptedPatient(VALID_NAME, VALID_NRIC, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                VALID_ADDRESS, VALID_MEDICAL_RECORD, VALID_TAGS, null);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Appointment.class.getSimpleName());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 50,
      "GaryGohYP": 1,
      "-": 95
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/DoctorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.doctor.MedicalDepartment;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Appointment;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " * A utility class to help with building Doctor objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "public class DoctorBuilder extends PersonBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String DEFAULT_MEDICAL_DEPARTMENT \u003d \"Cardiology\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private MedicalDepartment medicalDepartment;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public DoctorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        medicalDepartment \u003d new MedicalDepartment(DEFAULT_MEDICAL_DEPARTMENT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Initializes the PatientBuilder with the data of {@code patientToCopy}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public DoctorBuilder(Doctor doctorToCopy) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        super(doctorToCopy);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        medicalDepartment \u003d doctorToCopy.getMedicalDepartment();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Sets the {@code MedicalDepartment} of the {@code Doctor} that we are building."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public DoctorBuilder withMedicalDepartment(String medicalDepartment) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.medicalDepartment \u003d new MedicalDepartment(medicalDepartment);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public DoctorBuilder withName(String name) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public DoctorBuilder withNric(String nric) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.nric \u003d new Nric(nric);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public DoctorBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public DoctorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public DoctorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public DoctorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public DoctorBuilder withAppointment(String appointment) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.appointment \u003d new Appointment(appointment);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointmentList \u003d SampleDataUtil.getAppointmentsList(appointment);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public DoctorBuilder withAppointments(String ... appointments) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        appointmentList \u003d SampleDataUtil.getAppointmentsList(appointments);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public Doctor build() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        if (appointmentList !\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            return new Doctor(name, nric, phone, email, address, tags, appointmentList, medicalDepartment);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return new Doctor(name, nric, phone, email, address, tags, medicalDepartment);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 96,
      "nelvintan": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/DoctorUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICAL_DEPARTMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " * A utility class for Doctor."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "public class DoctorUtil extends PersonUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static String getAddCommand(Doctor source) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + PREFIX_ROLE + \"Doctor \" + getDoctorDetails(source);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Returns the part of command string for the given {@code doctor}\u0027s details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static String getDoctorDetails(Doctor doctor) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        sb.append(PREFIX_NAME + doctor.getName().fullName + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        sb.append(PREFIX_NRIC + doctor.getNric().code + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        sb.append(PREFIX_PHONE + doctor.getPhone().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        sb.append(PREFIX_EMAIL + doctor.getEmail().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        sb.append(PREFIX_ADDRESS + doctor.getAddress().value + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        doctor.getTags().stream().forEach(s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        sb.append(PREFIX_MEDICAL_DEPARTMENT + doctor.getMedicalDepartment().deptName + \" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Returns the part of command string that belongs to only {@code doctor}\u0027s details."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static String getEditDoctorDescriptorDetails(EditCommand.EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        sb.append(PREFIX_ROLE).append(\"Doctor \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        descriptor.getNric().ifPresent(nric -\u003e sb.append(PREFIX_NRIC).append(nric.code).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        descriptor.getMedicalDepartment().ifPresent(medicalDepartment -\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                sb.append(PREFIX_MEDICAL_DEPARTMENT).append(medicalDepartment.deptName).append(\" \"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 66
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(person.getAddress());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (person instanceof Patient) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            descriptor.setNric(((Patient) person).getNric());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            assert person instanceof Doctor;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            descriptor.setMedicalDepartment(((Doctor) person).getMedicalDepartment());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 9,
      "-": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PatientBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.patient.MedicalRecord;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Appointment;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " * A utility class to help with building Patient objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "public class PatientBuilder extends PersonBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String DEFAULT_MEDICAL_RECORD \u003d \", Diagnosis: , Treatment: , Comments: -\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private MedicalRecord medicalRecord;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public PatientBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        medicalRecord \u003d new MedicalRecord(DEFAULT_MEDICAL_RECORD);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Initializes the PatientBuilder with the data of {@code patientToCopy}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public PatientBuilder(Patient patientToCopy) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        super(patientToCopy);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        medicalRecord \u003d patientToCopy.getMedicalRecord();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public PatientBuilder withName(String name) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public PatientBuilder withNric(String nric) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.nric \u003d new Nric(nric);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public PatientBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public PatientBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public PatientBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public PatientBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public PatientBuilder withAppointment(String appointment) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.appointment \u003d new Appointment(appointment);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointmentList \u003d SampleDataUtil.getAppointmentsList(appointment);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public PatientBuilder withAppointments(String ... appointments) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        appointmentList \u003d SampleDataUtil.getAppointmentsList(appointments);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Sets the {@code MedicalRecord} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public PatientBuilder withMedicalRecord(String medicalRecord) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.medicalRecord \u003d new MedicalRecord(medicalRecord);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public Patient build() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        if (appointmentList !\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            return new Patient(name, nric, phone, email, address, tags, appointmentList, medicalRecord);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return new Patient(name, nric, phone, email, address, tags, medicalRecord);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 94,
      "nelvintan": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PatientUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " * A utility class for Patient."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "public class PatientUtil extends PersonUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static String getAddCommand(Patient source) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + PREFIX_ROLE + \"Patient \" + getPatientDetails(source);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Returns the part of command string that belongs to only {@code patient}\u0027s details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static String getPatientDetails(Patient source) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        sb.append(PREFIX_NAME + source.getName().fullName + \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        sb.append(PREFIX_PHONE + source.getPhone().value + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        sb.append(PREFIX_EMAIL + source.getEmail().value + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        sb.append(PREFIX_ADDRESS + source.getAddress().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        source.getTags().stream().forEach(s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        sb.append(PREFIX_NRIC + source.getNric().code + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static String getEditPatientDescriptorDetails(EditCommand.EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        descriptor.getNric().ifPresent(nric -\u003e sb.append(\" \").append(PREFIX_NRIC).append(nric.code).append(\" \"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.model.person.Appointment;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String DEFAULT_NRIC \u003d \"S1234567A\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String DEFAULT_APPOINTMENT \u003d \"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    protected Name name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    protected Nric nric;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    protected Phone phone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    protected Email email;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    protected Address address;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    protected Appointment appointment;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    protected ArrayList\u003cAppointment\u003e appointmentList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    protected Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        nric \u003d new Nric(DEFAULT_NRIC);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointment \u003d new Appointment(DEFAULT_APPOINTMENT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        nric \u003d personToCopy.getNric();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointment \u003d personToCopy.getAppointment();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointmentList \u003d personToCopy.getAppointmentList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Sets the {@code Nric} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public PersonBuilder withNric(String nric) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.nric \u003d new Nric(nric);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * Sets the {@code Appointment} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public PersonBuilder withAppointment(String appointment) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        this.appointment \u003d new Appointment(appointment);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointmentList \u003d SampleDataUtil.getAppointmentsList(appointment);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * Sets the {@code Appointment} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public PersonBuilder withAppointments(String ... appointments) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointmentList \u003d SampleDataUtil.getAppointmentsList(appointments);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @return a new Person with the relevant details."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        if (appointmentList !\u003d null) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            return new Person(name, nric, phone, email, address, tags, appointmentList);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return new Person(name, nric, phone, email, address, tags);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 23,
      "-": 86,
      "nelvintan": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        person.getTags().stream().forEach(s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 1,
      "-": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final Index INDEX_FIFTH_PERSON \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 1,
      "-": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    // Set all Persons with empty appointments instead of actual Appointments"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final Patient ALICE \u003d new PatientBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            .withPhone(\"94351253\").withMedicalRecord(\", Diagnosis: , Treatment: , Comments: -\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            .withNric(\"S7412345C\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final Patient BENSON \u003d new PatientBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\").withNric(\"S8234567A\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            .withMedicalRecord(\", Diagnosis: , Treatment: , Comments: -\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final Patient CARL \u003d new PatientBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            .withMedicalRecord(\", Diagnosis: , Treatment: , Comments: -\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            .withEmail(\"heinz@example.com\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            .withAddress(\"wall street\").withNric(\"S9898989B\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final Patient DANIEL \u003d new PatientBuilder().withName(\"Daniel Meier\").withPhone(\"87652599\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            .withMedicalRecord(\", Diagnosis: , Treatment: , Comments: -\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            .withEmail(\"cornelia@example.com\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            .withAddress(\"10th street\").withNric(\"S8234599A\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public static final Doctor ELLE \u003d new DoctorBuilder().withName(\"Elle Meyer\").withNric(\"S2234599A\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            .withPhone(\"9482224\").withMedicalDepartment(\"Oncology\").withEmail(\"werner@example.com\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            .withAddress(\"michegan ave\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final Doctor FIONA \u003d new DoctorBuilder().withName(\"Fiona Kunz\").withNric(\"s3234599a\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            .withPhone(\"9482427\").withMedicalDepartment(\"Cardiology\").withEmail(\"lydia@example.com\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            .withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final Doctor GEORGE \u003d new DoctorBuilder().withName(\"George Best\").withNric(\"s5234599a\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            .withPhone(\"9482442\").withMedicalDepartment(\"Neurology\").withEmail(\"anna@example.com\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            .withAddress(\"4th street\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            .withAppointment(\"23.11.2018,1300,1400,Priscilia,S1234567B,George Best,s5234599a\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            .withAppointments(\"23.11.2018,1300,1400,Priscilia,S1234567B,George Best,s5234599a\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final Patient HOON \u003d new PatientBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            .withNric(\"S9873342F\").withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final Doctor IDA \u003d new DoctorBuilder().withName(\"Ida Mueller\").withNric(\"s9090909e\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            .withPhone(\"8482131\").withMedicalDepartment(\"Physiology\").withEmail(\"hans@example.com\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            .withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final Patient AMY \u003d new PatientBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withNric(VALID_NRIC_AMY)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final Patient BOB \u003d new PatientBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withNric(VALID_NRIC_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 38,
      "-": 52,
      "nelvintan": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/PersonCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // no tags"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Patient personWithNoTags \u003d new PatientBuilder().withTags(new String[0]).build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard personCard \u003d new PersonCard(personWithNoTags, 1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(personCard);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardDisplay(personCard, personWithNoTags, 1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // with tags"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Person personWithTags \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        personCard \u003d new PersonCard(personWithTags, 2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(personCard);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardDisplay(personCard, personWithTags, 2);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Person person \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard personCard \u003d new PersonCard(person, 0);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // same person, same index -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard copy \u003d new PersonCard(person, 0);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(personCard.equals(copy));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(personCard.equals(personCard));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(personCard.equals(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(personCard.equals(0));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person, same index -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Person differentPerson \u003d new PatientBuilder().withName(\"differentName\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(personCard.equals(new PersonCard(differentPerson, 0)));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // same person, different index -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(personCard.equals(new PersonCard(person, 1)));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code personCard} displays the details of {@code expectedPerson} correctly and matches"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCardDisplay(PersonCard personCard, Person expectedPerson, int expectedId) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCardHandle personCardHandle \u003d new PersonCardHandle(personCard.getRoot());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Integer.toString(expectedId) + \". \", personCardHandle.getId());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify person details are displayed correctly"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardDisplaysPerson(expectedPerson, personCardHandle);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 6,
      "-": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/PersonListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersons;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final ObservableList\u003cPerson\u003e TYPICAL_PERSONS \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.observableList(getTypicalPersons());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final JumpToListRequestEvent JUMP_TO_SECOND_EVENT \u003d new JumpToListRequestEvent(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final int TEST_IC_NUMBER \u003d 1000000;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanelHandle personListPanelHandle;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        initUi(TYPICAL_PERSONS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_PERSONS.size(); i++) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            personListPanelHandle.navigateToCard(TYPICAL_PERSONS.get(i));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            Person expectedPerson \u003d TYPICAL_PERSONS.get(i);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            PersonCardHandle actualCard \u003d personListPanelHandle.getPersonCardHandle(i);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            assertCardDisplaysPerson(expectedPerson, actualCard);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleJumpToListRequestEvent() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        initUi(TYPICAL_PERSONS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(JUMP_TO_SECOND_EVENT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCardHandle expectedPerson \u003d personListPanelHandle.getPersonCardHandle(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCardHandle selectedPerson \u003d personListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardEquals(expectedPerson, selectedPerson);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifies that creating and deleting large number of persons in {@code PersonListPanel} requires lesser than"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void performanceTest() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cPerson\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }, \"Creation and deletion of person cards exceeded time limit\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a list of persons containing {@code personCount} persons that is used to populate the"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code PersonListPanel}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private ObservableList\u003cPerson\u003e createBackingList(int personCount) throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Path xmlFile \u003d createXmlFileWithPersons(personCount);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook xmlAddressBook \u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                XmlUtil.getDataFromFile(xmlFile, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.observableArrayList(xmlAddressBook.toModelType().getPersonList());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a .xml file containing {@code personCount} persons. This file will be deleted when the JVM terminates."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path createXmlFileWithPersons(int personCount) throws Exception {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        int icNum \u003d TEST_IC_NUMBER;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(\"\u003c?xml version\u003d\\\"1.0\\\" encoding\u003d\\\"UTF-8\\\" standalone\u003d\\\"yes\\\"?\u003e\\n\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(\"\u003caddressbook\u003e\\n\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c personCount; i++) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cpersons\u003e\\n\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            builder.append(\"\u003crole\u003ePatient\u003c/role\u003e\\n\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cname\u003e\").append(i).append(\"a\u003c/name\u003e\\n\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cphone\u003e000\u003c/phone\u003e\\n\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cemail\u003ea@aa\u003c/email\u003e\\n\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003caddress\u003ea\u003c/address\u003e\\n\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            builder.append(\"\u003cnric\u003eS\").append(icNum++).append(\"A\u003c/nric\u003e\\n\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            builder.append(\"\u003cmedicalRecord\u003e , Diagnosis: , Treatment: , Comments: -\u003c/medicalRecord\u003e\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            builder.append(\"\u003cappointment\u003ea\u003c/appointment\u003e\\n\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003c/persons\u003e\\n\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(\"\u003c/addressbook\u003e\\n\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        Path manyPersonsFile \u003d TEST_DATA_FOLDER.resolve(\"manyPersons.xml\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createFile(manyPersonsFile);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(manyPersonsFile, builder.toString());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        manyPersonsFile.toFile().deleteOnExit();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return manyPersonsFile;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes {@code personListPanelHandle} with a {@code PersonListPanel} backed by {@code backingList}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code PersonListPanel}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initUi(ObservableList\u003cPerson\u003e backingList) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonListPanel personListPanel \u003d new PersonListPanel(backingList);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(personListPanel);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelHandle \u003d new PersonListPanelHandle(getChildNode(personListPanel.getRoot(),"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                PersonListPanelHandle.PERSON_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngkangtze": 1,
      "guestuser0123": 7,
      "GaryGohYP": 1,
      "-": 123
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/testutil/GuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getTags(), actualCard.getTags());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCardDisplaysPerson(Person expectedPerson, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getPhone().value, actualCard.getPhone());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getEmail().value, actualCard.getEmail());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getAddress().value, actualCard.getAddress());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertEquals(expectedPerson.getAppointment().value, actualCard.getAppointment());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                actualCard.getTags());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, Person... persons) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            personListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(personListPanelHandle, persons.toArray(new Person[0]));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        int numberOfPeople \u003d personListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(size, numberOfPeople);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 74,
      "nelvintan": 1
    }
  },
  {
    "path": "src/test/java/systemtests/AddCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MEDICAL_DEPARTMENT_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NRIC_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ROLE_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ROLE_DOCTOR_DESC;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ROLE_PATIENT_DESC;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.doctor.MedicalDepartment;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Role;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.testutil.DoctorUtil;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.testutil.PatientUtil;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "public class AddCommandSystemTest extends systemtests.AddressBookSystemTest {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Patient toAdd \u003d AMY;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + ROLE_PATIENT_DESC + \"  \" + NAME_DESC_AMY + \"  \""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + PHONE_DESC_AMY + \"  \" + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + TAG_DESC_FRIEND + \"  \" + NRIC_DESC_AMY;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo adding Amy to the list -\u003e Amy deleted */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo adding Amy to the list -\u003e Amy added again */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except nric -\u003e added */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        toAdd \u003d new PatientBuilder(AMY).withNric(VALID_NRIC_BOB).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + ROLE_PATIENT_DESC + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + ADDRESS_DESC_AMY + TAG_DESC_FRIEND + NRIC_DESC_BOB;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add to empty address book -\u003e added */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ALICE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with tags, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d BOB;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + ROLE_PATIENT_DESC + TAG_DESC_FRIEND + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + ADDRESS_DESC_BOB + NAME_DESC_BOB + TAG_DESC_HUSBAND + EMAIL_DESC_BOB + NRIC_DESC_BOB;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person, missing tags -\u003e added */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(HOON);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filters the person list before adding -\u003e added */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(IDA);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operation while a person card is selected --------------------------- */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(CARL);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person -\u003e rejected */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        command \u003d PatientUtil.getAddCommand(HOON);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        toAdd \u003d new PatientBuilder(HOON).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        command \u003d PatientUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different email -\u003e rejected */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        toAdd \u003d new PatientBuilder(HOON).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        command \u003d PatientUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different address -\u003e rejected */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        toAdd \u003d new PatientBuilder(HOON).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        command \u003d PatientUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        command \u003d PatientUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        /* Case: missing role -\u003e rejected */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + ADDRESS_DESC_AMY + NRIC_DESC_AMY;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_GENERAL_USAGE));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing name -\u003e rejected */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + ROLE_PATIENT_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + ADDRESS_DESC_AMY + NRIC_DESC_AMY;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_GENERAL_USAGE));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing phone -\u003e rejected */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + ROLE_PATIENT_DESC + NAME_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + ADDRESS_DESC_AMY + NRIC_DESC_AMY;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_GENERAL_USAGE));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing email -\u003e rejected */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + ROLE_PATIENT_DESC + NAME_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + ADDRESS_DESC_AMY + NRIC_DESC_AMY;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_GENERAL_USAGE));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing address -\u003e rejected */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + ROLE_PATIENT_DESC + NAME_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + EMAIL_DESC_AMY + NRIC_DESC_AMY;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_GENERAL_USAGE));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        command \u003d \"adds \" + PatientUtil.getPersonDetails(toAdd);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        /* Case: invalid role -\u003e rejected */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + INVALID_ROLE_DESC + NAME_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NRIC_DESC_AMY;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertCommandFailure(command, Role.MESSAGE_ROLE_CONSTRAINTS);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + ROLE_PATIENT_DESC + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + ADDRESS_DESC_AMY + NRIC_DESC_AMY;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + ROLE_PATIENT_DESC + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + ADDRESS_DESC_AMY + NRIC_DESC_AMY;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + ROLE_PATIENT_DESC + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + ADDRESS_DESC_AMY + NRIC_DESC_AMY;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + ROLE_PATIENT_DESC + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + INVALID_ADDRESS_DESC + NRIC_DESC_AMY;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + ROLE_PATIENT_DESC + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + ADDRESS_DESC_AMY + INVALID_TAG_DESC + NRIC_DESC_AMY;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        /* Case: invalid nric -\u003e rejected */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + ROLE_PATIENT_DESC + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + ADDRESS_DESC_AMY + TAG_DESC_FRIEND + INVALID_NRIC_DESC;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertCommandFailure(command, Nric.MESSAGE_NRIC_CONSTRAINTS);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        /* Case: invalid medical department -\u003e rejected */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + ROLE_DOCTOR_DESC + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + ADDRESS_DESC_AMY + INVALID_MEDICAL_DEPARTMENT_DESC + NRIC_DESC_AMY;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertCommandFailure(command, MedicalDepartment.MESSAGE_DEPTNAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Person toAdd) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (toAdd instanceof Patient) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            assertCommandSuccess(PatientUtil.getAddCommand((Patient) toAdd), toAdd);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            assert toAdd instanceof Doctor;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            assertCommandSuccess(DoctorUtil.getAddCommand((Doctor) toAdd), toAdd);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(Person)"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Person toAdd) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(toAdd);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(String, Person)"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 84,
      "-": 204
    }
  },
  {
    "path": "src/test/java/systemtests/AddressBookSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "// import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "// import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import guitests.guihandles.PersonProfilePageHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "// import seedu.address.MainApp;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "// import seedu.address.ui.BrowserPanel;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class AddressBookSystemTest {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        //waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    protected AddressBook getInitialData() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanelHandle getPersonListPanel() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getPersonListPanel();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public PersonProfilePageHandle getPersonProfilePage() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return mainWindowHandle.getPersonProfilePage();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    //    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    //        return mainWindowHandle.getBrowserPanel();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        //waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons in the address book."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showAllPersons() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(getModel().getAddressBook().getPersonList().size(), getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showPersonsWithName(String keyword) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selects the person at {@code index} of the displayed list."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void selectPerson(Index index) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes all persons in the address book."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void deleteAllPersons() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, getModel().getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same person objects as {@code expectedModel}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the person list panel displays the persons in the model correctly."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(expectedModel.getAddressBook()), testApp.readStorageAddressBook());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        //getBrowserPanel().rememberUrl();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().rememberSelectedPersonCard();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * of the previously selected person."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        //assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().navigateToCard(getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        //        String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getName();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        //        URL expectedUrl;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        //        try {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        //            expectedUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + selectedCardName.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        //        } catch (MalformedURLException mue) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        //            throw new AssertionError(\"URL expected to be valid.\", mue);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        //        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        //        assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        //assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        //assertEquals(MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE), getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "                getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 30,
      "-": 267
    }
  },
  {
    "path": "src/test/java/systemtests/EditCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.testutil.PatientUtil;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void edit() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + \"  \" + NAME_DESC_BOB + \"  \" + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + \"  \" + TAG_DESC_HUSBAND + \"  \" + NRIC_DESC_BOB + \"  \";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Patient editedPerson \u003d new PatientBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo editing the last person in the list -\u003e last person restored */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo editing the last person in the list -\u003e last person edited again */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updatePerson("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as existing values -\u003e edited */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, BOB);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different name -\u003e rejected */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(getModel().getFilteredPersonList().get(index.getZeroBased()), BOB);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + NRIC_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different phone and email"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + PHONE_DESC_AMY + EMAIL_DESC_AMY + NRIC_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear tags -\u003e cleared */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + PREFIX_TAG.getPrefix();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        editedPerson \u003d new PatientBuilder((Patient) personToEdit).withTags().build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, edit index within bounds of address book and person list -\u003e edited */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        editedPerson \u003d new PatientBuilder((Patient) personToEdit).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, edit index within bounds of address book but out of bounds of person list"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------- Performing edit operation while a person card is selected -------------------------- */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in the person list, edit a person -\u003e edited, card selection remains unchanged but"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         * browser url changes"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(index);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + TAG_DESC_FRIEND + NRIC_DESC_AMY;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // this can be misleading: card selection actually remains unchanged but the"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // browser\u0027s url is updated to reflect the new person\u0027s name"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, AMY, index);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing index -\u003e rejected */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing all fields -\u003e rejected */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + INVALID_EMAIL_DESC, Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + INVALID_ADDRESS_DESC, Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values -\u003e rejected */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        executeCommand(PatientUtil.getAddCommand(BOB));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getModel().getFilteredPersonList().get(index.getZeroBased()).equals(BOB));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + NRIC_DESC_BOB"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + NRIC_DESC_BOB"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different address -\u003e rejected */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + NRIC_DESC_BOB"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + NRIC_DESC_BOB"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + PHONE_DESC_AMY + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different email -\u003e rejected */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + NRIC_DESC_BOB"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_AMY + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Index, Person, Index)} except that"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * the browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Person, Index)"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toEdit, editedPerson, null);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * updated to values specified {@code editedPerson}.\u003cbr\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson,"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     * browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card update accordingly depending on the card at"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 49,
      "-": 253
    }
  },
  {
    "path": "src/test/java/systemtests/FindCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.DANIEL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.GEORGE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void find() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: repeat previous find command where person list is displaying the persons we are finding"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person where person list is not displaying the person we are finding -\u003e 1 person found */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Carl\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CARL);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords -\u003e 2 persons found */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Benson Daniel\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords in reversed order -\u003e 2 persons found */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords with 1 repeat -\u003e 2 persons found */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson Daniel\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson NonMatchingKeyWord\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find same persons in address book after deleting 1 of them -\u003e 1 person found */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getModel().getAddressBook().getPersonList().contains(BENSON));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in address book, keyword is same as name but of different case -\u003e 1 person found */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" MeIeR\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        /* Case: find person in address book, keyword is substring of name -\u003e 1 persons found */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Mei\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in address book, name is substring of keyword -\u003e 0 persons found */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Meiers\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person not in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Mark\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        /* Case: find phone number of person in address book -\u003e 1 persons found */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getPhone().value;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        /* Case: find address of person in address book -\u003e 3 persons found */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getAddress().value;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CARL, DANIEL, GEORGE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        /* Case: find email of person in address book -\u003e 1 persons found */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getEmail().value;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        /* Case: find tags of person in address book -\u003e 3 persons found */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, ALICE, BENSON, DANIEL);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find while a person is selected -\u003e selected card deselected */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel\";"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in empty address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"FiNd Meier\";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 12,
      "-": 189
    }
  },
  {
    "path": "src/test/java/systemtests/HelpCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for the help window, which contains interaction with other UI components."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void openHelpWindow() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        //use accelerator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        getResultDisplay().click();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().click();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        getPersonProfilePage().click();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        //use menu button"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        //use command box"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // open help window and give it focus"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that while the help window is open the UI updates correctly for a command execution"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that the status bar too is updated correctly while the help window is open"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // note: the select command tested above does not update the status bar"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void help_multipleCommands_onlyOneHelpWindowOpen() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, guiRobot.getNumberOfWindowsShown(HelpWindowHandle.HELP_WINDOW_TITLE));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window is open, and closes it after checking."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowOpen() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window isn\u0027t open."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    //private void assertHelpWindowNotOpen() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    //    assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 5,
      "-": 99
    }
  }
]
